---
# cloud-config
package_upgrade: true
apt:
  sources:
    docker.list:
      source: deb [arch=amd64]
        https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
      keyserver: hkp://keyserver.ubuntu.com:80
    azure-cli.list:
      source: deb [arch=amd64]
        https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF
      keyserver: hkp://keyserver.ubuntu.com:80

packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose
  - azure-cli
  - gnupg2
  - pass

# create the docker group
groups:
  - docker

# add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]

write_files:
  - path: .env
    content: |
      REGISTRY_SERVER=${docker_registry_server}
      TERRAFORM_STATE_CONTAINER_NAME=${terraform_state_container_name}
      MGMT_RESOURCE_GROUP_NAME=${mgmt_resource_group_name}
      MGMT_STORAGE_ACCOUNT_NAME=${mgmt_storage_account_name}
      SERVICE_BUS_DEPLOYMENT_STATUS_UPDATE_QUEUE=${service_bus_deployment_status_update_queue}
      SERVICE_BUS_RESOURCE_REQUEST_QUEUE=${service_bus_resource_request_queue}
      SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE=${service_bus_namespace}
      VMSS_MSI_ID=${vmss_msi_id}
      # the following line makes sure the right msi will be used if multiple are available on the VM
      AZURE_CLIENT_ID=${vmss_msi_id}
      AZURE_SUBSCRIPTION_ID=${arm_subscription_id}
      ARM_CLIENT_ID=${vmss_msi_id}
      AZURE_TENANT_ID=${arm_tenant_id}
      ARM_USE_MSI=true
      APPLICATIONINSIGHTS_CONNECTION_STRING=${app_insights_connection_string}
      NUMBER_PROCESSES=${resource_processor_number_processes_per_instance}
      KEY_VAULT_NAME=${key_vault_name}
      KEY_VAULT_URL=${key_vault_url}
      ARM_ENVIRONMENT=${arm_environment}
      AZURE_ENVIRONMENT=${azure_environment}
      AAD_AUTHORITY_URL=${aad_authority_url}
      MICROSOFT_GRAPH_FQDN=${microsoft_graph_fqdn}
      FIREWALL_SKU=${firewall_sku}
      OTEL_RESOURCE_ATTRIBUTES=service.name=resource_processor,service.version=${resource_processor_vmss_porter_image_tag}
      OTEL_EXPERIMENTAL_RESOURCE_DETECTORS=azure_vm
      LOGGING_LEVEL=${logging_level}
      ${rp_bundle_values}
  - path: /etc/cron.hourly/docker-prune
    # An hourly cron job to have docker free disk space. Running this frquently
    # since disk might get full fast, but we prune only when free space is low.
    content: |
      #!/bin/bash
      set -o errexit
      used_percent=$(df / --output=pcent | tail -1 | sed 's/[^0-9]//g')
      echo "Used disk space percent: $${used_percent}"
      if (( used_percent > 75 )); then
        echo "Free space too low, pruning..."
        docker system prune -f
      fi
    permissions: '0755'

runcmd:
  # Those are useful live debug commands. Check the docs for details:
  # (https://microsoft.github.io/AzureTRE/troubleshooting-faq/troubleshooting-rp/#Logs)
  - printf '\nalias dlf="docker logs --since 1m --follow"' >> /etc/bash.bashrc
  - printf '\nalias dlf1='\''dlf $(docker ps -q | head -n 1)'\''' >> /etc/bash.bashrc
  - >
    printf '\nalias rpstatus='\''tmux new-session -d "watch docker ps"; \
    tmux split-window -p 100 -v "docker logs --since 1m --follow resource_processor1"; \
    tmux split-window -v -p 90; \
    tmux -2 attach-session -d'\''\n' >> /etc/bash.bashrc
  - export DEBIAN_FRONTEND=noninteractive
  - az cloud set --name ${azure_environment}
  - az login --identity -u ${vmss_msi_id}
  - az acr login --name ${docker_registry_server}
  - docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock
    --restart always --env-file .env
    --name resource_processor1
    --log-driver local
    ${docker_registry_server}/${resource_processor_vmss_porter_image_repository}:${resource_processor_vmss_porter_image_tag}
