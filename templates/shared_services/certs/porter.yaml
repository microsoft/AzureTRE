---
schemaVersion: 1.0.0
name: tre-shared-service-certs
version: 0.5.2
description: "An Azure TRE shared service to generate certificates for a specified internal domain using Letsencrypt"
registry: azuretre
dockerfile: Dockerfile.tmpl

credentials:
  - name: azure_tenant_id
    env: ARM_TENANT_ID
  - name: azure_subscription_id
    env: ARM_SUBSCRIPTION_ID
  - name: azure_client_id
    env: ARM_CLIENT_ID
  - name: azure_client_secret
    env: ARM_CLIENT_SECRET

parameters:
  - name: tre_id
    type: string
    description: "The ID of the parent TRE instance e.g., mytre-dev-3142"
  - name: azure_environment
    type: string
    default: "AzureCloud"
    description: "Used by Azure CLI to set the Azure environment"
  - name: tfstate_resource_group_name
    type: string
    description: "Resource group containing the Terraform state storage account"
  - name: tfstate_storage_account_name
    type: string
    description: "The name of the Terraform state storage account"
  - name: tfstate_container_name
    type: string
    default: "tfstate"
    description: "The name of the Terraform state storage container"
  - name: arm_use_msi
    env: ARM_USE_MSI
    type: boolean
    default: false
  - name: arm_environment
    env: ARM_ENVIRONMENT
    type: string
    default: "public"
  - name: domain_prefix
    type: string
    description: "The FQDN prefix (prepended to {TRE_ID}.{LOCATION}.cloudapp.azure.com) to generate certificate for"
  - name: cert_name
    type: string
    description: "What to call the certificate exported to KeyVault (alphanumeric and '-' only)"
  - name: id
    type: string
    description: "Resource ID"

mixins:
  - exec
  - terraform:
      clientVersion: 1.3.6
  - az:
      clientVersion: 2.37.0

install:
  - terraform:
      description: "Deploy shared service"
      vars:
        tre_id: ${ bundle.parameters.tre_id }
        domain_prefix: ${ bundle.parameters.domain_prefix }
        cert_name: ${ bundle.parameters.cert_name }
        tre_resource_id: ${ bundle.parameters.id }
      backendConfig:
        resource_group_name: ${ bundle.parameters.tfstate_resource_group_name }
        storage_account_name: ${ bundle.parameters.tfstate_storage_account_name }
        container_name: ${ bundle.parameters.tfstate_container_name }
        key: ${ bundle.parameters.tre_id }-shared-service-certs
      outputs:
        - name: fqdn
        - name: application_gateway_name
        - name: storage_account_name
        - name: resource_group_name
        - name: keyvault_name
  - az:
      description: "Set Azure Cloud Environment"
      arguments:
        - cloud
        - set
      flags:
        name: ${ bundle.parameters.azure_environment }
  - az:
      description: "Login to Azure"
      arguments:
        - login
      flags:
        identity:
        username: ${ bundle.credentials.azure_client_id }
  - exec:
      description: "Generate certificate"
      command: bash
      arguments:
        - ./scripts/letsencrypt.sh
      flags:
        fqdn: ${ bundle.outputs.fqdn }
        application_gateway_name: ${ bundle.outputs.application_gateway_name }
        storage_account_name: ${ bundle.outputs.storage_account_name }
        resource_group_name: ${ bundle.outputs.resource_group_name }
        keyvault_name: ${ bundle.outputs.keyvault_name }
        cert_name: ${ bundle.parameters.cert_name }
  - az:
      description: "Stop application gateway"
      arguments:
        - network
        - application-gateway
        - stop
      flags:
        resource-group: ${ bundle.outputs.resource_group_name }
        name: ${ bundle.outputs.application_gateway_name }


upgrade:
  - exec:
      description: "Upgrade shared service"
      command: echo
      arguments:
        - "This shared service does not implement upgrade action"

uninstall:
  - terraform:
      description: "Tear down shared service"
      vars:
        tre_id: ${ bundle.parameters.tre_id }
        domain_prefix: ${ bundle.parameters.domain_prefix }
        cert_name: ${ bundle.parameters.cert_name }
        tre_resource_id: ${ bundle.parameters.id }
      backendConfig:
        resource_group_name: ${ bundle.parameters.tfstate_resource_group_name }
        storage_account_name: ${ bundle.parameters.tfstate_storage_account_name }
        container_name: ${ bundle.parameters.tfstate_container_name }
        key: ${ bundle.parameters.tre_id }-shared-service-certs

renew:
  - terraform:
      arguments:
        - "output"
      description: "Get Terraform output variables"
      backendConfig:
        resource_group_name: ${ bundle.parameters.tfstate_resource_group_name }
        storage_account_name: ${ bundle.parameters.tfstate_storage_account_name }
        container_name: ${ bundle.parameters.tfstate_container_name }
        key: ${ bundle.parameters.tre_id }-shared-service-certs
      outputs:
        - name: fqdn
        - name: application_gateway_name
        - name: storage_account_name
        - name: resource_group_name
        - name: keyvault_name
  - az:
      description: "Set Azure Cloud Environment"
      arguments:
        - cloud
        - set
      flags:
        name: ${ bundle.parameters.azure_environment }
  - az:
      description: "Login to Azure"
      arguments:
        - login
      flags:
        identity:
        username: ${ bundle.credentials.azure_client_id }
  - az:
      description: "Start application gateway"
      arguments:
        - network
        - application-gateway
        - start
      flags:
        resource-group: ${ bundle.outputs.resource_group_name }
        name: ${ bundle.outputs.application_gateway_name }
  - exec:
      description: "Renew certificate"
      command: bash
      arguments:
        - ./scripts/letsencrypt.sh
      flags:
        fqdn: ${ bundle.outputs.fqdn }
        application_gateway_name: ${ bundle.outputs.application_gateway_name }
        storage_account_name: ${ bundle.outputs.storage_account_name }
        resource_group_name: ${ bundle.outputs.resource_group_name }
        keyvault_name: ${ bundle.outputs.keyvault_name }
        cert_name: ${ bundle.parameters.cert_name }
  - az:
      description: "Stop application gateway"
      arguments:
        - network
        - application-gateway
        - stop
      flags:
        resource-group: ${ bundle.outputs.resource_group_name }
        name: ${ bundle.outputs.application_gateway_name }
