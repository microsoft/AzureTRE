---
schemaVersion: 1.0.0
name: tre-service-innereye
version: 0.6.5
description: "An Azure TRE service for InnerEye Deep Learning"
registry: azuretre
dockerfile: Dockerfile.tmpl

credentials:
  - name: azure_tenant_id
    env: ARM_TENANT_ID
  - name: azure_subscription_id
    env: ARM_SUBSCRIPTION_ID
  - name: azure_client_id
    env: ARM_CLIENT_ID
  - name: azure_client_secret
    env: ARM_CLIENT_SECRET

parameters:
  - name: workspace_id
    type: string
  - name: tre_id
    type: string
  - name: id
    type: string
    description: "An Id for this installation"
  - name: azure_environment
    type: string
    default: "AzureCloud"
    description: "Used by Azure CLI to set the Azure environment"
  - name: inference_sp_client_id
    type: string
  - name: inference_sp_client_secret
    type: string
  - name: mgmt_acr_name
    type: string
  - name: tfstate_resource_group_name
    type: string
    description: "Resource group containing the Terraform state storage account"
    env: MGMT_RESOURCE_GROUP_NAME
  - name: tfstate_storage_account_name
    type: string
    description: "The name of the Terraform state storage account"
    env: MGMT_STORAGE_ACCOUNT_NAME
  - name: tfstate_container_name
    type: string
    default: "tfstate"
    description: "The name of the Terraform state storage container"
    env: TERRAFORM_STATE_CONTAINER_NAME
  - name: arm_use_msi
    env: ARM_USE_MSI
    type: boolean
    default: false
  - name: arm_environment
    env: ARM_ENVIRONMENT
    type: string
    default: "public"

mixins:
  - exec
  - az:
      clientVersion: 2.37.0
      extensions:
        - azure-firewall
  - terraform:
      clientVersion: 1.3.6

install:
  - az:
      description: "Set Azure Cloud Environment"
      arguments:
        - cloud
        - set
      flags:
        name: ${ bundle.parameters.azure_environment }
  - az:
      description: "az login"
      arguments:
        - login
      flags:
        identity:
        username: ${ bundle.credentials.azure_client_id}
  - az:
      description: "acr login"
      arguments:
        - acr
        - login
      flags:
        name: ${ bundle.parameters.mgmt_acr_name }
  - exec:
      description: "Install Azure ML service"
      command: ./install_service_azureml.sh
  - terraform:
      description: "Deploy service"
      vars:
        workspace_id: ${ bundle.parameters.workspace_id }
        tre_id: ${ bundle.parameters.tre_id }
        tre_resource_id: ${ bundle.parameters.id }
        inference_sp_client_id: ${ bundle.parameters.inference_sp_client_id }
        inference_sp_client_secret: ${ bundle.parameters.inference_sp_client_secret }
        arm_tenant_id: ${ bundle.credentials.azure_tenant_id }
        arm_client_id: ${ bundle.credentials.azure_client_id }
        arm_client_secret: ${ bundle.credentials.azure_client_secret }
        arm_use_msi: ${ bundle.parameters.arm_use_msi }
        arm_environment: ${ bundle.parameters.arm_environment }
      backendConfig:
        resource_group_name: ${ bundle.parameters.tfstate_resource_group_name }
        storage_account_name: ${ bundle.parameters.tfstate_storage_account_name }
        container_name: ${ bundle.parameters.tfstate_container_name }
        key: tre-service-innereye-${ bundle.parameters.id }
      outputs:
        - name: azureml_compute_cluster_name

upgrade:
  - exec:
      description: "Upgrade service"
      command: echo
      arguments:
        - "This workspace does not implement upgrade action"

uninstall:
  - terraform:
      description: "Tear down workspace"
      vars:
        workspace_id: ${ bundle.parameters.workspace_id }
        tre_id: ${ bundle.parameters.tre_id }
        tre_resource_id: ${ bundle.parameters.id }
        inference_sp_client_id: ${ bundle.parameters.inference_sp_client_id }
        inference_sp_client_secret: ${ bundle.parameters.inference_sp_client_secret }
        arm_tenant_id: ${ bundle.credentials.azure_tenant_id }
        arm_client_id: ${ bundle.credentials.azure_client_id }
        arm_client_secret: ${ bundle.credentials.azure_client_secret }
        arm_use_msi: ${ bundle.parameters.arm_use_msi }
        arm_environment: ${ bundle.parameters.arm_environment }
      backendConfig:
        resource_group_name: ${ bundle.parameters.tfstate_resource_group_name }
        storage_account_name: ${ bundle.parameters.tfstate_storage_account_name }
        container_name: ${ bundle.parameters.tfstate_container_name }
        key: tre-service-innereye-${ bundle.parameters.id }
