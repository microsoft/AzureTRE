{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure TRE Overview","text":""},{"location":"#what-is-azure-tre","title":"What is Azure TRE?","text":"<p>Across multiple industries, be it a pharmaceutical company interrogating clinical trial results, a public health provider analyzing electronic health records, or an engineering organization working on next-generation systems, there is a need to enable researchers and solution developers to collaborate on sensitive data.  </p> <p>Trusted Research Environments (TREs) enable organisations to provide research and development (R&amp;D) teams secure access to data alongside tooling to ensure productivity. Further information on TREs in general can be found in many places, one good resource specifically for healthcare is HDR UK.</p> <p>Azure TRE is finding new applications and to date, has been used as the basis for exploring future secure collaboration environments in engineering. Workloads investigated include systems and software development. In truth, any workload in any industry could theoretically be supported with extensions to Azure TRE.</p> <p>The Azure Trusted Research Environment project is an accelerator to assist Microsoft customers and partners who want to build out Trusted Research environments on Azure. This project enables authorized users to deploy and configure secure workspaces and R&amp;D tooling without a dependency on IT teams.  </p> <p>This project is typically implemented alongside a data platform that provides research ready datasets to TRE workspaces:</p> <p></p> <p>Azure TRE has also been proven to handle unstructured data scenarios. For example, collaborative Computer Aided Design (CAD), with Product Lifecycle Management integration.</p> <p>TREs are not \u201cone size fits all\u201d, hence although the Azure TRE has a number of out of the box features, the project has been built be extensible, and hence tooling and data platform agnostic.</p> <p>Core features include:</p> <ul> <li>Self-service for administrators \u2013 workspace creation and administration</li> <li>Self-service for R&amp;D teams \u2013 R&amp;D tooling creation and administration</li> <li>Package and repository mirroring</li> <li>Extensible architecture - build your own service templates as required</li> <li>Microsoft Entra ID integration</li> <li>Airlock</li> <li>Cost reporting</li> <li>Ready to workspace templates including:<ul> <li>Restricted with data exfiltration control</li> <li>Unrestricted for open data</li> </ul> </li> <li>Ready to go workspace service templates including:<ul> <li>Virtual Desktops: Windows, Linux</li> <li>AzureML (Jupyter, R Studio, VS Code)</li> <li>ML Flow, Gitea</li> </ul> </li> </ul>"},{"location":"coming-soon/","title":"Coming Soon","text":"<p>We're working to improve our documentation, and fill in some gaps. Unfortunately, this particular page is one of the gaps we're looking to fill and isn't yet available.</p>"},{"location":"coming-soon/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"contributing/","title":"How to contribute to Azure TRE","text":"<p>To read about how to set up your development environment and contribute to Azure TRE components please visit Local Development.</p>"},{"location":"contributing/#did-you-find-a-bug","title":"Did you find a bug?","text":"<ul> <li>Ensure the bug was not already reported by searching on GitHub under Issues.</li> <li>If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.</li> </ul>"},{"location":"contributing/#did-you-write-a-patch-that-fixes-a-bug","title":"Did you write a patch that fixes a bug?","text":"<ul> <li>Open a new GitHub pull request with the patch.</li> <li>Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.</li> <li>Before submitting, please double check on the current coding conventions used.</li> </ul>"},{"location":"contributing/#do-you-intend-to-add-a-new-feature-or-change-an-existing-one","title":"Do you intend to add a new feature or change an existing one?","text":"<ul> <li>Open a new feature issue so we can first discuss the changes there. After the discussion you may send a PR with relevant changes. Do not send a PR without discussion on an issue.</li> </ul>"},{"location":"contributing/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<ul> <li>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</li> </ul> <ul> <li> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <ul> <li>Existing Documentation Issues</li> </ul> </li> </ul> <ul> <li> <p>Or, you can raise a new issue by clicking on this link:</p> <ul> <li>Report an Issue or Make a Suggestion</li> </ul> </li> </ul> <p>Thanks!  </p>"},{"location":"azure-tre-overview/airlock/","title":"Airlock","text":"<p>In a Trusted Research Environment (TRE) the workspaces represent a security boundary that enables researchers to access data, execute analysis, apply algorithms and collect reports. The airlock capability is the only mechanism that allows users to <code>import</code> or <code>export</code> data, tools or other file based artefacts in a secure fashion with a human approval. This constitutes the mechanism focused on preventing data exfiltration and securing TRE and its workspaces from inappropriate data, while allowing researchers to work on their projects and execute their tasks. The airlock feature brings several actions: ingress/egress Mechanism; Data movement; Security gates; Approval mechanism and Notifications. As part of TRE's Safe settings all activity must be tracked for auditing purposes.</p> <p>The Airlock feature aims to address these goals:</p> <ul> <li>Prevent unauthorised data import or export.</li> </ul> <ul> <li>Provide a process to allow approved data to be imported through the security boundary of a TRE Workspace.</li> </ul> <ul> <li>TRE provides functionality to track requests and decisions, supporting cycles of revision, approval or rejection.</li> </ul> <ul> <li>Data being imported with an airlock import process can be automatically scanned for security issues.</li> </ul> <ul> <li>Data being exported or imported must be manually reviewed by the Airlock Manager.</li> </ul> <ul> <li>Notify the requesting researcher of the process progress and/or required actions.</li> </ul> <ul> <li>All steps within the airlock process are audited.</li> </ul> <p>Typically in a TRE, the Airlock feature would be used to allow a researcher to export the outputs of a research project such as summary results. With the airlock, data to be exported must go through a human review, typically undertaken by a data governance team.</p> <p>The Airlock feature will create events on every meaningful step of the process. This will enable increased flexibility by allowing an organization to extend the notification mechanism.</p>"},{"location":"azure-tre-overview/airlock/#ingressegress-mechanism","title":"Ingress/Egress Mechanism","text":"<p>The Airlock allows a TRE user to start the <code>import</code> or <code>export</code> process to a given workspace. A number of milestones must be reached in order to complete a successful import or export. These milestones are defined using the following states:</p> <ol> <li>Draft: An Airlock request has been created but has not yet started. The TRE User/Researcher has now access to a storage location and they must identify the data to be processed. At this point the airlock import/export processes allow a single file to be processed. However a compressed file may be used (zip).</li> <li>Submitted: The request was submitted by the researcher (not yet processed).</li> <li>In-Review: The request is ready to be reviewed. This state can be reached directly from Submitted state or after going through a successful security scan (found clean).</li> <li>Approval In-progress: The Airlock request has been approved, however data movement is still ongoing.</li> <li>Approved: The Airlock request has been approved. At this state, data has been securely verified and manually reviewed. The data is now in its final location. For an import process the data is now available in the TRE workspace, it can be accessed by the requestor from within the workspace.</li> <li>Rejection In-progress: The Airlock request has been rejected, however data movement is still ongoing.</li> <li>Rejected: The Airlock request has been rejected. The data in the process was rejected manually by the Airlock Manager.</li> <li>Cancelled: The Airlock request was manually cancelled by the requestor TRE user, a Workspace owner or a TRE administrator. The cancelation is only allowed when the request is not actively changing (i.e. Draft or In-Review state).</li> <li>Blocking In-progress: The Airlock request has been blocked, however data movement is still ongoing.</li> <li>Blocked By Scan: The Airlock request has been blocked. The security analysis found issues in the submitted data and consequently quarantined the data.</li> </ol> <pre><code>graph TD \n  A[Researcher wants to export data from TRE Workspace] --&gt;|Request created| B[Request in state Draft] \n  B--&gt;|Researcher gets link to storage container and uploads data| B\n  B--&gt;|Request submitted| C[Submitted]\n  C--&gt; D{Security issues found?} \n  D--&gt;|Yes| E[Blocking In-progress]\n  D--&gt;|No| G[In-Review]\n  E:::temporary--&gt; F((Blocked By Scan))\n  G--&gt;|Human Review| H{Is data appropriate to export?}\n  H--&gt;|Approve| I[Approval In-progress]\n  H--&gt;|Reject| J[Rejection In-progress]\n  I:::temporary--&gt;K((Approved))\n  J:::temporary--&gt;L((Rejected))\n  B--&gt;|Request Canceled| X((Canceled))\n  G--&gt;|Request Canceled| X\n  H--&gt;|Request Canceled| X\n  classDef temporary stroke-dasharray: 5 5</code></pre> <p>Airlock state flow diagram for an Airlock export request</p> <p>When an airlock process is created the initial state is Draft and the required infrastructure will get created providing a single container to isolate the data in the request. Once completed, the user will be able to get a link for this container inside the storage account (URL + SAS token) that they can use to upload the desired data to be processed (import or export).</p> <p>This storage location is external for import (<code>stalimex</code>) or internal for export (<code>stalexint</code>), however only accessible to the requestor (ex: a TRE user/researcher). The user will be able to upload a file to the provided storage location, using any tool of their preference: Azure Storage Explorer or AzCopy which is a command line tool.</p> <p>The user Submits the request (TRE API call) starting the data movement (to the <code>stalimip</code> - import in-progress or <code>stalexip</code> - export in-progress). The airlock request is now in state Submitted. If enabled, the Malware Scanning is started. The scan is done using Microsoft Defender for Storage, which is described in details here. In the case that security flaws are found, the request state becomes Blocking In-progress while the data is moved to blocked storage  (either import blocked <code>stalimblocked</code> or export blocked <code>stalexblocked</code>). In this case, the request is finalized with the state Blocked By Scan. If the Security Scanning does not identify any security flaws, the request state becomes In-Review. Simultaneously, a notification is sent to the Airlock Manager user. The user needs to ask for the container URL using the TRE API (SAS token + URL with READ permission).</p> <p>The Security Scanning can be disabled, changing the request state from Submitted straight to In-Review.</p> <p>The Airlock Manager will manually review the data using the tools of their choice available in the TRE workspace. Once review is completed, the Airlock Manager will have to Approve or Reject the airlock proces, though a TRE API call. At this point, the request will change state to either Approval In-progress or Rejection In-progress, while the data movement occurs moving afterwards to Approved or Rejected accordingly. The data will now be in the final storage destination: <code>stalexapp</code> - export approved  or <code>stalimapp</code> - import approved. With this state change, a notification will be triggered to the requestor including the location of the processed data in the form of an URL + SAS token.</p>"},{"location":"azure-tre-overview/airlock/#data-movement","title":"Data movement","text":"<p>For any airlock process, there is data movement either into a TRE workspace (in import process) or from a TRE workspace (in export process). Being a TRE Workspace boundary, there are networking configurations designed to achieve this goal. The data movement will guarantee that the data is automatically verified for security flaws and manually reviewed, before placing data inside the TRE Workspace. Also, the process guarantees that data is not tampered with throughout the process.</p> <p>In an import process, data will transition from more public locations (yet confined to the requestor) to TRE workspace storage, after guaranteeing security automatically and by manual review.</p> <p>In an export process, data will transition from internal locations (available to the requestor) to public locations in the TRE, after going through a manual review.</p> <p>Considering that the Airlock requests may require large data movements, the operations can have longer durations, hence becoming the operations asynchronous. This is why states like Approval In-progress, Rejection In-progress or Blocking In-progress will be set while there are data movement operations.</p> <p>The data movement mechanism is data-driven, allowing an organization to extend how request data transitions between</p>"},{"location":"azure-tre-overview/airlock/#security-scan","title":"Security Scan","text":"<p>The identified data in a airlock proces, will be submited to a security scan. If the security scan identifies issues the data is quarantined and a report is added to the process metadata. Both the requestor and Workspace Owner are notified. For a successful security scan, the data will remain in state In-progress, and accessible to the Workspace Owner.</p> <ul> <li>The Security scan will be optional, behind a feature flag enabled by a script</li> <li>The outcome of the security scan will be either the in-progress (<code>stalexip</code>) storage or blocked (<code>stalexblocked</code>)</li> <li>An airlock process will guarantee that the content being imported/exported is secure. It is envisioned that a set of security gates are identified to be executed successfully for a process to be approved.</li> </ul>"},{"location":"azure-tre-overview/airlock/#approval-mechanism","title":"Approval mechanism","text":"<p>The approval mechanism, is bundled with any airlock process, providing a specific way to <code>approve</code> or <code>reject</code> the data. This mechanism will allow the Airlock Managers to explicitly approve/reject the process, after having access to the data. The Airlock Manager users will be able to execute a manual review on the data using the tools available to them in a review TRE Workspace. Once this manual review is executed, Airlock Managers can proactively approve or reject the airlock request.</p> <p>The only goal of the Approval mechanism is to provide a cycle of revision, approval or rejection while tracking the decision.</p> <p>This mechanism will provide access to the data in the airlock process, and will be able to use a VM in TRE workspace. The data review will be the Airlock Manager responsibility</p> <ul> <li>It is envisioned that this mechanism to be more flexible and extensible.</li> <li>The <code>Airlock Manager</code> is a role defined at the workspace instance level and assigned to identities. Initially, the <code>Owner</code> role will be used.</li> </ul>"},{"location":"azure-tre-overview/airlock/#notifications","title":"Notifications","text":"<p>Throughout the airlock process, the notification mechanism will notify the relevant people of the process. Both the requestor (TRE User/Researcher) and the Workspace Owner will be notified by email of the relevant process events.</p> <p>Whenever the airlock process changes to a state of Draft, Submitted, Approved, Rejected, Approval In-progress, Rejection In-progress, Blocked By Scan or Cancelled, the process requestor gets notified. When the state changes to <code>In-progress</code> the Workspace Owner (Airlock Manager) gets notified.</p> <ul> <li>The Notification mechanism is also data-driven, allowing an organization to extend the notifications behavior. The mechanism is exemplified with a Logic App determining the notifications logic.</li> <li>Notifications will work with All TRE users being Microsoft Entra ID users (guests or not), with email defined \u2013 if not, notifications will not be sent.</li> </ul>"},{"location":"azure-tre-overview/airlock/#architecture","title":"Architecture","text":"<p>The Airlock feature is supported by infrastructure at the TRE and workspace level, containing a set of storage accounts. Each Airlock request will provision and use unique storage containers with the request id in its name.</p> <pre><code>graph LR\n  subgraph TRE Workspace\n  E[(stalimapp&lt;/br&gt;import approved)]\n  end\n  subgraph TRE\n  A[(stalimex&lt;/br&gt;import external)]--&gt;|Request Submitted| B\n  B[(stalimip&lt;/br&gt;import in-progress)]--&gt;|Security issues found| D[(stalimblocked&lt;/br&gt;import blocked)] \n  B--&gt;|No security issues found| review{Manual&lt;/br&gt;Approval} \n  review--&gt;|Rejected| C[(stalimrej&lt;/br&gt;import rejected)]\n  review--&gt;|Approved| E\n  end\n  subgraph External\n      data(Data to import)--&gt;A\n  end</code></pre> <p>Data movement in an Airlock import request</p> <pre><code>graph LR\n  subgraph TRE workspace\n  data(Data to export)--&gt;A\n  A[(stalexint&lt;/br&gt;export internal)]--&gt;|Request Submitted| B\n  B[(stalexip&lt;/br&gt;export in-progress)]--&gt;|Security issues found| D[(stalexblocked&lt;/br&gt;export blocked)] \n  B--&gt;|No security issues found| review{Manual&lt;/br&gt;Approval} \n  review--&gt;|Rejected| C[(stalexrej&lt;/br&gt;export rejected)]\n  end\n  subgraph External\n  review--&gt;|Approved| E[(stalexapp&lt;/br&gt;export approved)]\n  end</code></pre> <p>Data movement in an Airlock export request</p> <p>TRE:</p> <ul> <li><code>stalimex</code> - storage (st) airlock (al) import (im) external (ex)</li> <li><code>stalimip</code> - storage (st) airlock (al) import (im) in-progress (ip)</li> <li><code>stalimrej</code> - storage (st) airlock (al) import (im) rejected (rej)</li> <li><code>stalimblocked</code> - storage (st) airlock (al) import (im) blocked</li> <li><code>stalexapp</code> - storage (st) airlock (al) export (ex) approved (app)</li> </ul> <p>Workspace:</p> <ul> <li><code>stalimapp</code> - workspace storage (st) airlock (al) import (im) approved (app)</li> <li><code>stalexint</code> - workspace storage (st) airlock (al) export (ex) internal (int)</li> <li><code>stalexip</code> - workspace storage (st) airlock (al) export (ex) in-progress (ip)</li> <li><code>stalexrej</code> - workspace storage (st) airlock (al) export (ex) rejected (rej)</li> <li><code>stalexblocked</code> - workspace storage (st) airlock (al) export (ex) blocked</li> </ul> <ul> <li>The external storage accounts (<code>stalimex</code>, <code>stalexapp</code>), are not bound to any vnet and are accessible (with SAS token) via the internet</li> <li>The internal storage account (<code>stalexint</code>) is bound to the workspace vnet, so ONLY TRE Users/Researchers on that workspace can access it</li> <li>The (export) in-progress storage account (<code>stalexip</code>) is bound to the workspace vnet</li> <li>The (export) blocked storage account (<code>stalexblocked</code>) is bound to the workspace vnet</li> <li>The (export) rejected storage account (<code>stalexrej</code>) is bound to the workspace vnet</li> <li>The (import) in-progress storage account (<code>stalimip</code>) is bound to the TRE CORE vnet</li> <li>The (import) blocked storage account (<code>stalimblocked</code>) is bound to the TRE CORE vnet</li> <li>The (import) rejected storage account (<code>stalimrej</code>) is bound to the TRE CORE vnet</li> <li>The (import) approved storage account (<code>stalimapp</code>) is bound to the workspace vnet</li> </ul> <p></p> <p>In the TRE Core, the TRE API will provide the airlock API endpoints allowing to advance the process. The TRE API will expose the following methods:</p> Method Endpoint Description <code>POST</code> <code>/api/workspaces/{workspace_id}/requests</code> Create an Airlock request (in Draft) <code>POST</code> <code>/api/workspaces/{workspace_id}/requests/{airlock_request_id}/link</code> Get the url and token to access an Airlock Request <code>POST</code> <code>/api/workspaces/{workspace_id}/requests/{airlock_request_id}/review</code> Reviews an Airlock request <code>POST</code> <code>/api/workspaces/{workspace_id}/requests/{airlock_request_id}/cancel</code> Cancels an Airlock request <p>Also in the airlock feature there is the Airlock Processor which handles the events that are created throughout the process, signalling state changes from blobs created, status changed or security scans finalized.</p>"},{"location":"azure-tre-overview/airlock/#airlock-flow","title":"Airlock flow","text":"<p>The following sequence diagram detailing the Airlock feature and its event driven behaviour:</p> <p></p>"},{"location":"azure-tre-overview/architecture/","title":"Azure TRE Architecture","text":"<p>The Azure Trusted Research Environment (TRE) consists of multiple components, all encapsulated in networks with restricted ingress- &amp; egress traffic.</p> <p>There is one network for the core components and one network per Workspace.</p> <p>All traffic has to be explicitly allowed by the Application Gateway or the Firewall.</p> <p></p> <p>The Azure resources outside the network boundries of the Azure TRE are Microsoft Entra ID, Microsoft Graph and TRE Management. TRE Management are resources used during deployment.</p> <p>The Azure TRE core plane consists of two groups of components:</p> <ul> <li>API &amp; Composition Service</li> <li>Shared Services</li> </ul> <p>The TRE API is a service that users can interact with to request changes to workspaces e.g., to create, update, delete workspaces and workspace services inside each workspace. The Composition Service is doing the actual work of mutating the state of each Workspace including the Workspace Services.</p> <p>Ingress/egress components governs all inbound and outbound traffic from the public Internet to and from Azure TRE including the Workspaces. The Firewall Service is managing the egress rules of the Firewall.</p> <p>Shared Services are services available to all Workspaces. Source Mirror can mirror source repositories such as GitHub, but only allowing read-access, hence data from a Workspace cannot be pushed to a source repository. Package Mirror is also a read-only front for developer/researcher application package services like NPM, PyPI, and NuGet and operating system application package services like apt-get and Windows Package Manager (winget).</p>"},{"location":"azure-tre-overview/architecture/#azure-resources","title":"Azure Resources","text":"<p>The following diagram shows the Azure components deployed as part of a typical TRE deployment. The exact configuration will vary depending on the specific deployment.</p> <p></p> <p>For a full breakdown of Azure Resources see Azure TRE Resources Breakdown</p>"},{"location":"azure-tre-overview/architecture/#composition-service","title":"Composition Service","text":"<p>The Composition Service is responsible for managing and mutating Workspaces and Workspace Services. It consists of multiple components:</p> Component Name Responsibility / Description TRE API An API responsible for performing all operations on Workspaces and managing Workspace Templates. Configuration Store Keeping the state of Workspaces and Workspace Templates. The store uses Cosmos DB (SQL). Service Bus Azure Service Bus responsible for reliable delivery of messages between components. Resource Processor Responsible for starting the process of mutating a Workspace via a Workspace Template. <p>A Workspace is an instance of a Workspace Template. A Workspace Template is implemented as a Porter bundle - read more about Authoring workspaces templates.</p> <p>A Porter bundle is a fully encapsulated versioned bundle with everything needed (binaries, scripts, IaC templates etc.) to provision an instance of Workspace Template.</p> <p>To automate Porter it needs a place to live in Azure TRE. The home chosen for Porter to run was a Linux virtual machine. This Azure TRE component encompassing Porter and its dependencies is called Resource Processor.</p> <p></p> <p>During the deployment of Resource Processor itself it is given the credentials of a managed identity with the privileges to modify and deploy resources to the subscription associated with the Azure TRE instance. Resource Processor then uses these credentials to receive and send Service Bus messages, authorizes Porter to access its state (stored in Cosmos-MongoDB) and deploy bundles.</p> <p>The logic in Resource Processor is written in Python. The Resource Processor implementation is located in <code>resource_processor</code> folder of the repository.</p> <p>The TRE Administrator can register a Porter bundle that will be used to provision instances of bundle (template).</p> <p>This requires:</p> <ol> <li>The Porter bundle to be pushed to the Azure Container Registry (ACR).</li> <li>Registering the Template through the API.</li> </ol> <p>Details on how to register a Template.</p>"},{"location":"azure-tre-overview/architecture/#provisioning-a-workspace","title":"Provisioning a Workspace","text":"<p>The flow to provision a Workspace is as follows (the flow is the same for all kinds of mutations to a Workspace):</p> <ol> <li>TRE Admin sends an HTTP request to the TRE API to create a new Workspace. The request contains information like the name of the Workspace, the Workspace Template to use, and the parameters required for the Workspace Template (Workspace Templates can expose the parameters via a JSON Schema ).</li> <li>The API saves the desired state of the Workspace in the Configuration Store.</li> <li> <p>The API sends a command message with the Workspace Template reference and parameters to the <code>workspacequeue</code>.</p> <pre><code>{\n        \"action\": \"install\",\n        \"id\": \"base\",\n        \"name\": \"BaseWorkspaceTemplate\",\n        \"version\": \"1.0\",\n        \"parameters\": {\n            \"param1\": \"value1\"\n        }\n    }\n</code></pre> </li> <li> <p>The Resource Processor picks up the new message from the service bus queue.</p> </li> <li> <p>The Resource Processor processes the command by executing the Porter bundle (the implementation of a Workspace Template).</p> <pre><code># simplified for readability\nporter &lt;action&gt; --reference &lt;ACR name&gt;.azurecr.io/bundles/&lt;name&gt;:&lt;version&gt; --params key=value --cred &lt;credentials set name&gt;\n\n# Example\nporter install --reference msfttreacr.azurecr.io/bundles/BaseWorkspaceTemplate:1.0 --params param1=value1 --cred arm_auth\n</code></pre> <p>Deployments are carried out against the Azure Subscription using a User Assigned Managed Identity. The <code>arm_auth_local_debugging.json</code> tells Porter where the credential information can be found and for the Resource Processor they are set as environment variables.</p> <p>Porter bundle actions are required to be idempotent, so if a deployment fails, the Resource Processor can retry.</p> </li> <li> <p>The Porter Docker bundle is pulled from the Azure Container Registry (ACR) and executed.</p> </li> <li>The Porter bundle executes against Azure Resource Manager to provision Azure resources. Any kind of infrastructure of code frameworks like ARM, Terraform, or Pulumi can be used or scripted via PowerShell or Azure CLI.</li> <li>Porter stores state (like outputs) in Cosmos-MongoDB.</li> <li>The Resource Processor sends events to the <code>deploymentstatus</code> queue on status changes and informs if the deployment succeeded or failed.</li> <li>The API receives the status of the Porter bundle execution.</li> <li>The API updates the status of the Porter bundle execution in the Configuration Store.</li> </ol>"},{"location":"azure-tre-overview/case-studies/","title":"Case Studies","text":""},{"location":"azure-tre-overview/case-studies/#cloudkubed-and-imperial-college-london","title":"CloudKubed and Imperial College London","text":"<p>Imperial College London partnered with CloudKubed to address the increasing demands for scalable and centralised research solutions. The challenge was to enhance project visibility, streamline end-to-end research, and improve the management of research projects. CloudKubed implemented a cloud-based Azure Trusted Research Environment (TRE) aligned with Imperial\u2019s strategy and needs. This TRE integrated approval processes and provided a secure, compliant environment for research. The outcome allowed Imperial to efficiently provision workspaces, facilitate access to research tools, and streamline the entire research process. The partnership significantly improved the efficiency of research operations and compliance with data security measures.</p> <p>Click here to see the full case study.</p>"},{"location":"azure-tre-overview/case-studies/#building-the-trusted-research-environment-with-azure-databricks","title":"Building the Trusted Research Environment with Azure Databricks","text":"<p>The importance of secure and scalable data environments in healthcare research has grown, particularly highlighted by the COVID-19 pandemic. The Trusted Research Environments (TREs) enable secure collaboration on sensitive data while maintaining patient privacy. Azure Databricks enhances TREs by offering scalable, secure, and flexible data processing capabilities. The integration of Azure Databricks into the Azure TRE blueprint allows researchers to perform complex data analysis securely, promoting innovative research and improved healthcare outcomes.</p> <p>Click here to see the full case study.</p>"},{"location":"azure-tre-overview/case-studies/#data-saves-lives-lessons-to-enable-healthcare-research-by-pa-consulting","title":"Data Saves Lives: Lessons to Enable Healthcare Research by PA Consulting","text":"<p>The UK Government's investment in secure data environments (SDEs) aims to make health data more accessible for research, enhancing patient outcomes and accelerating life sciences research. Key lessons from implementing SDEs include leveraging cloud technologies for scalability, publicising access and pricing to facilitate research, and improving communication to drive public consent. Establishing clear data roles and shared services, building trust through transparency, and starting small to scale effectively are critical for success. These steps ensure that health data can be used ethically and efficiently, transforming care and services in the UK.</p> <p>Click here to see the full case study.</p>"},{"location":"azure-tre-overview/compliance-info/","title":"Compliance Information","text":"<p>Info</p> <p>Coming soon</p> <p>We're working to improve our documentation, and fill in some gaps. Unfortunately, this particular page is one of the gaps we're looking to fill and isn't yet available.</p>"},{"location":"azure-tre-overview/compliance-info/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"azure-tre-overview/cost-reporting/","title":"Cost Reporting","text":"<p>The exact running costs will depend on the number of workspaces you have deployed, the workspace services you have enabled within them and the Azure Data center region. TRE users can use the Azure TRE cost API to get a report of the running costs of TRE resources according to their role.</p> <p>TRE provides a set of cost APIs which generates costs reports by custom timeframe, and level of details according to user's role.</p> <p>Cost APIs are based on\u00a0Azure Cost Management\u00a0and\u00a0TRE Templates azure resource tagging, Azure resources must be tagged when authoring new template.</p>"},{"location":"azure-tre-overview/cost-reporting/#cost-apis","title":"Cost APIs","text":"Method Endpoint Description Allowed Roles Level of details GET /api/costs Get overall costs of a TRE Instance TRE Admin Core services, Shared services, workspaces GET /api/workspace/{workspace_id}/costs Get workspace costs TRE Admin, Workspace Owner Workspace, workspace services, user resources"},{"location":"azure-tre-overview/cost-reporting/#get-overall-cost-report","title":"Get overall cost report","text":"<p>Description</p> <p>Get overall cost report for TRE instance (core services), per shared services and per workspace</p> <p>Authorization</p> <p>Only TRE Admin can call this url, others will get unauthorized</p> <p>Endpoint</p> <p>GET /api/costs</p> <p>Query Parameters</p> Parameter name Type Description Default Value from, to datetime Custom time period, up to 1 year timeframe, iso-8601 format Month to date period granularity Enum (Daily, None) The granularity of rows in the query. None <p>Output</p> <pre><code>{\n    \"coreServices\": [\n        {\"date\":\"\", \"cost\":\"\", \"currency\":\"\"} \n        ],\n    \"sharedServices\": [ {\n        \"id\":\"shared service id\",\n        \"name\":\"shared service name\",\n        \"costs\": [\n            {\"date\":\"\", \"cost\":\"\", \"currency\":\"\"} \n            ]\n        }],\n    \"workspaces\": [ {\n        \"id\": \"workspace id\",\n        \"name\": \"workspace name\", \n        \"costs\":[\n            {\"date\":\"\", \"cost\":\"\", \"currency\":\"\"} \n            ]}\n        ]\n}\n</code></pre>"},{"location":"azure-tre-overview/cost-reporting/#get-workspace-cost-report","title":"Get workspace cost report","text":"<p>Description</p> <p>Get overall cost report for a specific workspace</p> <p>Authorization</p> <p>Only TRE Admin and the workspace owner can call this url, others will get unauthorized</p> <p>Input</p> <p>GET /api/workspaces/{workspace_id}/costs</p> <p>Query Parameters</p> Parameter name Type Description Default Value from, to datetime Custom time period, up to 1 year timeframe, iso-8601 format Month to date period granularity Enum (Daily, None) The granularity of rows in the query. None workspace_id Guid The workspace id to generate report for Required field for workspace and user resource level apis <p>Output <pre><code>{\n      \"id\": \"workspace id\",\n      \"name\": \"workspace name\", \n      \"workspaceServices\":[{\n        \"id\": \"workspace service id\",\n        \"name\": \"workspace service name\", \n          \"costs\":[{\"date\":\"\", \"cost\":\"\", \"currency\":\"\"}], \n          \"userResources\":[{\n            \"id\": \"user resource id\",\n            \"name\": \"user resource name\", \n            \"costs\":[{\"date\":\"\", \"cost\":\"\", \"currency\":\"\"}], \n          }]\n        }]\n}\n</code></pre></p>"},{"location":"azure-tre-overview/cost-reporting/#sequence-diagram","title":"Sequence Diagram","text":"<p>source</p> <p></p>"},{"location":"azure-tre-overview/cost-reporting/#limitations-and-notes","title":"Limitations and notes","text":"<ul> <li>Cost and usage data is typically available in Cost Management within 8-24 hours.</li> </ul> <ul> <li>Tags aren't applied to historical data, template authors need to make sure all relevant Azure resources of a TRE resource are tagged as instructed.</li> </ul> <ul> <li>Cost records might include multiple currencies for the same date and TRE resource.</li> </ul> <ul> <li>Once cost data becomes available in Cost Management, it will be retained for at least seven years. Only the last 13 months is available from the TRE Cost API and Azure Portal. For historical data before 13 months, please use Exports or the UsageDetails API.</li> </ul> <ul> <li>There are several Azure Offers that currently are not supported yet, Azure Offers are types of Azure subscriptions, for full list of supported and unspported Azure Offers please refer to Supported Microsoft Azure offers, Azure TRE will not display costs for unsupported Azure subscriptions.</li> </ul> <ul> <li>For more information please refer to Understand Cost Management data and Cost API swagger docs.</li> </ul>"},{"location":"azure-tre-overview/cost-reporting/#azure-resources-tagging","title":"Azure Resources Tagging","text":"<p>TRE Cost Reporting is based on Azure tagging to be able to generate cost report for core services, shared services, workspace, workspace services and user resources. Templates authors need to make sure that underling Azure resources are tagged with the following tags:</p> Tag Value Applies to <code>tre_id</code> Unique ID of the TRE instance All resources of a TRE instance <code>tre_core_service_id</code> Unique ID of the TRE instance All TRE core azure resources <code>shared_service_id</code> The shared service unique ID Shared Services <code>workspace_id</code> The workspace unique ID Workspaces, Workspace Services and User Resources <code>workspace_service_id</code> The workspace service unique ID Workspace Services and User Resources <code>user_resource_id</code> The user resoruce unique ID User Resources <p>Notes</p> <ul> <li>Main Azure Container Registry and Storage Account are not be tagged as those resources are used to spin up more than one Azure TRE Instance.</li> <li>There are some cases in which azure resources cannot get tagged by template author due to different reasons, for example services get deployed outside of TRE (Example being Cyclecloud or Cromwell on Azure), or services which doesn't support tagging for cost management (for example Azure ML compute). for the full list of tag support of Azure see this article.</li> </ul> <p></p>"},{"location":"azure-tre-overview/cost-reporting/#tre-cost-api-logic","title":"TRE Cost API Logic","text":"<p>Cost management query API, which Azure TRE Cost APIs are based upon, returns a flat result of all cost with every tag combination which exists on the filtered resources by the provided tag, meaning that a resource which has tre_id, tre_core_service_id, tre_workspace_id, tre_workspace_service_id, and tre_user_resource_id will get be summarized by all those tags. if filtered resources have more tags, those tags will appear in the result.</p> <p>To rollup untagged resources into workspace costs Azure TRE cost API first calls Azure Resource Manager to get all resource group names which are tagged with the workspace_id and passes those names into Azure Cost Management Query API as a filter and group by resource group along with the tag name. untagged costs results will apear in with an empty tag name and get aggregated using the resource group and relevent the workspace id.</p> <p>Azure TRE Cost API joins this response with the hierarchical structure of the requested report.</p> <p>Cost management query API Request example</p> <pre><code>@SUBSCRIPTION = FILL_YOUR_SUBSCRIPTION_ID\n@COST_API_URI = https://management.azure.com/subscriptions/{{SUBSCRIPTION}}/providers/Microsoft.CostManagement\n@COST_API_VERSION = 2021-10-01\n@TRE_ID = mytre\n@TIME_FROM = MM/DD/YYYY\n@TIME_TO = MM/DD/YYYY\n\nPOST {{COST_API_URI}}/query?api-version={{COST_API_VERSION}}&amp;$expand=properties/data\nAuthorization: {{$aadToken $aadV2TenantId}}\nContent-Type: application/json\n</code></pre> <p>Payload <pre><code>{\n    \"type\": \"ActualCost\",\n    \"timeframe\": \"Custom\", // can be also BillingMonthToDate|MonthToDate|TheLastBillingMonth|TheLastMonth|WeekToDate according to input\n    \"timePeriod\": {\n        \"from\": \"{{TIME_FROM}}\",\n        \"to\": \"{{TIME_TO}}\"\n    },\n    \"dataset\": {\n        \"granularity\": \"None\", // can be also \"Daily\" for total costs\n        \"aggregation\": {\n            \"totalCost\": {\n                \"name\": \"PreTaxCost\", // can be also 'UsageQuantity','Cost','CostUSD','PreTaxCostUSD' (up to two aggregations)\n                \"function\": \"Sum\"\n            }\n        },\n       \"filter\": {\n            \"or\": [\n                {\n                    \"dimensions\": {\n                        \"name\": \"ResourceGroup\",\n                        \"operator\": \"In\",\n                        \"values\": [\"{{RG_NAME}}\"]\n                }\n                },\n                {\n                    \"tags\": {\n                        \"name\": \"{{TAG_KEY}}\",\n                        \"operator\": \"In\",\n                        \"values\" : [\n                            \"{{TAG_VALUE}}\",\n                            ]\n                    }\n                }\n            ]\n        },\n        \"grouping\": [\n            {\n                \"type\": \"Dimension\",\n                \"name\": \"ResourceGroup\"\n            },\n            {\n                \"type\": \"Tag\",\n            }\n        ]\n    }\n}\n</code></pre></p> <p>Response</p> <pre><code>{\n  \"id\": \"subscriptions/xxxxxxxxxxxxx/providers/Microsoft.CostManagement/query/ec1f0eae-9343-4f4e-a0c0-dd219a66efc4\",\n  \"name\": \"ec1f0eae-9343-4f4e-a0c0-dd219a66efc4\",\n  \"type\": \"Microsoft.CostManagement/query\",\n  \"location\": null,\n  \"sku\": null,\n  \"eTag\": null,\n  \"properties\": {\n    \"nextLink\": null,\n    \"columns\": [\n      {\n        \"name\": \"PreTaxCost\",\n        \"type\": \"Number\"\n      },\n      {\n        \"name\": \"ResourceGroup\",\n        \"type\": \"String\"\n      },\n      {\n        \"name\": \"Tag\",\n        \"type\": \"String\"\n      },\n      {\n        \"name\": \"Currency\",\n        \"type\": \"String\"\n      }\n    ],\n     \"rows\": [\n      [\n        0.00055748658857886549,\n        \"rg-mytre\",\n        \"\",\n        \"USD\"\n      ],\n      [\n        3.9306515711531222,\n        \"rg-mytre\",\n        \"\\\"tre_core_service\\\":\\\"mytre\\\"\",\n        \"USD\"\n      ],\n      [\n        11.66335497490112,\n        \"rg-mytre\",\n        \"\\\"tre_id\\\":\\\"mytre\\\"\",\n        \"USD\"\n      ],\n      [\n        0.033,\n        \"rg-mytre\",\n        \"\\\"tre_shared_service\\\":\\\"2fea\\\"\",\n        \"USD\"\n      ],\n      [\n        3.62175702964083,\n        \"rg-mytre\",\n        \"\\\"tre_shared_service\\\":\\\"4a5b\\\"\",\n        \"USD\"\n      ],\n      [\n        0.093523886643774659,\n        \"rg-mytre-ws-5e86\",\n        \"\\\"tre_user_resource_id\\\":\\\"126d\\\"\",\n        \"USD\"\n      ],\n      [\n        0.078465743393993009,\n        \"rg-mytre-ws-5e86\",\n        \"\\\"tre_user_resource_id\\\":\\\"2627\\\"\",\n        \"USD\"\n      ],\n      [\n        0.20275980676694544,\n        \"rg-mytre-ws-5e86\",\n        \"\\\"tre_user_resource_id\\\":\\\"319e\\\"\",\n        \"USD\"\n      ],\n      [\n        0.17165788614506686,\n        \"rg-mytre-ws-af30\",\n        \"\\\"tre_user_resource_id\\\":\\\"3370\\\"\",\n        \"USD\"\n      ],\n      [\n        0.17518017912599823,\n        \"rg-mytre-ws-af30\",\n        \"\\\"tre_user_resource_id\\\":\\\"b2be\\\"\",\n        \"USD\"\n      ],\n      [\n        0.00015748658857886549,\n        \"rg-mytre-ws-5e86\",\n        \"\",\n        \"USD\"\n      ],\n      [\n        0.39905729127776768,\n        \"rg-mytre-ws-5e86\",\n        \"\\\"tre_workspace_id\\\":\\\"5e86\\\"\",\n        \"USD\"\n      ],\n      [\n        0.98272254462049369,\n        \"rg-mytre-ws-af30\",\n        \"\\\"tre_workspace_id\\\":\\\"af30\\\"\",\n        \"USD\"\n      ],\n      [\n        0.17198963003776765,\n        \"rg-mytre-ws-5e86\",\n        \"\\\"tre_workspace_service\\\":\\\"8d0a\\\"\",\n        \"USD\"\n      ],\n      [\n        0.54959787203801058,\n        \"rg-mytre-ws-af30\",\n        \"\\\"tre_workspace_service\\\":\\\"e70d\\\"\",\n        \"USD\"\n      ]\n    ]\n  }\n}\n</code></pre>"},{"location":"azure-tre-overview/networking/","title":"Network Architecture","text":"<p>The Trusted Research Environment (TRE) network topology is based on hub-spoke. The TRE Core VNET (Azure Virtual Network) is the central hub and each workspace is a spoke.</p> <p></p> <p>Azure TRE VNETs are segregated allowing limited traffic between the TRE Core VNET and Workspace VNETs. The security rules are managed by <code>nsg-ws</code> network security group. See workspace network security groups (NSG) further down.</p> <p>The Core VNET is further divided into subnets.</p> Subnet Description <code>AzureBastionSubnet</code> A dedicated subnet for Azure Bastion hosts. <code>AppGwSubnet</code> Subnet for Azure Application Gateway controlling ingress traffic. <code>AzureFirewallSubnet</code> Subnet for Azure Firewall controlling egress traffic. <code>ResourceProcessorSubnet</code> Subnet for VMSS used by the Composition Service to host Docker containers to execute Porter bundles that deploys Workspaces. <code>WebAppSubnet</code> Subnet for TRE API. <code>SharedSubnet</code> Shared Services subnet for all things shared by TRE Core and Workspaces. Such as Source Mirror Shared Service and Package Mirror Shared Service. <p>All subnets (Core and Workspace subnets) have a default route which directs egress traffic to the Azure Firewall to ensure only explicitly allowed destinations on the Internet to be accessed.</p> <p>There are a couple of exceptions:</p> <ul> <li><code>AzureFirewallSubnet</code> as it hosts the Azure Firewall which routes traffic to the Internet.</li> <li><code>AzureBastionSubnet</code> as it hosts Azure Bastion which is the management jump box within the VNET with Internet access.</li> <li><code>AppGwSubnet</code> as it hosts the Azure Application Gateway which has to be able to a ping the health endpoints e.g. TRE API.</li> </ul>"},{"location":"azure-tre-overview/networking/#ingress-and-egress","title":"Ingress and egress","text":"<p>Ingress traffic from the Internet is only allowed through the Application Gateway, which forwards HTTPS (port 443) call to the TRE API in the <code>WebAppSubnet</code>.</p> <p>Egress traffic is routed through the Azure Firewall with a few exceptions and by default all ingress and egress traffic is denied except explicitly allowed.</p> <p>The explicitly allowed egress traffic is described here:</p> <ul> <li>Resource Processor</li> <li>TRE API</li> <li>Gitea Shared Service</li> <li>Nexus Shared Service</li> </ul>"},{"location":"azure-tre-overview/networking/#azure-monitor","title":"Azure Monitor","text":"<p>Azure Monitor resources are secured using Azure Monitor Private Link Scope (AMPLS) keeping all traffic inside the Microsoft Azure backbone network. The Azure Monitor resources and their network configuration is defined in <code>/core/terraform/azure-monitor</code> folder and the required private DNS zones in file <code>/core/terraform/network/dns_zones.tf</code>.</p>"},{"location":"azure-tre-overview/networking/#network-security-groups","title":"Network security groups","text":""},{"location":"azure-tre-overview/networking/#tre-core","title":"TRE Core","text":"<p>Network security groups (NSG), and their security rules for TRE core resources are defined in <code>/core/terraform/network/network_security_groups.tf</code>.</p> Network security group Associated subnet(s) <code>nsg-bastion-subnet</code> <code>AzureBastionSubnet</code> <code>nsg-app-gw</code> <code>AppGwSubnet</code> <code>nsg-default-rules</code> <code>ResourceProcessorSubnet</code>, <code>SharedSubnet</code>, <code>WebAppSubnet</code>"},{"location":"azure-tre-overview/networking/#workspaces","title":"Workspaces","text":"<p>Azure TRE VNETs are segregated allowing limited traffic between the TRE Core VNET and Workspace VNETs. The rules to manage and limit the traffic between the TRE Core VNET and Workspace VNETs are defined by the <code>nsg-ws</code> network security group:</p> <ul> <li>Inbound traffic from TRE Core VNET to workspace allowed for Azure Bastion (22, 3389) - All other inbound traffic from Core to workspace denied.</li> <li>Outbound traffic to <code>SharedSubnet</code> from Workspace allowed.</li> <li>Outbound traffic to Internet allowed on HTTPS port 443 (next hop Azure Firewall).</li> <li>All other outbound traffic denied.</li> </ul> <p>Each of these rules can be managed per workspace.</p> <p>Caution</p> <p>In Azure, traffic between subnets are allowed except explicitly denied.</p>"},{"location":"azure-tre-overview/tre-resources-breakdown/","title":"Azure TRE Resource Breakdown","text":"<p>The Azure services deployed within an Azure TRE are described below.</p> <p>Once an Azure TRE has been provisioned in an Azure Subscription, you will have two Resource Groups:</p> <ol> <li>Azure TRE Management Resource Group - Prerequisite for deploying an Azure TRE instance</li> <li>Azure TRE Resource Group - Core Azure TRE instance</li> </ol>"},{"location":"azure-tre-overview/tre-resources-breakdown/#azure-tre-management-resource-group","title":"Azure TRE Management Resource Group","text":"Name Azure Service Description Additional links {MGMT_STORAGE_ACCOUNT_NAME} Storage Account Azure TRE Terraform Storage Blobs {ACR_NAME} Container Registry Azure TRE container images (Porter bundles) Container Registry"},{"location":"azure-tre-overview/tre-resources-breakdown/#azure-tre-resource-group","title":"Azure TRE Resource Group","text":"Name Azure Service Description Additional links api-{TRE_ID} App Service Azure TRE Python API responsible for all operations on Workspaces and managing Workspace Templates built using the FastAPI framework FastAPI gitea-{TRE_ID} App Service Azure TRE Source Mirror - allows mirroring git repositories Gitea nexus-{TRE_ID} App Service Azure TRE Package Mirror - allows mirroring packages Sonatype Nexus plan-{TRE_ID} App Service Plan Compute resources in which the TRE app services run App Hosting plans agw-{TRE_ID} Azure Application Gateway Azure TRE App Gateway provides a single public IP address with SSL for accessing core TRE resources Azure Application Gateway appi-{TRE_ID} Application Insights Telemetry for all API invocations Application Insights cosmos-{TRE_ID} Azure Cosmos DB Account NoSQL state store of TRE resources, templates and operations Cosmos DB mysql-{TRE_ID} Azure Database for MySQL server SQL state store for Gitea Gitea Database ampls-{TRE_ID} Azure Monitor Private Link Scope Provides secure link between PaaS resources and the TRE vnet using private endpoints Azure Monitor Private Link Scope bas-{TRE_ID} Azure Bastion Provides secure access for RDP/SSH to TRE VM (jumpbox) Azure Bastion vm-dsk-{TRE_ID} Disk Managed storage disk for TRE VM (jumpbox) Managed Disks fw-dsk-{TRE_ID} Azure Firewall Azure TRE Firewall restricts external outbound traffic from all TRE resources Azure Firewall kv-{TRE_ID} Azure Key Vault Management of TRE secrets &amp; certificates Azure Key Vault log-{TRE_ID} Log Analytics Workspace Azure Monitor Logs store for all TRE resources Log Analytics id-agw-{TRE_ID} Managed Identity User-managed identity for TRE Application Gateway Managed Identities id-api-{TRE_ID} Managed Identity User-managed identity for TRE API App Service Managed Identities id-gitea-{TRE_ID} Managed Identity User-managed identity for TRE Gitea App Service Managed Identities id-vmss-{TRE_ID} Managed Identity User-managed identity for TRE Resource Processer (VMSS) Managed Identities sb-{TRE_ID} Service Bus Namespace Messaging for TRE API Service Bus stappinsights{TRE_ID} Storage Account Storage for TRE Application Insights telemetry logs Storage Blobs stg{TRE_ID} Storage Account Files shares for TRE services such as Gitea, Nexus Storage Files stweb{TRE_ID} Storage Account Storage for Azure TRE Let's Encrypt Storage Blob vm-{TRE_ID} Virtual Machine Azure TRE VM (jumpbox) Windows Virtual Machine vm-{TRE_ID} Virtual Machine Scale Set Azure TRE Resource Processor Virtual Machine Scale Sets vnet-{TRE_ID} Virtual Network Azure TRE VNET central hub Virtual Networks rt-{TRE_ID} Route Table Azure TRE route table Route Tables <p>Note</p> <p>Network resources such as Network Interfaces, Network Security Groups, Private Endpoints, Private DNS zones and Public IP addresses are not listed above.</p>"},{"location":"azure-tre-overview/tre-resources-breakdown/#azure-tre-workspace-resource-group","title":"Azure TRE Workspace Resource Group","text":"<p>A TRE Workspace will be provisioned in a separate Resource Group along with its own resources.  An example TRE Workspace is shown and described here.</p> <p></p> Name Azure Service Description Additional links guacamole-{TRE_ID}-ws-XXXX-svc-XXXX App Service RDP for accessing workspace VMs Apache Guacamole kv-{TRE_ID}-ws-XXXX Azure Key Vault Management of TRE workspace secrets &amp; certificates Azure Key Vault osdisk-windowsvm8f45 Disk Azure VM storage disk Managed Disks plan-09d0ba4f-f79f-4047-aa2c-03fc9df7b318 App Service plan Compute resources in which the workspace app services (Gitea) run App Hosting Plans stgwsb318 Storage account Workspace Storage account Storage Blobs vnet-{TRE_ID}-ws-XXXX Virtual Network Azure TRE VNET spoke Virtual Networks windowsvm8f45 Virtual Machine Windows VM instance for research Windows Virtual Machine <p>Note</p> <p>Network resources such as Network Interfaces, Network Security Groups and Private Endpoints are not listed above.</p>"},{"location":"azure-tre-overview/user-roles/","title":"User roles","text":"<p>The Azure TRE solution has 8 different user roles defined. The roles are modeled around a set of tasks for each role. The roles are not mutually exclusive, and one person can have multiple roles assigned to be able to carry out a broader set of tasks.</p> <p>Before you deploy a Trusted Research Environment based on the Azure TRE solution, you should consider your scenario and have an understanding of which of these roles that needs to be staffed.</p>"},{"location":"azure-tre-overview/user-roles/#role-overview","title":"Role overview","text":"<p>While we have defined 8 different user roles for the Azure TRE solution, not all of them are required in all scenarios. Three of the roles support role-based access control (RBAC) within the TRE.  </p> Role Key task TRE RBAC Azure administrator Deploy the TRE TRE administrator Administer the TRE \u2714 TRE workspace owner Own a workspace \u2714 Researcher Perform research on the data \u2714 Airlock Manager Approves data import &amp; export \u2714 TRE service integrator Integrate additional workspace services Azure TRE developer Extend the TRE OSS solution Data engineer Move data to and potentially from the TRE Information security officer Validate and sign-off TRE deployment <p>Info</p> <p>More granular RBAC information is available here.</p>"},{"location":"azure-tre-overview/user-roles/#azure-administrator","title":"Azure administrator","text":"<p>Provisions the Azure TRE solution in an Azure subscription and performs tasks that require knowledge of Azure operations and has access to the Azure subscription.</p> <p>Example tasks:</p> <ul> <li>Provision Azure TRE solution instances.</li> <li>Second line support for TRE administrators, TRE workspace owners and Researchers when Azure TRE troubleshooting is required.</li> <li>Work with the data engineer to connect the Azure TRE with the data platform.</li> <li>Troubleshoot provisioning issues and failed deployments.</li> <li>Manage TRE administrator users.</li> <li>Manage data backups and restores.</li> <li>Update the Azure TRE instances.</li> <li>Configure log and metrics alerts.</li> </ul> <p>Expected skills:</p> <ul> <li>Azure administration and operations.</li> <li>Infrastructure as Code (Terraform, ARM, Git)</li> <li>PowerShell, Bash</li> </ul>"},{"location":"azure-tre-overview/user-roles/#tre-administrator","title":"TRE administrator","text":"<p>Day-to-day running and operations of the Azure TRE instance without touching Azure resources.</p> <p>Example tasks:</p> <ul> <li>Manage workspace owner users.</li> <li>Provision workspaces.</li> <li>Manage shared services e.g., available packages in package mirror shared service.</li> <li>Monitor workspace usage and billing.</li> <li>Set and manage quotas.</li> <li>Create and manage workspaces</li> </ul> <p>Expected skills:</p> <ul> <li>Limited or no Azure knowledge expected.</li> </ul>"},{"location":"azure-tre-overview/user-roles/#tre-workspace-owner","title":"TRE workspace owner","text":"<p>Owns a specific workspace and has additional privileges than the researcher within the workspace. Is most likely also a Researcher.</p> <p>Example tasks:</p> <ul> <li>Manage Researcher users.</li> <li>Export data from workspace.</li> <li>Import data and make it available within the workspace.</li> <li>Enable services within the workspace.</li> <li>Monitor billing and usage of the workspace.</li> <li>Create and manage workspace services</li> </ul> <p>Expected skills:</p> <ul> <li>Limited or no Azure knowledge expected.</li> </ul>"},{"location":"azure-tre-overview/user-roles/#researcher","title":"Researcher","text":"<p>Has access to one specific workspace and can use all the services provisioned within that workspace.</p> <p>Example tasks:</p> <ul> <li>Import software packages needed to conduct research (PyPi, Conda, Apt).</li> <li>Perform research using the services in the workspace.</li> <li>Create and manage user resources</li> </ul> <p>Expected skills:</p> <ul> <li>Python, R</li> <li>Git</li> <li>Linux</li> </ul>"},{"location":"azure-tre-overview/user-roles/#airlock-manager","title":"Airlock Manager","text":"<p>Approves (and reviews in some instances) the data that is being imported to and exported from a TRE Workspace</p> <p>Example tasks:</p> <ul> <li>Approve Airlock import requests</li> <li>Approve Airlock export requests</li> <li>Review the data being imported to and exported from a TRE Workspace</li> </ul>"},{"location":"azure-tre-overview/user-roles/#tre-service-integrator","title":"TRE service integrator","text":"<p>Integrates workspace service types with an Azure TRE instance. This involves extending the Azure Infrastructure as Code templates to make a workspace service available within an Azure TRE instance.</p> <p>Example tasks:</p> <ul> <li>Integrate a workspace service type with your Azure TRE instance.</li> <li>Implement Infrastructure as Code templates for new workspace service types.</li> </ul> <p>Expected skills:</p> <ul> <li>Infrastructure as Code (Terraform, ARM, Git)</li> <li>Python, Bash</li> <li>Azure administration</li> </ul>"},{"location":"azure-tre-overview/user-roles/#azure-tre-developer","title":"Azure TRE developer","text":"<p>Software developer who contributes to the development of the Azure TRE solution.</p> <p>Example tasks:</p> <ul> <li>Modify the deployment service, API and other components of the Azure TRE solution.</li> <li>Contribute to the Azure TRE OSS solution.</li> </ul> <p>Expected skills:</p> <ul> <li>Python, Bash</li> <li>Infrastructure as Code (Terraform, ARM, Git</li> <li>Azure administration</li> </ul>"},{"location":"azure-tre-overview/user-roles/#data-engineer","title":"Data engineer","text":"<p>Supporting role that is expected to build data movement pipelines between the data platform (not part of the TRE), and the TRE instance.</p> <p>Example tasks:</p> <ul> <li>Transfer data from the data platform to the TRE and potentially back.</li> <li>Create data movement and transformation pipelines.</li> </ul> <p>Expected skills:</p> <ul> <li>Python, Bash, Linux</li> <li>Azure Data Factory, Other ETL tools.</li> </ul>"},{"location":"azure-tre-overview/user-roles/#information-security-officer","title":"Information Security Officer","text":"<p>Needs to understand the security posture of the TRE to ensure that the organization is compliant with the information governance framework and additional relevant regulations.</p> <p>Example tasks:</p> <ul> <li>Use the Azure TRE documentation to understand the security posture of the TRE.</li> <li>Work with Azure administrator and TRE administrator to enforce the required security and privacy controls on the TRE.</li> <li>Commission penetration testing.</li> <li>Work with organization Information Governance committee to validate and sign-off Azure TRE deployment</li> </ul>"},{"location":"tre-admins/auth/","title":"Introduction to Authentication and Authorization","text":"<p>Microsoft Entra ID is the backbone of Authentication and Authorization in the Trusted Research Environment. Microsoft Entra ID holds the identities of all the TRE/workspace users, including administrators, and connects the identities with applications which define the permissions for each user role.</p> <p>It is common that the Azure Administrator is not necessarily the Microsoft Entra ID Administrator. Due to this, this step may have to be carried out by a different individual/team. We have automated this into a simple command, but should you wish, you can run these steps manually.</p> <p>This page describes the automated Auth setup for TRE.</p>"},{"location":"tre-admins/auth/#pre-requisites","title":"Pre-requisites","text":"<p>The automation utilises a <code>make</code> command, which reads a few environment variables and creates the Microsoft Entra ID assets. The following values are needed to be in place before you run the creation process. (<code>/config.yaml</code>)</p> Key Description TRE_ID This is used to build up the name of the identities AAD_TENANT_ID The tenant id of where your Microsoft Entra ID identities will be placed. This can be different to the tenant where your Azure resources are created. LOCATION Where your Azure assets will be provisioned (eg. westeurope). This is used to add a redirect URI from the Swagger UI to the API Application. AUTO_WORKSPACE_APP_REGISTRATION Default of <code>false</code>. Setting this to true grants the <code>Application.ReadWrite.All</code> and <code>Directory.Read.All</code> permission to the Application Admin identity. This identity is used to manage other Microsoft Entra ID applications that it owns, e.g. Workspaces. If you do not set this, the identity will have <code>Application.ReadWrite.OwnedBy</code>. Further information can be found\u00a0here. AUTO_WORKSPACE_GROUP_CREATION Set to <code>false</code> by default. Setting this to <code>true</code> grants the <code>Group.ReadWrite.All</code> permission to the Application Admin identity. This identity can then create security groups aligned to each applciation role. Microsoft Entra ID licencing implications need to be considered as Group assignment is a premium feature. You can read mode about Group Assignment here. AUTO_GRANT_WORKSPACE_CONSENT Default of <code>false</code>.  Setting this to <code>true</code> will remove the need for users to manually grant consent when creating new workspaces. The identity will be granted <code>Application.ReadWrite.All</code> and <code>DelegatedPermissionGrant.ReadWrite.All</code> permissions."},{"location":"tre-admins/auth/#create-authentication-assets","title":"Create Authentication assets","text":"<p>You can build all of the Identity assets by running the following at the command line <pre><code>make auth\n</code></pre> This will create five identities, and if successful will write the outputs to athentication section in <code>config.yaml</code> file. If you are building locally, these values will be used when building your TRE. If you are setting this up for CI/CD, then these values will be needed by your Build Orchestrator.</p> <p>The contents of your authentication section in <code>config.yaml</code> file should contain :</p> Variable Description <code>APPLICATION_ADMIN_CLIENT_ID</code> This client will administer Microsoft Entra ID Applications for TRE <code>APPLICATION_ADMIN_CLIENT_SECRET</code> This client will administer Microsoft Entra ID Applications for TRE <code>TEST_ACCOUNT_CLIENT_ID</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>TEST_ACCOUNT_CLIENT_SECRET</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>API_CLIENT_ID</code> API application (client) ID. <code>API_CLIENT_SECRET</code> API application client secret. <code>SWAGGER_UI_CLIENT_ID</code> Swagger (OpenAPI) UI application (client) ID. <code>WORKSPACE_API_CLIENT_ID</code> Each workspace is secured behind it's own AD Application <code>WORKSPACE_API_CLIENT_SECRET</code> Each workspace is secured behind it's own AD Application. This is the secret for that application."},{"location":"tre-admins/auth/#using-a-separate-microsoft-entra-id-tenant","title":"Using a separate Microsoft Entra ID tenant","text":"<p>Caution</p> <p>This section is only relevant it you are setting up a separate Microsoft Entra ID tenant for use. This is only recommended for development environments when you don't have the required permissions to register applications in Microsoft Entra ID. Using a separate Microsoft Entra ID tenant will prevent you from using certain Microsoft Entra ID integrated services. For production deployments, work with your Microsoft Entra ID administrator to perform the required registration</p> <ol> <li> <p>Create an Microsoft Entra ID tenant     To create a new Microsoft Entra ID tenant, follow the steps here</p> </li> <li> <p>Follow the steps outlined above. <code>make auth</code> should logon to the correct tenant. Make sure you logon back to the correct tenant before running <code>make all</code>.</p> </li> </ol>"},{"location":"tre-admins/auth/#app-registrations","title":"App registrations","text":"<p>App registrations (represented by service principals) define the various access permissions to the TRE system. There are a total of five main Applications of interest.</p> Microsoft Entra ID Application Description TRE API application This is the main application and used to secure access to the TRE API. TRE UX This is the client application that will authenticate to the TRE/Workspace APIs. Application Admin There are times when workspace services need to update the Microsoft Entra ID Application. For example, Guacamole needs to add a redirect URI to the Workspace Microsoft Entra ID Application. This identity is used to manage Microsoft Entra ID Applications. Automation App This application is created so that you can run the tests or any CI/CD capability without the need to divulge a user password. This is particularly important if your tenant is MFA enabled. Workspace API Typically you would have an application securing one or more workspaces that are created by TRE. <p>Some of the applications require admin consent to allow them to validate users against the Microsoft Entra ID. Check the Microsoft Docs on Configure the admin consent workflow on how to request admin consent and handle admin consent requests.</p> <p>We strongly recommend that you use <code>make auth</code> to create the Microsoft Entra ID assets as this has been tested extensively. Should you wish to create these manually via the Azure Portal; more information can be found here.</p>"},{"location":"tre-admins/auth/#enabling-users","title":"Enabling users","text":"<p>For a user to gain access to the system, they have to:</p> <ol> <li>Have an identity in Microsoft Entra ID</li> <li>Be linked with an app registration and assigned a role</li> </ol> <p>When these requirements are met, the user can sign-in using their credentials and use their privileges to use the API, login to workspace environment etc. based on their specific roles.</p> <p></p> <p>The users can also be linked via the Enterprise application view:</p> <p></p>"},{"location":"tre-admins/configure-airlock-review/","title":"Configuring Airlock Review feature","text":"<p>The Airlock Review feature enables the setup of a process for manually reviewing Airlock requests. With this functionality, users assigned the Airlock Manager role\u2014who have the necessary privileges to review requests\u2014can quickly spin up a Virtual Machine. This VM is provisioned with the required access to the requested data, allowing the Airlock Manager to efficiently perform the review process in an isolated environment.</p> <p>For information on Airlock feature, please refer to the overview page.</p> <p>For documentation on how to review an Airlock request, please refer to the user guide.</p>"},{"location":"tre-admins/configure-airlock-review/#pre-requisites","title":"Pre-requisites","text":"<p>The feature is configured on a per Research Workspace basis. Different Research Workspaces need to be configured separately, although a single Airlock Import Workspace can be reused for all of them.</p> <p>To configure the feature, the following prerequisites need to be fulfilled:</p> <ol> <li>A deployed Research workspace. Note that if is a base workspace, the template of the workspace must be of version 0.5.0 or later and airlock must be enabled in it.</li> </ol> <p></p> <p>For import:</p> <ol> <li>Airlock Import Workspace A dedicated workspace used for import reviews. It needs to be deployed once per TRE. To make this template available in your TRE run the following make command: <pre><code>make workspace_bundle BUNDLE=airlock-import-review\n</code></pre></li> </ol> <p>Note: TRE Admin permissions are required to register the template Having the template in place. Deploy a new workspace using that template that will be used for Airlock import reviews.</p> <ol> <li> <p>Guacamole Workspace Service need to be deployed in Airlock Import Workspace from the previous step.</p> </li> <li> <p>Template for import review VM needs to be installed in the TRE, or a custom template if used. To add the existing review VM template to your TRE run the following make command: <pre><code>make user_resource_bundle WORKSPACE_SERVICE=guacamole BUNDLE=guacamole-azure-import-reviewvm\n</code></pre> Note: TRE Admin permissions are required to register the template</p> </li> </ol> <p>For export:</p> <ol> <li> <p>Guacamole Workspace Service need to be deployed in Research Workspace.</p> </li> <li> <p>Template for export review VM needs to be installed in the TRE, or a custom template if used. To add the existing review VM template to your TRE run the following make command: <code>make user_resource_bundle WORKSPACE_SERVICE=guacamole BUNDLE=guacamole-azure-export-reviewvm</code> Note: TRE Admin permissions are required to register the template</p> </li> </ol>"},{"location":"tre-admins/configure-airlock-review/#configuring-airlock-vm-for-research-workspace","title":"Configuring Airlock VM for Research Workspace","text":"<p>To allow the Airlock Import Review feature in your workspace navigate to Research Workspace in the UI, and click \"Update\". You will see a check box \"Configure Review VMs\".</p> <p></p> <p>You then will be able to input the values as follows:</p> <ol> <li>For <code>Import Review Workspace ID</code>, use the GUID of the Airlock Import Review workspace from Pre Requisites step 1.</li> <li>For <code>Import Review Workspace Service ID</code>, use the GUID of the Guacamole Workspace Service from step 2.</li> <li>For <code>Import Review VM User Resource Template Name</code>, unless you have built a custom template for this, you should use <code>tre-service-guacamole-import-reviewvm</code> which is the name of the standard template used for Import Reviews from step 3.</li> <li>For <code>Export Review Workspace Service ID</code>, use the GUID of the Guacamole Workspace Service deployed into the Research Workspace from step 4.</li> <li>For <code>Export Review Vm User Resource Template Name</code>, unless you have built a custom template for this, you should use <code>tre-service-guacamole-export-reviewvm</code> which is the name of the standard template used for Import Reviews from step 5.</li> </ol> <p>Once you're done, click Submit.</p> <p>Verify that the configuration is working by creating Review VMs for existing import export and export requests (configuration is not verified on update).</p> <p>For troubleshooting guidance please review the airlock troubleshooting FAQ</p>"},{"location":"tre-admins/configure-airlock-review/#example","title":"Example","text":"<p>I have a research workspace called Umbrella. It was created using a base workspace template (it can be any other template or custom template) and it was it was created without configuring any airlock review properties. For the sake of example lets say the workspace id is - <code>research-workspace-id</code></p> <p></p> <p>I have created a Guacamole workspace service inside the Umbrella workspace and called it Virtual Desktops. I will be using this Virtual Desktops service to spin up review VMs for export. For the sake of example lets say this workspace service id is - <code>research-workspace-guacamole-id</code></p> <p></p> <p>The next thing I did  is create an Airlock Import Review Workspace using Airlock Import Review Workspace template. For the sake of example lets say the workspace id is - <code>import-review-workspace-id</code></p> <p></p> <p>And inside of it I have created a Guacamole workspace service called Virtual Desktops. I will be using this Virtual Desktops service to spin up review VMs for import. For the sake of example lets say this workspace service id is - <code>import-review-workspace-guacamole-id</code></p> <p></p> <p>Now I basically have everything in place. I can configure now the review VM properties in my Research Workspace - Umbrella. I will click update on it -</p> <p></p> <p>And fill in the ids -</p> <p></p>"},{"location":"tre-admins/configure-firewall-force-tunneling/","title":"Forced Tunneling to External Firewall in TRE","text":"<p>Azure TRE deploys and manages an Azure firewall to ensure creation of workspace level rules can be automated when TRE workspaces and other services are created without manual intervention. It is highly recommended leaving the Azure TRE firewall in place. If there is still the requirement to send all traffic through a centralized enterprise firewall, such as that deployed as part of an Azure landing zone, then forced tunnelling should be used. The centralized firewall will need a superset of rules used by the TRE.</p> <p>To setup forced tunneling to an external firewall, follow these steps:</p>"},{"location":"tre-admins/configure-firewall-force-tunneling/#1-set-the-firewall_force_tunnel_ip-parameter-in-the-configyaml-file","title":"1. Set the firewall_force_tunnel_ip parameter in the config.yaml file","text":"<p>Provide the external firewall's IP address:</p> <p><pre><code>firewall_force_tunnel_ip: 192.168.0.4\n</code></pre> This automatically creates a route table to direct TRE\u2019s traffic to the specified IP.</p>"},{"location":"tre-admins/configure-firewall-force-tunneling/#2-manually-connect-tre-to-your-firewall","title":"2. Manually Connect TRE to Your Firewall","text":"<p>Configure connectivity between TRE\u2019s VNet and your external firewall using one of the following methods:</p> <ol> <li>VNet Peering: Peer the TRE VNet with your firewall\u2019s VNet.</li> <li>ExpressRoute: Use a private connection for firewalls located on-premises.</li> <li>Site-to-Site VPN: Establish a VPN connection as an alternative.</li> </ol>"},{"location":"tre-admins/custom-domain/","title":"Custom domain name","text":"<p>In order to use a custom domain name with the Azure TRE:</p> <ol> <li> <p>Register a domain name, and create a DNS entry for the domain name pointing to the FQDN of the Azure App Gateway, e.g. <code>mytre-domain-name.org.  CNAME  mytre.region.cloudapp.azure.com.</code></p> </li> <li> <p>Set the domain name in the <code>CUSTOM_DOMAIN</code> variable in <code>config.yaml</code> or create a GitHub Actions secret, depending on your deployment method.</p> </li> <li> <p>Update the TRE UX App Registration redirect URIs:</p> <p>a. If you haven't deployed your TRE yet, this is done automatically for you using the <code>make auth</code> command.  Refer to the setup instructions to deploy your TRE.</p> <p>b. If your TRE has already been deployed, manually add the following redirect URIs in Entra ID &gt; App Registrations &gt; TRE_ID UX &gt; Authentication &gt; Single-page application Redirect URIs:</p> </li> </ol> <pre><code>  https://mytre-domain-name.org\n  https://mytre-domain-name.org/api/docs/oauth2-redirect\n</code></pre> <ol> <li>Generate an SSL certificate for the TRE's new domain name:</li> </ol> <pre><code>  make letsencrypt\n</code></pre>"},{"location":"tre-admins/custom-domain/#limitations","title":"Limitations","text":"<p>The method above allows a custom domain name to be used to access the Azure TRE's portal and Swagger UI.  It does not configure the custom domain name for Guacamole instances, or services available within the TRE network such as Gitea, or Sonatype Nexus.</p>"},{"location":"tre-admins/customer-managed-keys/","title":"Enabling Customer-managed keys for TRE resources","text":"<p>You can enable customer-managed keys (CMK) for supporting resources in Azure TRE.</p> <p>Caution</p> <p>Currently, it is not possible to redeploy TRE with CMK enabled if it has previously been deployed without it. This is due to limitations of resources such as Azure Container Registry (ACR) that only allow enabling the CMK encryption at the time of resource creation.</p> <p>When enabled, CMK encryption provides an additional layer of encryption control for supported Azure resources within the TRE by allowing you to manage and control the encryption keys used to protect your data.</p> <p>To enable CMK encryption, set <code>enable_cmk_encryption: true</code> in the developer settings section of your <code>config.yaml</code> file.</p> <p>For more information about CMKs, see Use customer-managed keys with Azure Storage encryption.</p>"},{"location":"tre-admins/customer-managed-keys/#key-vault-configuration","title":"Key Vault configuration","text":"<p>The CMKs for Azure TRE can be stored in either a Key Vault deployed by TRE itself, or in an external Key Vault provided by the user.  </p> <p>To have TRE create and manage its own Key Vault for storing CMKs, specify the <code>ENCRYPTION_KV_NAME</code> parameter in the <code>config.yaml</code> file.  </p> <p>Alternatively, to use your own existing Key Vault, provide the <code>EXTERNAL_KEY_STORE_ID</code> parameter pointing to your Key Vault resource ID.</p>"},{"location":"tre-admins/dns-security-policy/","title":"Enabling DNS Security Policy","text":""},{"location":"tre-admins/dns-security-policy/#dns-tunneling","title":"DNS Tunneling","text":"<p>A potential vector for data exfiltration is the use of a technique called DNS tunneling. Even when most outbound network requests are blocked by firewall DNS on port 53 is required for most systems to function. DNS tunneling works by registering a domain and running a name server that will extract data that has been encoded in the names of DNS requests. A malisious user would need access to a workspace in order to run the client-side component of this. Tools are readily available such as Iodine or dns2tcp. Read more here about the threat of DNS tunnelling.</p>"},{"location":"tre-admins/dns-security-policy/#azure-dns-security-policy","title":"Azure DNS Security Policy","text":"<p>Azure DNS security policy is currently (May 2025) in public preview and enables a policy to log and filter all DNS requests originating from a virtual network. As the service is in preview it is not enabled by default on the TRE, but can be configured with a flag in the <code>config.yaml</code> file. Uncomment the line from the sample config file and set <code>enable_dns_policy</code> to <code>true</code>.</p> <p>The filters applied include an allow-list of domains that are required for basic functionality of the TRE. This list can be seen in the <code>allowed-dns.json</code> file. DNS requests to all other domains are blocked. To add domain named to the allow list, add them as list items to <code>allowed_dns</code> in the config file. Note that domains must be fully qualified, i.e. they must end with a dot (<code>.</code>). Until <code>allowed-dns.json</code> contains a comprehensive list of required domain names, additional values may need adding to this list to the <code>allowed_dns</code> list to enable workspace services to function correctly.</p> <p>To enable the service <pre><code>  enable_dns_policy: true\n  allowed_dns:\n    - mydomain.com.\n    - anotherdomain.net.\n</code></pre></p> <p>When enabled, the DNS security policy always applies to the core TRE network. When a workspace is deployed there is an optional setting \"Enable DNS Security Policy\" which must be checked to enrole the workspace in the policy. If this option is not selected the workspace will be able to make DNS requests to any domain.</p>"},{"location":"tre-admins/dns-security-policy/#logging","title":"Logging","text":"<p>When DNS security policy in enabled all DNS requests are logged to the Log Analytics workspace.</p> <p>The following KQL query can be use to list DNS requests that have been blocked.</p> <pre><code>DNSQueryLogs | where ResolverPolicyRuleAction == \"None\" and ResponseCode == 2\n</code></pre>"},{"location":"tre-admins/environment-variables/","title":"Environment variables","text":"<p>Info</p> <p>The <code>.tfvars</code> file is intentionally not used. The <code>.env</code> file format is easier to parse, meaning we can use the values for bash scripts and other purposes.</p>"},{"location":"tre-admins/environment-variables/#for-shared-management-resources-in-configyaml","title":"For shared management resources in <code>/config.yaml</code>","text":"Environment variable name Description <code>LOCATION</code> The Azure location (region) for all resources. <code>MGMT_RESOURCE_GROUP_NAME</code> The shared resource group for all management resources, including the storage account. <code>MGMT_STORAGE_ACCOUNT_NAME</code> The name of the storage account to hold the Terraform state and other deployment artifacts. <code>TERRAFORM_STATE_CONTAINER_NAME</code> The name of the blob container to hold the Terraform state Default value is <code>tfstate</code>. <code>ACR_NAME</code> A globally unique name for the Azure Container Registry (ACR) that will be created to store deployment images. <code>EXTERNAL_KEY_STORE_ID</code> The ID of the external Key Vault to store CMKs in. Should not be set if <code>ENCRYPTION_KV_NAME</code> is set and only required if <code>ENABLE_CMK_ENCRYPTION</code> is true. <code>ENCRYPTION_KV_NAME</code> The name of the Key Vault for encryption keys. Should not be set if <code>EXTERNAL_KEY_STORE_ID</code> is set and only required if <code>ENABLE_CMK_ENCRYPTION</code> is true. <code>ARM_SUBSCRIPTION_ID</code> Optional for manual deployment. If not specified the <code>az cli</code> selected subscription will be used. The Azure subscription ID for all resources. <code>ARM_CLIENT_ID</code> Optional for manual deployment without logged-in credentials. The client whose azure identity will be used to deploy the solution. <code>ARM_CLIENT_SECRET</code> Optional for manual deployment without logged-in credentials. The password of the client defined in <code>ARM_CLIENT_ID</code>. <code>ARM_TENANT_ID</code> Optional for manual deployment. If not specified the <code>az cli</code> selected subscription will be used. The Microsoft Entra ID tenant of the client defined in <code>ARM_CLIENT_ID</code>."},{"location":"tre-admins/environment-variables/#for-azure-tre-instance-in-configyaml","title":"For Azure TRE instance in <code>/config.yaml</code>","text":"Environment variable name Description <code>TRE_ID</code> A globally unique identifier. <code>TRE_ID</code> can be found in the resource names of the Azure TRE instance; for example, a <code>TRE_ID</code> of <code>mytre-dev</code> will result in a resource group name for Azure TRE instance of <code>rg-mytre-dev</code>. This must be less than 12 characters. Allowed characters: lowercase alphanumerics <code>TRE_URL</code> This will be generated for you by populating your <code>TRE_ID</code>. This is used so that you can automatically register bundles <code>CORE_ADDRESS_SPACE</code> The address space for the Azure TRE core virtual network. <code>/22</code> or larger. <code>TRE_ADDRESS_SPACE</code> The address space for the whole TRE environment virtual network where workspaces networks will be created (can include the core network as well). E.g. <code>10.0.0.0/12</code> <code>ENABLE_SWAGGER</code> Determines whether the Swagger interface for the API will be available. <code>SWAGGER_UI_CLIENT_ID</code> Generated when following pre-deployment steps guide. Client ID for swagger client to make requests. <code>AAD_TENANT_ID</code> Generated when following pre-deployment steps guide. Tenant id against which auth is performed. <code>API_CLIENT_ID</code> Generated when following pre-deployment steps guide. Client id of the \"TRE API\". <code>API_CLIENT_SECRET</code> Generated when following pre-deployment steps guide. Client secret of the \"TRE API\". <code>STATEFUL_RESOURCES_LOCKED</code> If set to <code>false</code> locks on stateful resources won't be created. A recommended setting for developers. <code>KV_PURGE_PROTECTION_ENABLED</code> If set to <code>false</code> the core Key Vault's purge protection will be disabled so it can be reused upon deletion. A recommended setting for developers. <code>ENABLE_AIRLOCK_MALWARE_SCANNING</code> If False, Airlock requests will skip the malware scanning stage. If set to True, Defender for Storage will be enabled. <code>ENABLE_LOCAL_DEBUGGING</code> Set to <code>false</code> by default. Setting this to <code>true</code> will ensure that Azure resources are accessible from your local development machine. (e.g. ServiceBus and Cosmos) <code>PUBLIC_DEPLOYMENT_IP_ADDRESS</code> The public IP address of the machine that is deploying TRE. (Your desktop or the build agents). In certain locations a dynamic script to retrieve this from https://ipecho.net/plain does not work. If this is the case, then you can 'hardcode' your IP. <code>RESOURCE_PROCESSOR_VMSS_SKU</code> The SKU of the VMMS to use for the resource processing VM. <code>CORE_APP_SERVICE_PLAN_SKU</code> The SKU of AppService plans created for the core infrastructure. <code>WORKSPACE_APP_SERVICE_PLAN_SKU</code> Optional. The SKU used for AppService plan used in E2E tests unless otherwise specified. Default value is <code>P1v2</code>. <code>RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE</code> Optional. The number of processes to instantiate when the Resource Processor starts. Equates to the number of parallel deployment operations possible in your TRE. Defaults to <code>5</code>. <code>FIREWALL_SKU</code> Optional. The SKU of the Azure Firewall instance. Default value is <code>Standard</code>. Allowed values [<code>Basic</code>, <code>Standard</code>, <code>Premium</code>]. See Azure Firewall SKU feature comparison. <code>APP_GATEWAY_SKU</code> Optional. The SKU of the Application Gateway. Default value is <code>Standard_v2</code>. Allowed values [<code>Standard_v2</code>, <code>WAF_v2</code>] <code>DEPLOY_BASTION</code> Optional. If set to <code>true</code>, an Azure Bastion instance will be deployed. Default value is <code>true</code>. <code>BASTION_SKU</code> Optional. The SKU of the Azure Bastion instance. Default value is <code>Basic</code>. Allowed values [<code>Developer</code>, <code>Standard</code>, <code>Basic</code>, <code>Premium</code>]. See Azure Bastion SKU feature comparison. <code>CUSTOM_DOMAIN</code> Optional. Custom domain name to access the Azure TRE portal. See Custom domain name. <code>ENABLE_CMK_ENCRYPTION</code> Optional. Default is <code>false</code>, if set to <code>true</code> customer-managed key encryption will be enabled for all supported resources. <code>AUTO_WORKSPACE_APP_REGISTRATION</code> Set to <code>false</code> by default. Setting this to <code>true</code> grants the <code>Application.ReadWrite.All</code> and <code>Directory.Read.All</code> permission to the Application Admin identity. This identity is used to manage other Microsoft Entra ID applications that it owns, e.g. Workspaces. If you do not set this, the identity will have <code>Application.ReadWrite.OwnedBy</code> permission. Further information on Application Admin can be found here. <code>AUTO_WORKSPACE_GROUP_CREATION</code> Set to <code>false</code> by default. Setting this to <code>true</code> grants the <code>Group.ReadWrite.All</code> permission to the Application Admin identity. This identity can then create security groups aligned to each applciation role. Microsoft Entra ID licencing implications need to be considered as Group assignment is a premium feature. You can read mode about Group Assignment here. <code>AUTO_GRANT_WORKSPACE_CONSENT</code> Default of <code>false</code>.  Setting this to <code>true</code> will remove the need for users to manually grant consent when creating new workspaces. The identity will be granted <code>Application.ReadWrite.All</code> and <code>DelegatedPermissionGrant.ReadWrite.All</code> permissions. <code>USER_MANAGEMENT_ENABLED</code> If set to <code>true</code>, TRE Admins will be able to assign and de-assign users to workspaces via the UI (Requires Entra ID groups to be enabled on the workspace and the workspace template version to be 2.2.0 or greater). <code>PRIVATE_AGENT_SUBNET_ID</code> Optional. Vnet exception is enabled for the provided runner agent subnet id, enabling access to private resources like TRE key vault. <code>UI_SITE_NAME</code> Optional. Overrides the title text shown in top left corner of portal. Default value is: <code>Azure TRE</code> <code>UI_FOOTER_TEXT</code> Optional. Overrides the footer text shown in the bottom left corner of the portal.  Default value is <code>Azure Trusted Research Environment</code>"},{"location":"tre-admins/environment-variables/#for-authentication-in-configyaml","title":"For authentication in <code>/config.yaml</code>","text":"Variable Description <code>APPLICATION_ADMIN_CLIENT_ID</code> This client will administer Microsoft Entra ID Applications for TRE <code>APPLICATION_ADMIN_CLIENT_SECRET</code> This client will administer Microsoft Entra ID Applications for TRE <code>TEST_ACCOUNT_CLIENT_ID</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>TEST_ACCOUNT_CLIENT_SECRET</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>API_CLIENT_ID</code> API application (client) ID. <code>API_CLIENT_SECRET</code> API application client secret. <code>SWAGGER_UI_CLIENT_ID</code> Swagger (OpenAPI) UI application (client) ID. <code>WORKSPACE_API_CLIENT_ID</code> Each workspace is secured behind it's own AD Application <code>WORKSPACE_API_CLIENT_SECRET</code> Each workspace is secured behind it's own AD Application. This is the secret for that application."},{"location":"tre-admins/environment-variables/#for-cicd-pipelines-in-github-environment-secrets","title":"For CI/CD pipelines in github environment secrets","text":"Variable Description <code>AZURE_CREDENTIALS</code> Credentials used to authorize CI/CD workflows to provision resources for the TRE workspaces and workspace services. This is basically your ARM client credentials in json format. Read more about how to create it and its format here <code>MS_TEAMS_WEBHOOK_URI</code> URI for the Teams channel webhook"},{"location":"tre-admins/registering-templates/","title":"Registering Templates","text":"<p>To enable users to deploy Workspaces, Workspace Services or User Resources, we need to register their Templates. This can be done wither by running <code>make</code> commands; using the API or devops scripts. In this article both approaches are described.</p> <p>Info</p> <p>Templates are encapsulated in Porter bundles.</p>"},{"location":"tre-admins/registering-templates/#registration-with-make-commands","title":"Registration with make commands","text":"<p>Porter bundles can be prepared and registered with <code>make</code> commands, which can be useful for CI/CD scenarios. Before registering, Porter bundles must be built (<code>make bundle-build</code>) and then published to the TRE registry (<code>make bundle publish</code>), before finally registering it for use with the TRE using <code>make bundle-register</code>. Here we use the Azure ML workspace service bundle as an example:</p> <pre><code>make bundle-build DIR=templates/workspace_services/azureml\nmake bundle-publish DIR=templates/workspace_services/azureml\nmake bundle-register DIR=templates/workspace_services/azureml BUNDLE_TYPE=workspace_service\n</code></pre> <p>If you're building, publishing and registering a lot of bundles, using three separate commands can be cumbersome, so there is a unifed command for each bundle type to make this easier:</p> <pre><code>make workspace_service_bundle BUNDLE=azureml\n</code></pre> <p>There are also <code>make workspace_bundle</code>, <code>make shared_service_bundle</code> and <code>make user_resource_bundle</code> commands for the corresponding bundle resource types.</p> <p>Tip</p> <p>The <code>make user_resource_bundle</code> also requires a <code>WORKSPACE_SERVICE</code> parameter to be passed alongside <code>BUNDLE</code> which specifies the workspace service that the user resource belongs to.</p>"},{"location":"tre-admins/registering-templates/#registration-using-swagger-ui","title":"Registration using Swagger UI","text":"<p>Porter bundles can also be registered interactively using the Swagger UI. For that we need to build and publish the porter bundle  </p> <ol> <li> <p>Build the Porter bundle</p> <pre><code>make bundle-build DIR=templates/workspace_services/azureml\nmake bundle-publish DIR=templates/workspace_services/azureml\n</code></pre> </li> <li> <p>Use the utility script to generate the payload. The script needs to be executed from within the bundle directory, for example <code>/templates/workspaces/base/</code></p> <pre><code>../../../devops/scripts/register_bundle_with_api.sh -r &lt;acr_name&gt; -t workspace --dry-run\n</code></pre> <p>Copy the resulting JSON payload.</p> </li> <li> <p>Navigate to the Swagger UI at <code>/api/docs</code></p> </li> <li>Log into the Swagger UI using <code>Authorize</code></li> <li> <p>Click <code>Try it out</code> on the <code>POST</code> <code>/api/workspace-templates</code> operation:</p> <p></p> </li> <li> <p>Paste the payload json generated earlier into the <code>Request body</code> field, then click <code>Execute</code>. Review the server response.</p> </li> <li>Verify the template registration using the <code>GET</code> operation on <code>/api/workspace-templates</code>. The name of the template should now be listed.</li> </ol>"},{"location":"tre-admins/registering-templates/#registration-using-script","title":"Registration using script","text":"<p>To use the script to automatically register the template, you must create a user that does not require an interactive login per the e2e test user documentation here.</p> <p>The script needs to be executed from within the bundle directory, for example <code>/templates/workspaces/base/</code></p> <pre><code>Usage: ../../../devops/scripts/register_bundle_with_api.sh  [-c --current]\n\nOptions:\n   -r, --acr-name                Azure Container Registry Name\n   -t, --bundle-type             Bundle type: workspace, workspace_service, user_resource or shared_service\n   -w, --workspace-service-name  The template name of the user resource (if registering a user_resource)\n   -c, --current                 Make this the currently deployed version of this template\n   -v, --verify                  Verify registration with the API\n</code></pre> <p>In addition to generating the payload, the script posts the payload to the <code>/api/workspace-templates</code> endpoint. Once registered the template can be retrieved by a <code>GET</code> operation on <code>/api/workspace-templates</code>.</p> <p>Tip</p> <p>Follow the same procedure to register workspace service templates and user resource templates</p>"},{"location":"tre-admins/start-stop/","title":"Start/Stop Azure TRE","text":"<p>Once you've provisioned an Azure TRE instance it will begin to incur running costs of the underlying Azure services.</p> <p>Within evaluation or development, you may want to \"pause\" the TRE environment during out of office hours or weekends, to reduce costs without having to completely destroy the environment.  The following <code>make</code> targets provide a simple way to start and stop both the Azure Firewall and Azure Application Gateway instances, considerably reducing the Azure TRE instance running costs.</p> <p>Info</p> <p>After running <code>make all</code> underlying Azure TRE services are automatically started and billing will start.</p>"},{"location":"tre-admins/start-stop/#start-azure-tre","title":"Start Azure TRE","text":"<p>This will allocate the Azure Firewall settings with a public IP and start the Azure Application Gateway service, starting billing of both services.</p> <pre><code>make tre-start\n</code></pre>"},{"location":"tre-admins/start-stop/#stop-azure-tre","title":"Stop Azure TRE","text":"<p>This will deallocate the Azure Firewall public IP and stop the Azure Application Gateway service, stopping billing of both services.</p> <pre><code>make tre-stop\n</code></pre>"},{"location":"tre-admins/start-stop/#automating-stop","title":"Automating <code>stop</code>","text":"<p>In certain situations, you might want to stop any TRE running on a schedule to reduce costs in a wider way. We have this procedure setup in our development subscriptions where each night we stop all our environments after which each developer would need to manually start their TRE when they need it again.</p>"},{"location":"tre-admins/start-stop/#requirements","title":"Requirements","text":"<p>We use Azure Automation to run this procedure.</p> <p>Be sure to create a runbook with PowerShell 7.1 or PowerShell 7.2 enabled and an identity with contributor permissions on the subscription. Note that the script below uses a system managed identity and if you use something different then you might need to update the authentication part.</p> <p>If you create a new Automation account, you will have the required modules preinstalled.</p> <p>Finally, schedule it to run when it makes sense for you.</p>"},{"location":"tre-admins/start-stop/#stop-runbook-script","title":"Stop Runbook Script","text":"<pre><code>try {\n  \"Logging in to Azure...\"\n  Connect-AzAccount -Identity\n}\ncatch {\n  Write-Error -Message $_.Exception\n  throw $_.Exception\n}\n\n$azContext = Get-AzContext\n$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile\n$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)\n$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)\n\n$authHeader = @{\n  'Content-Type'  = 'application/json'\n  'Authorization' = 'Bearer ' + $token.AccessToken\n}\n\n# Get all resource groups that have the default Azure TRE project tag value\n$ResourceGroups = Get-AzResourceGroup -Tag @{'project' = 'Azure Trusted Research Environment' }\nforeach ($Group in $ResourceGroups) {\n  if ($Group.ResourceGroupName -like '*-ws-*') {\n    # Deal with the workspace resource groups separately (below)\n    continue\n  }\n\n  # Deallocate the Azure Firewall (expecting only one per TRE instance)\n  $Firewall = Get-AzFirewall -ResourceGroupName $Group.ResourceGroupName\n  if ($null -ne $Firewall) {\n    $Firewall.Deallocate()\n    Write-Output \"Deallocating Firewall '$($Firewall.Name)'\"\n    Set-AzFirewall -AzureFirewall $Firewall\n  }\n\n  # Stop the Application Gateway(s)\n  # Multiple Application Gateways may exist if the certs shared service is installed\n  $Gateways = Get-AzApplicationGateway -ResourceGroupName $Group.ResourceGroupName\n  foreach ($Gateway in $Gateways) {\n    Write-Output \"Stopping Application Gateway '$($Gateway.Name)'\"\n    Stop-AzApplicationGateway -ApplicationGateway $Gateway\n  }\n\n  # Stop the MySQL servers\n  $MySQLServers = Get-AzResource -ResourceGroupName $Group.ResourceGroupName -ResourceType \"Microsoft.DBforMySQL/servers\"\n  foreach ($Server in $MySQLServers) {\n    # Invoke the REST API\n    Write-Output \"Stopping MySQL '$($Server.Name)'\"\n    $restUri = 'https://management.azure.com/subscriptions/' + $azContext.Subscription.Id + '/resourceGroups/' + $Group.ResourceGroupName + '/providers/Microsoft.DBForMySQL/servers/' + $Server.Name + '/stop?api-version=2020-01-01'\n    $response = Invoke-RestMethod -Uri $restUri -Method POST -Headers $authHeader\n  }\n\n  # Deallocate all the virtual machine scale sets (resource processor)\n  $VMSS = Get-AzVMSS -ResourceGroupName $Group.ResourceGroupName\n  foreach ($item in $VMSS) {\n    Write-Output \"Stopping VMSS '$($item.Name)'\"\n    Stop-AzVmss -ResourceGroupName $item.ResourceGroupName -VMScaleSetName $item.Name -Force\n  }\n\n  # Deallocate all the VMs\n  $VM = Get-AzVM -ResourceGroupName $Group.ResourceGroupName\n  foreach ($item in $VM) {\n    Write-Output \"Stopping VM '$($item.Name)'\"\n    Stop-AzVm -ResourceGroupName $item.ResourceGroupName -Name $item.Name -Force\n  }\n\n  # Process all the workspace resource groups for this TRE instance\n  $WorkspaceResourceGroups = Get-AzResourceGroup -Name \"$($Group.ResourceGroupName)-ws-*\"\n  foreach ($wsrg in $WorkspaceResourceGroups) {\n    # Deallocate all the VMs\n    $VM = Get-AzVM -ResourceGroupName $wsrg.ResourceGroupName\n    foreach ($item in $VM) {\n      Write-Output \"Stopping workspace VM '$($item.Name)'\"\n      Stop-AzVm -ResourceGroupName $item.ResourceGroupName -Name $item.Name -Force\n    }\n  }\n}\n</code></pre>"},{"location":"tre-admins/start-stop/#automating-start","title":"Automating <code>start</code>","text":"<p>To restart the TRE core services (Firewall, Application Gateway(s), Virtual Machine Scale Sets, Virtual Machines, and MySQL), you can use <code>make tre-start</code>. Depending on your workflow, you might not be able to easily execute the <code>make</code> target. Alternatively, you can create a second Runbook and execute it manually. The PowerShell code to start TRE core services is below:</p> <pre><code>try {\n    \"Logging in to Azure...\"\n    Connect-AzAccount -Identity\n}\ncatch {\n    Write-Error -Message $_.Exception\n    throw $_.Exception\n}\n\n$azContext = Get-AzContext\n$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile\n$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)\n$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)\n\n$authHeader = @{\n    'Content-Type'  = 'application/json'\n    'Authorization' = 'Bearer ' + $token.AccessToken\n}\n\n# Get all resource groups that have the default Azure TRE project tag value\n$ResourceGroups = Get-AzResourceGroup -Tag @{'project' = 'Azure Trusted Research Environment' }\nforeach ($Group in $ResourceGroups) {\n    if ($Group.ResourceGroupName -like '*-ws-*') {\n        # Don't deal with the workspace resource groups\n        continue\n    }\n\n    $azureTreId = $Group.Tags['tre_id']\n    Write-Output \"Starting TRE core resources for '$azureTreId'\"\n\n    # Allocate the Azure Firewall (expecting only one per TRE instance)\n    $Firewall = Get-AzFirewall -ResourceGroupName $Group.ResourceGroupName\n    if ($null -ne $Firewall) {\n        # Find the firewall's public IP and virtual network\n        $pip = Get-AzPublicIpAddress -ResourceGroupName $Group.ResourceGroupName -Name \"pip-fw-$azureTreId\"\n        $vnet = Get-AzVirtualNetwork -ResourceGroupName $Group.ResourceGroupName -Name \"vnet-$azureTreId\"\n        # Find the firewall's public management IP - note this will only be present for a firewall with a Basic SKU\n        $mgmtPip = Get-AzPublicIpAddress -ResourceGroupName \"rg-$azureTreId\" -Name \"pip-fw-management-$azureTreId\" -ErrorAction SilentlyContinue\n        $Firewall.Allocate($vnet, $pip, $mgmtPip)\n        Write-Output \"Allocating Firewall '$($Firewall.Name)' with public IP '$($pip.Name)'\"\n        Set-AzFirewall -AzureFirewall $Firewall\n    }\n\n    # Start the Application Gateway(s)\n    # Multiple Application Gateways may exist if the certs shared service is installed\n    $Gateways = Get-AzApplicationGateway -ResourceGroupName $Group.ResourceGroupName\n    foreach ($Gateway in $Gateways) {\n        Write-Output \"Starting Application Gateway '$($Gateway.Name)'\"\n        Start-AzApplicationGateway -ApplicationGateway $Gateway\n    }\n\n    # Start the MySQL servers\n    $MySQLServers = Get-AzResource -ResourceGroupName $Group.ResourceGroupName -ResourceType \"Microsoft.DBforMySQL/servers\"\n    foreach ($Server in $MySQLServers) {\n        # Invoke the REST API\n        Write-Output \"Starting MySQL '$($Server.Name)'\"\n        $restUri = 'https://management.azure.com/subscriptions/' + $azContext.Subscription.Id + '/resourceGroups/' + $Group.ResourceGroupName + '/providers/Microsoft.DBForMySQL/servers/' + $Server.Name + '/start?api-version=2020-01-01'\n        $response = Invoke-RestMethod -Uri $restUri -Method POST -Headers $authHeader\n    }\n\n    # Allocate all the virtual machine scale sets (resource processor)\n    $VMSS = Get-AzVMSS -ResourceGroupName $Group.ResourceGroupName\n    foreach ($item in $VMSS) {\n        Write-Output \"Starting VMSS '$($item.Name)'\"\n        Start-AzVmss -ResourceGroupName $item.ResourceGroupName -VMScaleSetName $item.Name\n    }\n\n    # Start VMs\n    $VM = Get-AzVM -ResourceGroupName $Group.ResourceGroupName\n    foreach ($item in $VM) {\n      Write-Output \"Starting VM '$($item.Name)'\"\n      Start-AzVm -ResourceGroupName $item.ResourceGroupName -Name $item.Name\n    }\n}\n</code></pre>"},{"location":"tre-admins/supported-clouds/","title":"Supported Clouds","text":"<p>AzureTRE can be installed on the following clouds: 1. Azure Public cloud 2. Azure US Government Cloud</p>"},{"location":"tre-admins/supported-clouds/#supported-services","title":"Supported Services","text":"<ol> <li>Azure Public cloud - All services are supported.</li> <li>In Azure US Government Cloud the following services are supported     - All type of workspaces     - Virtual Desktops service - Guacamole     - Linux and Windows VM machines</li> </ol>"},{"location":"tre-admins/supported-clouds/#technical-notes","title":"Technical Notes","text":"<p>When Using Azure US Government Cloud make sure to: 1. Setup the cloud in Azure CLI - <code>az cloud set --name AzureUSGovernment</code> 1. Setup the AZURE_ENVIRONMENT param in CI/CD pipelines to <code>AzureUSGovernment</code> - as mentioned in CI/CD predeployment steps</p>"},{"location":"tre-admins/tear-down/","title":"Tear-down","text":"<p>To remove the Azure TRE and its resources from your Azure subscription run:</p> <pre><code>make tre-destroy\n</code></pre> <p>Alternatively, you can directly delete the resource groups in Azure Portal or using the CLI, however the <code>make</code> method is recommended if you plan to re-deploy the Azure TRE since it performs additional tidy up which prevent re-deployment errors.</p> <pre><code>az group delete --name &lt;resource group name&gt;\n</code></pre> <p>Finally, delete the app registrations in Azure Portal or using the CLI:</p> <pre><code>az ad app delete --id &lt;application client ID&gt;\n</code></pre>"},{"location":"tre-admins/upgrading-resources/","title":"Upgrading Resources Version","text":""},{"location":"tre-admins/upgrading-resources/#upgrading-resources-version","title":"Upgrading Resources Version","text":"<p>Azure TRE workspaces, workspace services, workspace shared services, and user resources are Porter bundles. Porter bundles are based on Cloud Native Application Bundles (CNAB).</p> <p>When a new bundle version becomes available, users can upgrade their resources to a newer version after building, publishing and registering the bundle template.</p> <p>Upgrades (and downgrades) are based on CNAB bundle upgrade action.</p> <p>Bundle template versions follow semantic versioning rules.</p> <p>Note</p> <p>Only minor and patch version upgrades are automatically allowed within the Azure TRE upgrade mechanism. Major versions upgrades and any version downgrades are blocked as they are assumed to contain breaking changes or changes that require additional consideration.</p> <p>For users who wish to upgrade a major version, we highly recommend to read the changelog, review what has changed and take some appropriate action before upgrading using force version update.</p>"},{"location":"tre-admins/upgrading-resources/#how-to-upgrade-a-resource-using-swagger-ui","title":"How to upgrade a resource using Swagger UI","text":"<p>Resources can be upgrade using Swagger UI, in the following example we show how to upgrade a workspace version from 1.0.0 to 1.0.1, other resources upgrades are similar.</p> <ol> <li> <p>First make sure the desired template version is registered, follow these steps if not.</p> </li> <li> <p>Navigate to the Swagger UI at <code>/api/docs</code>.</p> </li> <li> <p>Log into the Swagger UI using <code>Authorize</code>.</p> </li> <li> <p>Click <code>Try it out</code> on the <code>GET</code> <code>/api/workspace/{workspace_id}</code> operation.</p> </li> <li> <p>Provide your <code>workspace_id</code> in the parameters section and click <code>Execute</code>.</p> </li> <li> <p>Copy the <code>_etag</code> property from the response body.</p> </li> <li> <p>Click <code>Try it out</code> on the <code>PATCH</code> <code>/api/workspace/{workspace_id}</code> operation.</p> </li> <li> <p>Provide your <code>workspace_id</code> and <code>_etag</code> parameters which you've just copied.</p> </li> <li> <p>Provide the following payload with the desired version in the <code>Request body</code> parameter and click <code>Execute</code>.</p> <p><pre><code>  {\n    \"templateVersion\": \"1.0.1\",\n  }\n</code></pre> 1. Review server response, it should include a new <code>operation</code> document with <code>upgrade</code> as an <code>action</code> and <code>updating</code> as <code>status</code> for upgrading the workspace and a message states that the Job is starting.</p> </li> <li> <p>Once the upgrade is complete another operation will be created and can be viewed by executing <code>GET</code> <code>/api/workspace/{workspace_id}/operations</code>, review it and make sure its <code>status</code> is <code>updated</code>.</p> </li> </ol>"},{"location":"tre-admins/upgrading-resources/#force-version-update","title":"Force version update","text":"<p>If you wish to upgrade a major version, or downgrade to any version, you can override the blocking in the upgrade mechanism by passing <code>force_version_update=true</code> query parameter to the resource <code>Patch</code> action.</p> <p>For example force version patching a workspace:</p> <p></p>"},{"location":"tre-admins/upgrading-tre/","title":"Upgrading AzureTRE version","text":"<p>This document will cover how Azure TRE is referenced and how to upgrade its version in the Azure TRE deployment repository</p>"},{"location":"tre-admins/upgrading-tre/#introduction","title":"Introduction","text":"<p>Azure TRE is referenced as an external folder in the Azure TRE deployment repository (which is used as a template for your project in the quick start guide). A specific version of Azure TRE is downloaded as part of the devcontainer setup.</p> <p>A symlink is then created making it available to reference in the directory itself (it is available only for reference, any changes to it are gitignored).</p>"},{"location":"tre-admins/upgrading-tre/#how-to-upgrade-the-azure-tre-version","title":"How to upgrade the Azure TRE version","text":"<p>Please check the release notes before upgrading.</p> <ul> <li>If using the Azure TRE deployment repository directly (not one created using a Template), you need to git pull the latest version.</li> </ul> <ul> <li>If using a repository created from the <code>AzureTRE-Deployment</code> template, then run the following git commands in your own repo: <pre><code>git remote add upstream https://github.com/Microsoft/AzureTRE-Deployment\ngit pull upstream main --allow-unrelated-histories\n</code></pre> This will pull the latest version of AzureTRE to your copy of the repository. You may need to resolve merge conflicts if you have made edits. The <code>git remote add</code> command is only necessary the first time you upgrade your TRE version. After the first time, you only need to execute the <code>git pull</code> command.</li> </ul> <p>Once the code is merged, follow the same process used to initially deploy the TRE to upgrade the TRE. This might mean running a command such as <code>make all</code>, or running your CI/CD pipeline(s).</p> <p>If running commands manually, please ensure that you build and push the container images. Running <code>make tre-deploy</code> alone will update the infrastructure but not the container images. <code>make all</code> runs all the required commands.</p>"},{"location":"tre-admins/upgrading-tre/#deploying-a-specific-version-of-azure-tre","title":"Deploying a specific version of Azure TRE","text":"<p>If you wish to upgrade or deploy a specific version, or unreleased version of Azure TRE and are using the Azure TRE deployment repository you can change the value of <code>UPSTREAM_REPO_VERSION</code> in <code>.devcontainer/devcontainer.json</code>, for example:</p> <ul> <li><code>\"UPSTREAM_REPO_VERSION\": \"v0.9.0\"</code> (to use the specified tag; be sure to specify the complete tag name (prefixed with <code>v</code> and not the release name))</li> <li><code>\"UPSTREAM_REPO_VERSION\": \"main\"</code> (to use the latest code in the <code>main</code> branch)</li> <li><code>\"OSS_VERSION\": \"1c6ff35ec9246e53b86e93b9da5b97911edc71c1\"</code> (to use the code at the time of the commit identified by the hash)</li> </ul>"},{"location":"tre-admins/upgrading-tre/#deploying-a-fork-of-azure-tre","title":"Deploying a fork of Azure TRE","text":"<p>If you wish to deploy the Azure TRE from a forked repository you can change the values of <code>UPSTREAM_REPO</code> and <code>UPSTREAM_REPO_VERSION</code> in <code>.devcontainer/devcontainer.json</code>, for example, change:</p> <ul> <li><code>\"UPSTREAM_REPO\": \"microsoft/AzureTRE\"</code> (the default)</li> <li><code>\"UPSTREAM_REPO\": \"myorg/AzureTRE\"</code> (to point to a fork of the Azure TRE in your GitHub organisation)</li> </ul> <p>When changing <code>UPSTREAM_REPO</code> ensure the <code>UPSTREAM_REPO_VERSION</code> variable refers to a GitHub ref on your repository fork.</p>"},{"location":"tre-admins/identities/api/","title":"The API Identity","text":""},{"location":"tre-admins/identities/api/#name","title":"Name","text":"<p>The API Identity is typically called <code>&lt;TRE_ID&gt; API</code> within the Microsoft Entra ID Portal.</p>"},{"location":"tre-admins/identities/api/#purpose","title":"Purpose","text":"<p>This identity's credentials are stored in the <code>core</code> Key Vault and mandatory for the running of the Trusted Research Environment (TRE). It is required for the API Application, hosted in Azure App Service, to authenticate to Microsoft Entra ID and authorize the various operations.</p>"},{"location":"tre-admins/identities/api/#application-roles","title":"Application Roles","text":"Display name Description Allowed member types Value TRE Administrators Provides resource administrator access to the TRE. Users/Groups,Applications <code>TREAdmin</code> TRE Users Provides access to the TRE application. Users/Groups,Applications <code>TREUser</code>"},{"location":"tre-admins/identities/api/#microsoft-graph-permissions","title":"Microsoft Graph Permissions","text":"Name Type* Admin consent required TRE usage Directory.Read.All Application Yes Allows the app to read directory objects (roles/permissions) in your organization's directory, such as roles and permissions, without a signed-in user. User.Read.All Application Yes Allows the app to read user profiles without a signed in user to check that the user has permissions to execute an action e.g., to view workspaces. See <code>/api_app/services/aad_authentication.py</code>. email Delegated No Used to read the user's email address when creating TRE resources openid Delegated No Allows users to sign in to the app with their work or school accounts and allows the app to see basic user profile information. profile Delegated No Used to read the user's profile when creating TRE resources <p>'*' See the difference between delegated and application permission types. See Microsoft Graph permissions reference for more details.</p>"},{"location":"tre-admins/identities/api/#clients","title":"Clients","text":"<p>This identity should only be used by the API Application.</p>"},{"location":"tre-admins/identities/api/#how-to-create","title":"How to create","text":"<p>Example on how to run the script:</p> <p><pre><code>./devops/scripts/aad/create_api_application.sh \\\n    --name &lt;TRE_ID&gt; \\\n    --tre-url \"https://&lt;TRE_ID&gt;.&lt;LOCATION&gt;.cloudapp.azure.com\" \\\n    --admin-consent \\\n    --automation-clientid &lt;TEST_ACCOUNT_CLIENT_ID&gt;\n</code></pre> Below is a sample where <code>TRE_ID</code> has value <code>mytre</code>:</p> <pre><code>./devops/scripts/aad/create_api_application.sh --name mytre --admin-consent \\\n--tre-url \"https://mytre_6.westeurope.cloudapp.azure.com\" --automation-clientid 176c2f5d-xxxx-xxxx-xxxx-68a5c30f354d\n</code></pre> Argument Description <code>--name</code> The prefix of the name of the app registrations. <code>TRE</code> will give you <code>TRE API</code>. <code>--tre-url</code> Used to construct auth redirection URLs for the UI and Swagger app. Use the values of the environment variables <code>TRE_ID</code> and <code>LOCATION</code> in the URL. Reply URL for the localhost, <code>http://localhost:8000/api/docs/oauth2-redirect</code>, will be added by default. <code>--admin-consent</code> Grants admin consent for the app registrations. This is required for them to function properly, but requires Microsoft Entra ID admin privileges. <code>--automation-clientid</code> This is an optional parameter but will grant TREAdmin permission to the Service Principal of the Automation Admin. <code>--reset-password</code> Optional, default is 0. When run in a headless fashion, 1 is passed in to always reset the password. <p>Caution</p> <p>The script will create an app password (client secret) for the TRE API app and the Automation App and write them to <code>/config.yaml</code> file. These values are only shown once, if you lose them, the script will create new secrets if run again.</p> <p>You can create an automation account which will aid your development flow, if you don't want to do this you can omit the <code>--automation-clientid</code> switch.</p> <p>You can run the script without the <code>--admin-consent</code> and ask your admin to grant consent. If you don't have permissions and just want to create a development environment then skip this step and see the steps in the \"Using a separate Microsoft Entra ID tenant) below.</p>"},{"location":"tre-admins/identities/api/#environment-variables","title":"Environment Variables","text":"Variable Description Location API_CLIENT_ID The Client Id <code>./config.yaml</code> API_CLIENT_SECRET The client secret <code>./config.yaml</code>"},{"location":"tre-admins/identities/api/#comments","title":"Comments","text":"<p>The TRE API app registration requires no redirect URLs defined. From a security standpoint, public client flows should not be allowed. As the identity of the client application cannot be verified (see the image below taken from app registration authentication blade in Azure Portal).</p> <p></p>"},{"location":"tre-admins/identities/application_admin/","title":"The Application Administrator Identity","text":""},{"location":"tre-admins/identities/application_admin/#purpose","title":"Purpose","text":"<p>This identity's credentials are stored in the core key vault and are used when you wish to update Microsoft Entra ID Applications. For instance, when you add Guacamole as a Workspace Service, you would need to add the URI of the Guacamole Service as a Redirect URI to the Workspace App to complete the login flow.</p>"},{"location":"tre-admins/identities/application_admin/#application-roles","title":"Application Roles","text":"<p>This application does not have any roles defined.</p>"},{"location":"tre-admins/identities/application_admin/#microsoft-graph-permissions","title":"Microsoft Graph Permissions","text":"Name Type* Admin consent required TRE usage Application.ReadWrite.OwnedBy Application Yes This user has <code>Application.ReadWrite.OwnedBy</code> as a minimum permission for it to function. If the tenant is managed by a customer administrator, then this user must be added to the Owners of every workspace that is created. This will allow TRE to manage the Microsoft Entra ID Application. This will be a manual process for the Tenant Admin. Application.ReadWrite.All Application Yes This permission is required to create workspace applications and administer any applications in the tenant. This is needed if the Microsoft Entra ID Administrator has delegated Microsoft Entra ID administrative operations to the TRE. There will be no need for the Tenant Admin to manually create workspace applications in the Tenant. Directory.Read.All Application Yes This permission is required to read User details from Microsoft Entra ID. This is needed if the Microsoft Entra ID Administrator has delegated Microsoft Entra ID administrative operations to the TRE. Group.ReadWrite.All Application Yes This permission is required to create and update Microsoft Entra ID groups. This is requried if Microsoft Entra ID groups are to be created automatically by the TRE. DelegatedPermissionGrant.ReadWrite.All Application Yes This permssion is required to remove the need for users to manually grant consent when creating new workspaces. <p>'*' See the difference between delegated and application permission types. See Microsoft Graph permissions reference for more details.</p>"},{"location":"tre-admins/identities/application_admin/#clients","title":"Clients","text":"<p>This user is currently only used from the Porter bundles hosted on the Resource Processor Virtual Machine Scale Set.</p>"},{"location":"tre-admins/identities/application_admin/#how-to-create","title":"How to create","text":"<pre><code>./devops/scripts/aad/create_application_administrator.sh \\\n--name \"${TRE_ID}\" --admin-consent --application-permission \"${APPLICATION_PERMISSION}\"\n</code></pre> Argument Description <code>--name</code> This is used to put a friendly name to the Application that can be seen in the portal. It is typical to use the name of your TRE instance. <code>--admin-consent</code> If you have the appropriate permission to grant admin consent, then pass in this argument. If you do not, you will have to ask an Microsoft Entra ID Admin to consent after you have created the identity. Consent is required for this permission. <code>--application-permission</code> This  is a comma seperated list of the permissions that need to be assigned. For exampler <code>Application.ReadWrite.All,Directory.Read.All,Group.ReadWrite.All</code> <code>--reset-password</code> Optional, default is 0. When run in a headless fashion, 1 is passed in to always reset the password."},{"location":"tre-admins/identities/application_admin/#environment-variables","title":"Environment Variables","text":"Variable Description Location APPLICATION_ADMIN_CLIENT_ID The Client Id <code>./config.yaml</code> APPLICATION_ADMIN_CLIENT_SECRET The client secret <code>./config.yaml</code>"},{"location":"tre-admins/identities/auth-manual/","title":"Manually creating Microsoft Entra ID identities","text":"<p>This guide is here if you wanted to create these Application Registrations manually.</p> <p>These should be created in order (if applicable) as some applications are then granted permission to other applications.</p>"},{"location":"tre-admins/identities/auth-manual/#manual-creation-guides","title":"Manual Creation Guides","text":"Application Comments Application Admin This is required TRE API This is required UI Client This is created when you create the TRE API. Automation Account This is optional Workspace You need one of these per Workspace if you wish to have different users in each workspace."},{"location":"tre-admins/identities/client/","title":"TRE Client UX","text":""},{"location":"tre-admins/identities/client/#name","title":"Name","text":"<p>The Client Identity is typically called <code>&lt;TRE_ID&gt; UX</code> within the Microsoft Entra ID Portal.</p>"},{"location":"tre-admins/identities/client/#purpose","title":"Purpose","text":"<p>This identity is used by any public facing client application so that user impersonation can occur to the Core API and any Workspace Applications.</p>"},{"location":"tre-admins/identities/client/#application-roles","title":"Application Roles","text":"<p>This application does not have any roles defined.</p>"},{"location":"tre-admins/identities/client/#permissions","title":"Permissions","text":"Name Type* Admin consent required TRE usage offline_access Delegated No Allows the app to see and update the data you gave it access to, even when users are not currently using the app. openid Delegated No Allows users to sign in to the app with their work or school accounts and allows the app to see basic user profile information. TRE API/user_impersonation Delegated No Flow the authenticated user to the TRE API when needed. Workspace API/user_impersonation Delegated No Flow the authenticated user to the Workspace API when needed. <p>'*' See the difference between delegated and application permission types. See Microsoft Graph permissions reference for more details.</p>"},{"location":"tre-admins/identities/client/#clients","title":"Clients","text":"<p>This identity should only be used by client applications. Currently this is the React UI and the Swagger UI.</p>"},{"location":"tre-admins/identities/client/#how-to-create","title":"How to create","text":"<p>This identity is created when you create the API. For completeness, you can run the following script Example on how to run the script:</p> <pre><code>./devops/scripts/aad/create_api_application.sh \\\n    --name &lt;TRE_ID&gt; \\\n    --tre-url \"https://&lt;TRE_ID&gt;.&lt;LOCATION&gt;.cloudapp.azure.com\" \\\n    --admin-consent \\\n    --automation-clientid &lt;TEST_ACCOUNT_CLIENT_ID&gt;\n</code></pre> Argument Description <code>--name</code> The prefix of the name of the app registrations. <code>TRE</code> will give you <code>TRE API</code>. <code>--tre-url</code> Used to construct auth redirection URLs for the UI and Swagger app. Use the values of the environment variables <code>TRE_ID</code> and <code>LOCATION</code> in the URL. Reply URL for the localhost, <code>http://localhost:8000/api/docs/oauth2-redirect</code>, will be added by default. <code>--admin-consent</code> Grants admin consent for the app registrations. This is required for them to function properly, but requires Microsoft Entra ID admin privileges. <code>--automation-clientid</code> This is an optional parameter but will create an application with test users with permission to use the <code>TRE API</code> and <code>TRE Swagger UI</code> <code>--reset-password</code> Optional, default is 0. This flag has no relevance when creating the UX as there is no password for the Microsoft Entra ID Application."},{"location":"tre-admins/identities/client/#redirect-urls","title":"Redirect URLs","text":"<p>The following Redirect URIs will be added to the application * <code>https://&lt;TRE ID&gt;.&lt;Azure location&gt;.cloudapp.azure.com</code> * <code>http://localhost:8000/docs/oauth2-redirect</code> - For local testing</p>"},{"location":"tre-admins/identities/client/#environment-variables","title":"Environment Variables","text":"Variable Description Location SWAGGER_UI_CLIENT_ID The Client Id <code>./config.yaml</code>"},{"location":"tre-admins/identities/test-account/","title":"TRE Automation Admin Application","text":""},{"location":"tre-admins/identities/test-account/#name","title":"Name","text":"<p>The Automation Application is typically called <code>&lt;TRE_ID&gt; Automation Admin</code> within the Microsoft Entra ID Portal.</p>"},{"location":"tre-admins/identities/test-account/#purpose","title":"Purpose","text":"<p>This application is used to authorize end-to-end test scenarios.</p> <p>Note</p> <ul> <li>This app registration is only needed and used for testing</li> </ul>"},{"location":"tre-admins/identities/test-account/#application-roles","title":"Application Roles","text":"<p>This application does not have any roles defined.</p>"},{"location":"tre-admins/identities/test-account/#permissions","title":"Permissions","text":"Name Type* Admin consent required TRE usage TRE API / TREAdmin Application Yes This allows this application to authenticate as a TRE Admin for running the tests locally and the E2E in the build. TRE API / user_impersonation Delegated No This allows the application to impersonate the logged in user. TRE - workspace x API / WorkspaceOwner Application Yes This allows this application to authenticate as a Workspace Owner for running the tests locally and the E2E in the build. TRE - workspace x  API / user_impersonation Delegated No This allows the application to impersonate the logged in user. <p>'*' See the difference between delegated and application permission types. See Microsoft Graph permissions reference for more details.</p>"},{"location":"tre-admins/identities/test-account/#clients","title":"Clients","text":"<p>This application is used locally to automatically register bundles against the API and is the user that runs the E2E locally and in the Build.</p>"},{"location":"tre-admins/identities/test-account/#environment-variables","title":"Environment Variables","text":"Variable Description Location TEST_ACCOUNT_CLIENT_ID The Client Id <code>./config.yaml</code> TEST_ACCOUNT_CLIENT_SECRET The client secret <code>./config.yaml</code>"},{"location":"tre-admins/identities/test-account/#how-to-create","title":"How to create","text":"<p>Example on how to run the script:</p> <pre><code>./devops/scripts/aad/create_automation_administrator.sh \\\n--name \"${TRE_ID}\"\n</code></pre> Argument Description <code>--name</code> The prefix of the name of the app registrations. <code>TRE123</code> will give you <code>TRE123 Automation Admin</code>. <code>--reset-password</code> Optional, default is 0. When run in a headless fashion, 1 is passed in to always reset the password."},{"location":"tre-admins/identities/test-account/#create-this-application-from-the-portal-optional","title":"Create this application from the portal (optional)","text":"<p>To create an application registration for automation, open the Microsoft Entra ID tenant for your TRE in the portal and navigate to \"App Registrations\". Click \"New registration\" as shown in the image below.</p> <p></p> <p>Enter a name for the application registration and click \"Register\".</p> <p></p> <p>On the app registration \"Overview\" page, copy the \"Application (client) ID\" value and save it for later.</p> <p></p> <p>Under \"Manage\", click on \"Certificates &amp; secrets\" and then \"New client secret\"</p> <p></p> <p>Add a description and create the client secret. Once done, the secret value will be displayed (as shown below). Copy this value and save it for later as you cannot retrieve it again after closing this page.</p> <p></p>"},{"location":"tre-admins/identities/test-account/#add-api-permissions","title":"Add API Permissions","text":"<p>After creating the automation application registration, it needs to be granted permissions to access the TRE API. Navigate to the API permissions page for the application registration and click \"Add a permission\"</p> <p></p> <p>Next, click on the \"My APIs\" tab, and then on \"TRE API\" On the \"Delegated permissions\" section, select \"user_impersonation\".</p> <p></p> <p>On the \"Application permissions\" section, select \"TRE Administrators\".</p> <p></p> <p>Back on the main permissions page, click on \"Grant admin consent\". Once done, you should see \"Granted\" in the \"Status\" column, as shown below.</p> <p></p>"},{"location":"tre-admins/identities/workspace/","title":"Workspace Applications","text":""},{"location":"tre-admins/identities/workspace/#purpose","title":"Purpose","text":"<p>Access to workspaces is also controlled using app registrations - one per workspace. The configuration of the app registration depends on the nature of the workspace, but this section covers the typical minimum settings.</p>"},{"location":"tre-admins/identities/workspace/#application-roles","title":"Application Roles","text":"Display name Description Allowed member types Value Workspace Owner Provides workspace owners access to the Workspace. Users/Groups,Applications <code>WorkspaceOwner</code> Workspace Researcher Provides researchers access to the Workspace. Users/Groups,Applications <code>WorkspaceResearcher</code> Airlock Manager Provides airlock managers access to the Workspace and ability to review airlock requests. Users/Groups,Applications <code>AirlockManager</code>"},{"location":"tre-admins/identities/workspace/#microsoft-graph-permissions","title":"Microsoft Graph Permissions","text":"Name Type* Admin consent required TRE usage email Delegated No Used to read the user's email address when creating TRE resources openid Delegated No Allows users to sign in to the app with their work or school accounts and allows the app to see basic user profile information. profile Delegated No Used to read the user's profile when creating TRE resources <p>'*' See the difference between delegated and application permission types. See Microsoft Graph permissions reference for more details.</p>"},{"location":"tre-admins/identities/workspace/#clients","title":"Clients","text":"<p>This identity should only be used by the API Application.</p>"},{"location":"tre-admins/identities/workspace/#how-to-create","title":"How to create","text":"<p>There are two mechanisms for creating Workspace Applications - Manually by your Microsoft Entra ID Tenant Admin (default) - Automatically by TRE. Please see this guide if you wish this to be automatic.</p> <p>Caution</p> <p>By default, the app registration for a workspace is not created by the API. One needs to be present before using the API to provision a new workspace. If you ran <code>make auth</code>, a workspace AD application was created for you. If you wish to create another, the same script can be used to create the Workspace Application.</p> <p>Example on how to run the script:</p> <pre><code>  ./devops/scripts/aad/create_workspace_application.sh \\\n    --name \"${TRE_ID} - workspace 11\" \\\n    --admin-consent \\\n    --ux-clientid \"${SWAGGER_UI_CLIENT_ID}\" \\\n    --automation-clientid \"${TEST_ACCOUNT_CLIENT_ID}\" \\\n    --application-admin-clientid \"${APPLICATION_ADMIN_CLIENT_ID}\"\n</code></pre> Argument Description <code>--name</code> The name of the application. This will be suffixed with 'API' by the script. <code>--ux-clientid</code> This value is one of the outputs when you first ran the script. It is mandatory if you use admin-consent. <code>--admin-consent</code> Grants admin consent for the app registrations. This is required for them to function properly, but requires Microsoft Entra ID admin privileges. <code>--automation-clientid</code> This is an optional parameter but will grant the Automation App (created in step 1) permission to the new workspace app. <code>--application-admin-clientid</code> This is a required parameter , and should be a client id that will be added to the Owners of the Microsoft Entra ID Application so that it can be administered within TRE. <code>--reset-password</code> Optional, default is 0. When run in a headless fashion, 1 is passed in to always reset the password. <p>Caution</p> <p>The script will create an app password (client secret) for the workspace and write to <code>/config.yaml</code> under the authentication section. These values are only shown once, if you lose them, the script will create new secrets if run again.</p> <p>If you do not wish to grant the Automation App permission to your workspace, just remove the <code>--automation-clientid</code> from the command.</p>"},{"location":"tre-admins/identities/workspace/#environment-variables","title":"Environment Variables","text":"Variable Description Location WORKSPACE_API_CLIENT_ID The Client Id <code>./config.yaml</code> WORKSPACE_API_CLIENT_SECRET The client secret <code>./config.yaml</code>"},{"location":"tre-admins/identities/workspace/#comments","title":"Comments","text":"<p>When the Workspace Microsoft Entra ID app is registered by running <code>make auth</code>, the <code>Workspace Scope Id</code> is the same as the Client Id. When the Workspace Microsoft Entra ID app is created by the base workspace, the <code>Workspace Scope Id</code> will be in this format <code>api://&lt;TRE_ID&gt;_ws_&lt;WORKSPACE_SHORT_IDENTIFIER&gt;</code></p>"},{"location":"tre-admins/setup-instructions/","title":"Getting Started","text":"<p>This section provide the guidelines for any engineer to deploy AzureTRE. This how-to will enable one to get familiar with a TRE deployment and its concepts.</p> <p>Tip</p> <p>For troubleshooting purpose make sure to check the Troubleshooting FAQ.</p>"},{"location":"tre-admins/setup-instructions/ad-tenant-choices/","title":"Microsoft Entra ID Tenant Choices","text":""},{"location":"tre-admins/setup-instructions/ad-tenant-choices/#dedicated-tenant-for-tre","title":"Dedicated Tenant for TRE","text":"<p>We recommend that you have a dedicated Tenant for your TRE rather than using your corporate tenant. This is because TRE is able to automate some of the AD Tenant Admin tasks for you. In order to do this, there is an Admin User that has the ability to create AD Applications. This would not be normal for a Corporate Tenant.</p> <p>Users from your corporate tenant can be guested into this new TRE tenant.</p> <p></p>"},{"location":"tre-admins/setup-instructions/ad-tenant-choices/#corporate-tenant","title":"Corporate Tenant","text":"<p>It is possible to use your corporate tenant for TRE. This does have the advantage of only managing a single tenant, but your Microsoft Entra ID Tenant Admin must be aware of what TRE brings to your organization and must be prepared to carry out some admin tasks, like creating an Microsoft Entra ID Application every time a new Workspace is created.</p> <p></p>"},{"location":"tre-admins/setup-instructions/ad-tenant-choices/#create-dedicated-microsoft-entra-id-tenant","title":"Create Dedicated Microsoft Entra ID Tenant","text":"<p>Follow this guide to create new dedicated tenant.</p>"},{"location":"tre-admins/setup-instructions/ad-tenant-choices/#next-steps","title":"Next steps","text":"<ul> <li>Setup Auth configuration</li> </ul>"},{"location":"tre-admins/setup-instructions/cicd-deployment/","title":"Pipelines","text":"<p>The AzureTRE deployment repository contains the following github workflows:</p> <ol> <li>Build Validation - validates the code by running linter and terraform validation.</li> <li>Clean Validation Environments - a periodical workflow to clean unused AzureTRE environments.</li> <li>Deploy Azure TRE (branch) - This workflow is intended to be used to test workflow changes. It deploys AzureTRE using the workflows defined on the branch</li> <li>Deploy Azure TRE - This workflow is the integration build run for pushes to the main branch. It also runs on a schedule, serving as the nightly build to keep the main AzureTRE env in sync.</li> <li>Deploy Azure TRE Reusable - responsible to deploy AzureTRE. It is referenced in other Azure TRE deployment workflows.</li> </ol>"},{"location":"tre-admins/setup-instructions/cicd-deployment/#setup-github-environment","title":"Setup Github Environment","text":"<p>The workflows are using Github environment to source its environment variables. Follow this guide to define it in your github repository and provide it as an input for the workflows.</p> <p>The following environment variables should be defined in your github environment:</p> <ol> <li>Auth env vars</li> <li>Core and Devops env vars</li> </ol> <p>Having all the environment variables set in the Github environment the next step will be to use it in your pipelines:</p> <p>In AzureTRE deployment repository You will find all the pipelines under the folder <code>.github/workflows</code> on top of each workflow there is the workflow inputs part where the used Github environment name is set, make sure to update it with yours, for example:</p> <p></p>"},{"location":"tre-admins/setup-instructions/cicd-deployment/#publish-custom-templates-in-pipelines","title":"Publish Custom Templates in Pipelines","text":"<p>If you have created custom AzureTRE templates you can publish and register them as part of the CI/CD pipelines. To do so go to <code>.github/workflows/deploy_tre_reusable.yml</code> workflow and add your template under the following jobs:</p> <ol> <li>publish_bundles     </li> <li>register_bundles     </li> <li>If it is a user resource add it also under register_user_resource_bundles     </li> </ol>"},{"location":"tre-admins/setup-instructions/cicd-deployment/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/","title":"Pre-deployment steps","text":""},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#setup-github-environment","title":"Setup Github Environment","text":"<p>The workflows are using Github environment to source its environment variables. Follow this guide to define it in your github repository and provide it as an input for the workflows.</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#github-actions-workflows-cicd","title":"GitHub Actions workflows (CI/CD)","text":"<p>Deployment is done using the <code>/.github/workflows/deploy_tre.yml</code> workflow. This method is also used to deploy the dev/test environment for the original Azure TRE repository.</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#setup-instructions","title":"Setup instructions","text":"<p>Before you can run the <code>deploy_tre.yml</code> workflow there are some one-time configuration steps that we need to do, similar to the Pre-deployment steps for manual deployment.</p> <ol> <li>Create a service principal for the subscription so that the workflow can provision Azure resources.</li> <li>Decide on a TRE ID and the location for the Azure resources</li> <li>Create a Teams WebHook for deployment notifications</li> <li>Configure repository secrets</li> <li>Deploy the TRE using the workflow</li> </ol>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#create-a-service-principal-for-provisioning-resources","title":"Create a service principal for provisioning resources","text":"<ol> <li> <p>Login to Azure</p> <p>Log in to Azure using <code>az login</code> and select the Azure subscription you wish to deploy Azure TRE to:</p> <pre><code>az login\naz account list\naz account set --subscription &lt;subscription ID&gt;\n</code></pre> <p>See Sign in with Azure CLI for more details.</p> </li> <li> <p>Create a service principal</p> <p>A service principal needs to be created to authorize CI/CD workflows to provision resources for the TRE workspaces and workspace services.</p> <p>Create a main service principal with \"Owner\" role:</p> <pre><code>az ad sp create-for-rbac --name \"sp-aztre-cicd\" --role Owner --scopes /subscriptions/&lt;subscription_id&gt; --sdk-auth\n</code></pre> <p>Caution</p> <p>Save the JSON output locally - as you will need it later for setting secrets in the build</p> </li> <li> <p>Create a secret in your github environment named <code>AZURE_CREDENTIALS</code> and use the JSON output from the previous step as its value. Note it should look similar to this: <pre><code>{\n  \"clientId\": \"\",\n  \"clientSecret\": \"\",\n  \"subscriptionId\": \"\",\n  \"tenantId\": \"\"\n}\n</code></pre></p> </li> </ol>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#configure-core-secrets","title":"Configure Core Secrets","text":"<p>Configure the following secrets in your github environment:</p> Secret name Description <code>TRE_ID</code> A globally unique identifier. <code>TRE_ID</code> can be found in the resource names of the Azure TRE instance; for example, a <code>TRE_ID</code> of <code>tre-dev-42</code> will result in a resource group name for Azure TRE instance of <code>rg-tre-dev-42</code>. This must be less than 12 characters. Allowed characters: lowercase alphanumerics. <code>MGMT_RESOURCE_GROUP_NAME</code> The name of the shared resource group for all Azure TRE core resources. <code>MGMT_STORAGE_ACCOUNT_NAME</code> The name of the storage account to hold the Terraform state and other deployment artifacts. E.g. <code>mystorageaccount</code>. <code>ACR_NAME</code> A globally unique name for the Azure Container Registry (ACR) that will be created to store deployment images. <code>EXTERNAL_KEY_STORE_ID</code> Optional. The ID of the external Key Vault to store CMKs in. Should not be set if <code>ENCRYPTION_KV_NAME</code> is set and only required if <code>ENABLE_CMK_ENCRYPTION</code> is true. <code>ENCRYPTION_KV_NAME</code> Optional. The name of the Key Vault for encryption keys. Should not be set if <code>EXTERNAL_KEY_STORE_ID</code> is set and only required if <code>ENABLE_CMK_ENCRYPTION</code> is true."},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#configure-core-variables","title":"Configure Core Variables","text":"<p>Configure the following variables in your github environment:</p> Variable name Description <code>LOCATION</code> The Azure location (region) for all resources. E.g. <code>westeurope</code> <code>TERRAFORM_STATE_CONTAINER_NAME</code> Optional. The name of the blob container to hold the Terraform state. Default value is <code>tfstate</code>. <code>CORE_ADDRESS_SPACE</code> Optional. The address space for the Azure TRE core virtual network. Default value is <code>10.0.0.0/22</code>. <code>TRE_ADDRESS_SPACE</code> Optional. The address space for the whole TRE environment virtual network where workspaces networks will be created (can include the core network as well). Default value is <code>10.0.0.0/16</code> <code>AZURE_ENVIRONMENT</code> Optional. The name of the Azure environment. Supported values are <code>AzureCloud</code> and <code>AzureUSGovernment</code>. Default value is <code>AzureCloud</code>. <code>CORE_APP_SERVICE_PLAN_SKU</code> Optional. The SKU used for AppService plan for core infrastructure. Default value is <code>P1v2</code>. <code>WORKSPACE_APP_SERVICE_PLAN_SKU</code> Optional. The SKU used for AppService plan used in E2E tests. Default value is <code>P1v2</code>. <code>RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE</code> Optional. The number of processes to instantiate when the Resource Processor starts. Equates to the number of parallel deployment operations possible in your TRE. Defaults to <code>5</code>. <code>ENABLE_SWAGGER</code> Optional. Determines whether the Swagger interface for the API will be available. Default value is <code>false</code>. <code>FIREWALL_SKU</code> Optional. The SKU of the Azure Firewall instance. Default value is <code>Standard</code>. Allowed values [<code>Basic</code>, <code>Standard</code>, <code>Premium</code>]. See Azure Firewall SKU feature comparison. <code>APP_GATEWAY_SKU</code> Optional. The SKU of the Application Gateway. Default value is <code>Standard_v2</code>. Allowed values [<code>Standard_v2</code>, <code>WAF_v2</code>] <code>CUSTOM_DOMAIN</code> Optional. Custom domain name to access the Azure TRE portal. See Custom domain name. <code>ENABLE_CMK_ENCRYPTION</code> Optional. Default is <code>false</code>, if set to <code>true</code> customer-managed key encryption will be enabled for all supported resources."},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#configure-authentication-secrets","title":"Configure Authentication Secrets","text":"<p>In a previous Setup Auth configuration step authentication configuration was added in <code>config.yaml</code> file. Go to this file and add those env vars to your github environment:</p> Secret Name Description <code>AAD_TENANT_ID</code> Tenant id against which auth is performed. <code>APPLICATION_ADMIN_CLIENT_ID</code> This client will administer Microsoft Entra ID Applications for TRE <code>APPLICATION_ADMIN_CLIENT_SECRET</code> This client will administer Microsoft Entra ID Applications for TRE <code>TEST_ACCOUNT_CLIENT_ID</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>TEST_ACCOUNT_CLIENT_SECRET</code> This will be created by default, but can be disabled by editing <code>/devops/scripts/create_aad_assets.sh</code>. This is the user that will run the tests for you <code>API_CLIENT_ID</code> API application (client) ID. <code>API_CLIENT_SECRET</code> API application client secret. <code>SWAGGER_UI_CLIENT_ID</code> Swagger (OpenAPI) UI application (client) ID. <code>TEST_WORKSPACE_APP_ID</code> Each workspace is secured behind it's own AD Application. Use the value of <code>WORKSPACE_API_CLIENT_ID</code> created in the <code>/config.yaml</code> env file <code>TEST_WORKSPACE_APP_SECRET</code> Each workspace is secured behind it's own AD Application. This is the secret for that application. Use the value of <code>WORKSPACE_API_CLIENT_SECRET</code> created in the <code>/config.yaml</code> env file"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#create-a-teams-webhook-for-deployment-notifications","title":"Create a Teams Webhook for deployment notifications","text":"<p>The <code>deploy_tre.yml</code> workflow sends a notification to a Microsoft Teams channel when it finishes running.</p> <p>Note</p> <p>If you don't want to notify a channel, you can also remove the Notify dedicated teams channel steps in the workflow</p> <ol> <li> <p>Follow the Microsoft Docs to create a webhook for your channel</p> </li> <li> <p>Configure the MS_TEAMS_WEBHOOK_URI repository secret</p> Secret name Description <code>MS_TEAMS_WEBHOOK_URI</code> URI for the Teams channel webhook </li> </ol> <p>Info</p> <p>See Environment variables for full details of the deployment related variables.</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#setup-github-env-in-workflow","title":"Setup Github env in workflow","text":"<p>In your repository you will find that the pipelines under the folder <code>.github/workflows</code> on top of each workflow there is the workflow inputs part where the used Github environment name is set, make sure to update it with yours, for example:</p> <p></p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#deploy-the-tre-using-the-workflow","title":"Deploy the TRE using the workflow","text":"<p>With all the repository secrets set, you can trigger a workflow run by pushing to develop/main of your repo, or by dispatching the workflow manually.</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#run-cicd-on-main-branch-first","title":"Run CI/CD on Main Branch First","text":"<p>It is important to run the CI/CD pipeline on the main branch first. This will create an environment that represents the current main branch. It will also define the <code>CI_CACHE_ACR_NAME</code> used for caching.</p>"},{"location":"tre-admins/setup-instructions/cicd-pre-deployment-steps/#next-steps","title":"Next steps","text":"<ul> <li>Deploying Azure TRE in Pipelines</li> </ul>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/","title":"Configuring Shared Services","text":"<p>In general, a shared service should be installed by using the UI or API directly once its bundle has been registered on the system.</p> <p>As part of this quickstart, you will need to install the Nexus shared service, as you will be subsequently deploying Guacamole VMs that depend on public package respositories to bootstrap. Due to the TRE's Firewall blocking public access, Nexus will proxy these package repositories and make them available within the TRE for the VMs to consume.</p>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#deploy-configure-nexus-service","title":"Deploy &amp; configure Nexus service","text":"<p>Caution</p> <p>Before deploying the Nexus service, you will need workspaces of version <code>0.3.2</code> or above due to a dependency on a DNS zone link for the workspace(s) to connect to the Nexus VM.</p> <p>Before deploying the Nexus shared service, you need to make sure that it will have access to a certificate to configure serving secure proxies. By default, the Nexus service will serve proxies from <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/</code>, and thus it requires a certificate that validates ownership of this domain to use for SSL.</p> <p>You can use the Certs Shared Service to set one up by following these steps:</p> <ol> <li> <p>Run the below command in your terminal to build, publish and register the certs bundle:</p> <pre><code>make shared_service_bundle BUNDLE=certs\n</code></pre> </li> <li> <p>Navigate to the TRE UI, click on Shared Services in the navigation menu and click Create new.</p> </li> <li> <p>Select the Certs template, then fill in the required details. Domain prefix should be set to <code>nexus</code> and Cert name should be <code>nexus-ssl</code>.</p> </li> </ol> <p>Caution</p> <p>If you have KeyVault Purge Protection enabled and are re-deploying your environment using the same <code>cert_name</code>, you may encounter this: <code>Status=409 Code=\\\"Conflict\\\" Message=\\\"Certificate nexus-ssl is currently in a deleted but recoverable state</code>. You need to either manually recover the certificate or purge it before redeploying.</p> <p>Once deployed, the certs service will use Letsencrypt to generate a certificate for the specified domain prefix followed by <code>-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>, so in our case, having entered <code>nexus</code>, this will be <code>nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>, which will be the public domain for our Nexus service.</p> <p>You can verify whether this has been successful by navigating to your core keyvault (<code>kv-{TRE_ID}</code>) and looking for a certificate called <code>nexus-ssl</code> (or whatever you called it).</p> <p>After verifying the certificate has been generated, you can deploy Nexus:</p> <ol> <li> <p>Run the below command in your terminal to build, publish and register the Nexus shared service bundle:</p> <pre><code>make shared_service_bundle BUNDLE=sonatype-nexus-vm\n</code></pre> </li> <li> <p>Navigate back to the TRE UI, and click Create new again within the Shared Services page.</p> </li> <li> <p>Select the Nexus template then fill in the required details. The SSL certificate name should default to <code>nexus-ssl</code>, so there's no need to change it unless you gave it a different name in the previous step.</p> </li> </ol> <p>This will deploy the infrastructure required for Nexus, then start the service and configure it with the repository configurations located in the <code>./templates/shared_services/sonatype-nexus-vm/scripts/nexus_repos_config</code> folder. It will also set up HTTPS using the certificate you generated in the previous section, so proxies can be served at <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>.</p> <p>You can optionally go to the Nexus web interface by visiting <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/</code> in the jumpbox and signing in with the username <code>admin</code> and the password secret located in your core keyvault, with the key <code>nexus-admin-password</code>. Here you should be able to see all of the configured repositories and you can use the UI to manage settings etc.</p> <p>Just bear in mind that if this service is redeployed any changes made in the Nexus UI won't be persisted. If you wish to permanently add new repositories or alter existing ones, modify the JSON files within the <code>./nexus_repos_config</code> directory and redeploy.</p> <p>You can view further information on the Nexus shared service here.</p>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#optional-install-gitea-and-configure-repositories","title":"(Optional) Install Gitea and configure repositories","text":"<p>Gitea allows you to mirror Git repositories to make them available within the TRE. This is optional as part of this quickstart.</p> <p>Note : This is a Gitea shared service which will be accessible from all workspaces intended for mirroring external Git repositories. A Gitea workspace service can also be deployed per workspace to enable Gitea to be used within a specific workspace.</p> <p>To install Gitea, first register the template:</p> <pre><code>  make shared_service_bundle BUNDLE=gitea\n</code></pre> <p>You can then install via the TRE UI in the same way you did for the Nexus bundle.</p> <p>By default, this Gitea instance does not have any repositories configured. You can add repositories to Gitea either by using the command line or by using the Gitea web interface.</p>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#command-line","title":"Command Line","text":"<p>Make sure you run the following commands using git bash and set your current directory as C:/AzureTRE.</p> <ol> <li>On the jumbox, run: <code>./templates/workspace_services/gitea/gitea_migrate_repo.sh -t &lt;tre_id&gt; -g &lt;URL_of_github_repo_to_migrate&gt;</code></li> <li>If you have issues with token or token doesn't work, you can reset the token by setting it's value to null in Key Vault: <code>az keyvault secret set --name gitea-&lt;tre-id&gt;-admin-token --vault-name kv-&lt;tre-id&gt; --value null</code></li> </ol>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#gitea-web-interface","title":"Gitea Web Interface","text":"<ol> <li>on the jumbox, open Edge and go to: <code>https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/</code></li> <li>Authenticate yourself using username <code>giteaadmin</code> and the secret <code>&lt;gitea-TRE_ID-administrator-password&gt;</code> stored in the keyvault,</li> <li>Add the repository of your choice</li> </ol>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#verify-can-access-the-mirrored-repository","title":"Verify can access the mirrored repository","text":"<p>From a virtual machine within a workspace: - Command line: <code>git clone https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/giteaadmin/&lt;NameOfrepository&gt;</code> - Gitea Web Interface: <code>https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/</code></p> <p>More info on the Gitea shared service is available here.</p>"},{"location":"tre-admins/setup-instructions/configuring-shared-services/#next-steps","title":"Next steps","text":"<ul> <li>Install Base Workspace</li> </ul>"},{"location":"tre-admins/setup-instructions/deployment-repo/","title":"AzureTRE Deployment repo","text":"<p>AzureTRE has an OSS deployment repository which you can find here. It contains all the required tooling to develop your custom templates and deploy the Azure TRE:</p> <ul> <li>Github Actions implementing AzureTRE automation, including running deployments to Azure</li> <li>Configuration specific to deployment</li> <li>Directories setup for: workspace, workspace service and user resource template definitions</li> <li>Devcontainer setup</li> </ul>"},{"location":"tre-admins/setup-instructions/deployment-repo/#create-your-own-copy-of-the-azure-tre-deployment-repo","title":"Create your own copy of the Azure TRE deployment repo","text":"<p>To get started with AzureTRE follow the next steps:</p> <p>Note</p> <p>The following steps in this guide should be done using the deployment repo.</p> <ol> <li>Go to AzureTRE Deployment repository</li> <li> <p>Click on use this template to set up your project from this template:</p> <p></p> </li> <li> <p>Follow the steps in this Github templates guide to set up the repo.</p> </li> </ol>"},{"location":"tre-admins/setup-instructions/deployment-repo/#clone-the-azure-tre-deployment-git-repository","title":"Clone the Azure TRE Deployment git repository","text":"<p>Tip</p> <p>If using Windows please clone the repository to a Linux file system, i.e. to <code>/xxx</code> rather than <code>c:\\</code>, for example within Windows Subsytem for Linux. If you clone the repository to a Windows file system you will likely hit issues with file permissions as described in this issue: https://github.com/microsoft/AzureTRE/issues/1395</p> <pre><code>git clone https://github.com/&lt;your_username&gt;/AzureTRE-Deployment.git\n</code></pre> <ol> <li> <p>Open the cloned repository in Visual Studio Code and connect to the development container.</p> <pre><code>code .\n</code></pre> </li> </ol> <p>Tip</p> <p>Visual Studio Code should recognize the available development container and ask you to open the folder using it. For additional details on connecting to remote containers, please see the Open an existing folder in a container quickstart.</p> <p>When you start the development container for the first time, the container will be built. This usually takes a few minutes. Please use the development container for all further steps.</p>"},{"location":"tre-admins/setup-instructions/deployment-repo/#next-steps","title":"Next steps","text":"<ul> <li>AD Tenant Choices</li> </ul>"},{"location":"tre-admins/setup-instructions/installing-base-workspace/","title":"Installing base workspace","text":""},{"location":"tre-admins/setup-instructions/installing-base-workspace/#publishing-and-registering-the-base-workspace-bundle","title":"Publishing and registering the base workspace bundle","text":"<p>Run the following in a terminal to build, publish and register the base workpace bundle:</p> <pre><code>make workspace_bundle BUNDLE=base\n</code></pre> <p>This will prepare the template for use with your TRE.</p>"},{"location":"tre-admins/setup-instructions/installing-base-workspace/#creating-a-base-workspace","title":"Creating a base workspace","text":"<p>Now that we have published and registered a base workspace bundle we can use the deployed API to create a base workspace.</p> <p>Info</p> <p>All routes are auth protected. Click the green Authorize button to receive a token for Swagger client.</p> <p>As explained in the auth guide, every workspace has a corresponding app registration which if you haven't run <code>make auth</code>; can be created using the helper script <code>./devops/scripts/aad/create_workspace_application.sh</code>. For example:</p> <pre><code>  ./devops/scripts/aad/create_workspace_application.sh \\\n    --name \"${TRE_ID} - workspace 1\" \\\n    --admin-consent \\\n    --ux-clientid \"${SWAGGER_UI_CLIENT_ID}\" \\\n    --automation-clientid \"${TEST_ACCOUNT_CLIENT_ID}\" \\\n    --application-admin-clientid \"${APPLICATION_ADMIN_CLIENT_ID}\"\n</code></pre> <p>Caution</p> <p>If you're using a separate tenant for Microsoft Entra ID app registrations to the one where you've deployed the TRE infrastructure resources, ensure you've signed into that tenant in the <code>az cli</code> before running the above command. See Using a separate Microsoft Entra ID tenant in Setup Auth configuration for more details.</p> <p>Running the script will report <code>workspace_api_client_id</code> and <code>workspace_api_client_secret</code> for the generated app. Add these under the authenrication section in <code>/config.yaml</code> so that automated testing will work. You also need to use <code>workspace_api_client_id</code> in the POST body below.</p>"},{"location":"tre-admins/setup-instructions/installing-base-workspace/#create-workspace-using-the-api","title":"Create workspace using the API","text":"<p>Go to <code>https://&lt;azure_tre_fqdn&gt;/api/docs</code> and use POST <code>/api/workspaces</code> with the sample body to create a base workspace.</p> <pre><code>{\n  \"templateName\": \"tre-workspace-base\",\n  \"properties\": {\n    \"display_name\": \"manual-from-swagger\",\n    \"description\": \"workspace for team X\",\n    \"client_id\":\"&lt;WORKSPACE_API_CLIENT_ID&gt;\",\n    \"client_secret\":\"&lt;WORKSPACE_API_CLIENT_SECRET&gt;\",\n    \"address_space_size\": \"medium\"\n  }\n}\n</code></pre> <p>The API will return an <code>operation</code> object with a <code>Location</code> header to query the operation status, as well as the <code>resourceId</code> and <code>resourcePath</code> properties to query the resource under creation.</p> <p>You can also follow the progress in Azure portal as various resources come up.</p> <p>Workspace level operations can now be carried out using the workspace API, at <code>/api/workspaces/&lt;workspace_id&gt;/docs/</code>.</p>"},{"location":"tre-admins/setup-instructions/installing-base-workspace/#next-steps","title":"Next steps","text":"<ul> <li>Installing a workspace service &amp; user resources</li> </ul>"},{"location":"tre-admins/setup-instructions/installing-workspace-service-and-user-resource/","title":"Installing workspace service and user resource","text":""},{"location":"tre-admins/setup-instructions/installing-workspace-service-and-user-resource/#publish-and-register-a-workspace-service-template","title":"Publish and register a workspace service template","text":"<p>We will use the Guacamole workspace service bundle for the purposes of this tutorial; a template that provides Virtual Desktop functionality allowing the deployment of VMs for users. These steps can be repeated for any workspace service template depending on the functionalities required.</p> <ol> <li>Run:<pre><code>make workspace_service_bundle BUNDLE=guacamole\n</code></pre> </li> </ol>"},{"location":"tre-admins/setup-instructions/installing-workspace-service-and-user-resource/#publish-and-register-a-user-resource-template","title":"Publish and register a user resource template","text":"<p>The Guacamole workspace service also has user resources: the VMs that researchers will deploy. These steps can be repeated for any user resource template.</p> <ol> <li>Run:<pre><code>make user_resource_bundle BUNDLE=guacamole-azure-windowsvm WORKSPACE_SERVICE=guacamole\n</code></pre> </li> </ol>"},{"location":"tre-admins/setup-instructions/installing-workspace-service-and-user-resource/#creating-a-workspace-service","title":"Creating a workspace service","text":"<p>Now that we have published and registered both workspace service and user resource bundles we can use the workspace API to create a workspace service in our workspace.</p> <ol> <li>Navigate to the Swagger UI at <code>https://&lt;azure_tre_fqdn&gt;/api/workspaces/&lt;workspace_id&gt;/docs</code> . Where <code>&lt;workspace_id&gt;</code> is the workspace ID of the workspace created in the previous step.</li> </ol> <p>Info</p> <p>All routes are auth protected. Click the green Authorize button to receive a token for Swagger client.</p> <ol> <li>Log into the Swagger UI by clicking <code>Authorize</code>, then <code>Authorize</code> again. You will be redirected to the login page.</li> </ol> <p>Info</p> <p>You need to log in with a user with assigned the WorkspaceOwner role in the app regsitration used when deploying your workspace.</p> <ol> <li> <p>Once logged in, click <code>Try it out</code> on the <code>POST</code> <code>/api/workspaces/&lt;workspace_id&gt;/workspace-services</code> operation.</p> </li> <li> <p>Enter the workspace_id in the <code>workspace_id</code> field.</p> </li> <li> <p>Paste the following payload json into the <code>Request body</code> field. Then click <code>Execute</code>. Review the server response.</p> <pre><code>{\n  \"templateName\": \"tre-service-guacamole\",\n  \"properties\": {\n    \"display_name\": \"Virtual Desktop\",\n    \"description\": \"Create virtual desktops for running research workloads\",\n    \"is_exposed_externally\": true,\n    \"guac_disable_copy\": true,\n    \"guac_disable_paste\": true\n  }\n}\n</code></pre> </li> </ol> <p>The API will return an <code>operation</code> object with a <code>Location</code> header to query the operation status, as well as the <code>resourceId</code> and <code>resourcePath</code> properties to query the resource under creation. Record this ID for later use.</p> <p>You can also follow the progress in Azure portal as various resources come up.</p> <p>Info</p> <p>There is currently a bug where the redirect URI isn't automatically set up correctly in the Workspace API app registration. Until this is fixed, you need to head to the app registration in the Azure portal, click on Add a redirect URI &gt; Add a platform &gt; Web &gt; then paste in the Guacamole URI in the redirect URI box. You can find this in the Guacamole app service properties and append <code>/oauth2/callback</code> to the end - it should look like this: <code>https://guacamole-{TRE_ID}-ws-XXXX-svc-XXXX.azurewebsites.net/oauth2/callback/</code>). Finally, make sure you check the ID tokens checkbox and click Configure.</p>"},{"location":"tre-admins/setup-instructions/installing-workspace-service-and-user-resource/#creating-a-user-resource","title":"Creating a user resource","text":"<p>Once the workspace service has been created, we can use the workspace API to create a user resource in our workspace.</p> <p>Caution</p> <p>Before deploying Guacamole user resources, you will want to make sure you have a Nexus shared service deployed in the workspace so that your VMs can access package repositories through a proxy (as they can't access public repositories directly). See Configuring shared services.</p> <ol> <li> <p>Navigate to the Swagger UI at <code>https://&lt;azure_tre_fqdn&gt;/api/workspaces/&lt;workspace_id&gt;/docs</code> . Where <code>&lt;workspace_id&gt;</code> is the workspace ID of your workspace.</p> </li> <li> <p>Click <code>Try it out</code> on the <code>POST</code> <code>/api/workspaces/&lt;workspace_id&gt;/workspace-services/&lt;service_id&gt;/user_resources</code> operation. Where <code>&lt;workspace_id&gt;</code> and <code>&lt;service_id&gt;</code> are the workspace ID of your workspace and workspace service ID of your workspace service.</p> </li> <li> <p>Enter the workspace ID and workspace service id in the <code>workspace_id</code> and <code>service_id</code> fields.</p> </li> <li> <p>Paste the following payload json into the <code>Request body</code> field, then click <code>Execute</code>. Review the server response.</p> <pre><code>{\n  \"templateName\": \"tre-service-guacamole-windowsvm\",\n  \"properties\": {\n    \"display_name\": \"My VM\",\n    \"description\": \"Will be using this VM for my research\",\n    \"os_image\": \"Server 2019 Data Science VM\",\n    \"nexus_version\": \"V2\"\n  }\n}\n</code></pre> <p>Note: You can also specify \"Windows 10\" in \"os_image\" for a standard Windows 10 image.</p> </li> </ol> <p>The API will return an <code>operation</code> object with a <code>Location</code> header to query the operation status, as well as the <code>resourceId</code> and <code>resourcePath</code> properties to query the resource under creation.</p> <p>You can also follow the progress in Azure portal as various resources come up. Once deployment has completed you can connect to the user resource using the <code>connection_uri</code> property returned by the API.</p>"},{"location":"tre-admins/setup-instructions/manual-deployment/","title":"Deploying Azure TRE","text":"<p>You are now ready to deploy the Azure TRE instance. Execute the <code>all</code> action of the makefile using <code>make</code>:</p> <pre><code>make all\n</code></pre> <p>Deploying a new Azure TRE instance takes approximately 30 minutes.</p> <p>Once the deployment is completed, you will be presented with a few output variables similar to the ones below:</p> <pre><code>app_gateway_name = \"agw-mytre\"\nazure_tre_fqdn = \"mytre.westeurope.cloudapp.azure.com\"\ncore_resource_group_name = \"rg-mytre\"\nkeyvault_name = \"kv-mytre\"\nlog_analytics_name = \"log-mytre\"\nstatic_web_storage = \"stwebmytre\"\n</code></pre> <p>The Azure TRE instance is initially deployed with an invalid self-signed SSL certificate. This certificate needs to be replaced with one valid for your configured domain name. To use a certificate from Let's Encrypt, run the command:</p> <pre><code>make letsencrypt\n</code></pre> <p>Caution</p> <p>There are rate limits with Let's Encrypt, so this should not be run when not needed.</p> <p>Info</p> <p>If you're using Codespaces, you'll encounter a bug when trying to run <code>make letsencrypt</code> where the incorrect IP will be whitelisted on the storage account and Codespaces won't be able to upload the test file due to a 403 error. The workaround until this is fixed is to temporarily disable the firewall on your <code>stweb{TRE_ID}</code> storage account before running the script, then re-enable afterwards.</p>"},{"location":"tre-admins/setup-instructions/manual-deployment/#validate-the-deployment","title":"Validate the deployment","text":""},{"location":"tre-admins/setup-instructions/manual-deployment/#using-curl","title":"Using curl","text":"<p>Use <code>curl</code> to make a simple request to the health endpoint of the API:</p> <pre><code>curl https://&lt;azure_tre_fqdn&gt;/api/health\n</code></pre> <p>The expected response is:</p> <pre><code>{\n  \"services\": [\n    {\n      \"service\": \"Cosmos DB\",\n      \"status\": \"OK\",\n      \"message\": \"\"\n    },\n    {\n      \"service\": \"Service Bus\",\n      \"status\": \"OK\",\n      \"message\": \"\"\n    },\n    {\n      \"service\": \"Resource Processor\",\n      \"status\": \"OK\",\n      \"message\": \"\"\n    }\n  ]\n}\n</code></pre>"},{"location":"tre-admins/setup-instructions/manual-deployment/#using-the-api-docs","title":"Using the API docs","text":"<p>Open your browser and navigate to the <code>/api/docs</code> route of the API:  <code>https://&lt;azure_tre_fqdn&gt;/api/docs</code> and click <code>Try it out</code> on the operation of choice.</p> <p></p>"},{"location":"tre-admins/setup-instructions/manual-deployment/#next-steps","title":"Next steps","text":"<ul> <li>Configure Shared Services</li> <li>Enable users to access the Azure TRE instance</li> </ul>"},{"location":"tre-admins/setup-instructions/manual-pre-deployment-steps/","title":"Pre-deployment steps","text":"<p>Info</p> <p>See Environment variables for full details of the deployment related variables.</p>"},{"location":"tre-admins/setup-instructions/manual-pre-deployment-steps/#set-environment-configuration-variables-of-shared-management-resources","title":"Set environment configuration variables of shared management resources","text":"<ol> <li> <p>In this part we will setup configuration variables in <code>config.yaml</code> file for the shared management infrastructure which is used to support the deployment of one or more Azure TRE instances.</p> </li> <li> <p>Provide the values for the following variables:</p> Variable Description <code>location</code> The Azure location (region) for all resources. E.g., <code>westeurope</code> <code>mgmt_resource_group_name</code> The shared resource group for all management resources, including the storage account. <code>mgmt_storage_account_name</code> The name of the storage account to hold the Terraform state and other deployment artifacts. <code>acr_name</code> A globally unique name for the Azure Container Registry (ACR) that will be created to store deployment images. <code>arm_subscription_id</code> The Azure subscription ID for all resources. <p>Tip</p> <p>To retrieve your Azure subscription ID, use the <code>az</code> command line interface available in the development container. In the terminal window in Visual Studio Code, type <code>az login</code> followed by <code>az account show</code> to see your default subscription. Please refer to <code>az account -help</code> for further details on how to change your active subscription.</p> </li> </ol> <p>The rest of the variables can have their default values. You should now have a management section in the <code>config.yaml</code> file that looks similar to the one below:</p> <pre><code>  management:\n    location: westeurope\n    mgmt_resource_group_name: aztremgmt\n    mgmt_storage_account_name: aztremgmt\n    terraform_state_container_name: tfstate\n    acr_name: aztreacr\n    # Azure Resource Manager credentials used for CI/CD pipelines\n    arm_subscription_id: 12...54e\n    # If you want to override the currently signed in credentials\n    # You would do this if running commands like `make terraform-install DIR=./templates/workspaces/base`\n    # arm_tenant_id: __CHANGE_ME__\n    # arm_client_id: __CHANGE_ME__\n    # arm_client_secret: __CHANGE_ME__\n</code></pre> <p>3. If you want to disable the built-in web UI (<code>./ui</code>) ensure you set <code>deploy_ui=false</code> under tre defaults section in the <code>config.yaml</code> file.</p>"},{"location":"tre-admins/setup-instructions/manual-pre-deployment-steps/#next-steps","title":"Next steps","text":"<ul> <li>Deploying Azure TRE</li> </ul>"},{"location":"tre-admins/setup-instructions/prerequisites/","title":"Prerequisites","text":"<p>To deploy an Azure TRE instance, the following assets and tools are required:</p> <ul> <li>Azure subscription</li> <li>Microsoft Entra ID tenant in which you can create application registrations</li> <li>Git client such as Git or GitHub Desktop</li> <li>Docker Desktop</li> </ul>"},{"location":"tre-admins/setup-instructions/prerequisites/#development-container","title":"Development container","text":"<p>The Azure TRE solution contains a development container with all the required tooling to develop and deploy the Azure TRE. To deploy an Azure TRE instance using the provided development container you will also need:</p> <ul> <li>Visual Studio Code</li> <li>Remote containers extension for Visual Studio Code</li> </ul> <p>The files for the dev container are located in <code>/.devcontainer/</code> folder.</p> <p>Tip</p> <p>An alternative of running the development container locally is to use GitHub Codespaces.</p> <p>Warning</p> <p>The procedures described throughout the documentation have been tested using machines with amd64 architecture CPUs. We have limited access to machines with other CPU architectures and issues may be encountered if those are used.</p>"},{"location":"tre-admins/setup-instructions/prerequisites/#next-steps","title":"Next steps","text":"<ul> <li>AzureTRE Deployment Repository</li> </ul>"},{"location":"tre-admins/setup-instructions/setup-auth-entities/","title":"Setup Auth configuration","text":"<p>Next, you will set the configuration variables for the specific Azure TRE instance:</p> <ol> <li> <p>Open the <code>/config.sample.yaml</code> file and then save it without the .sample extension. You should now have a file called <code>config.yaml</code> located in the root folder. The file contains configuration variables. In this part you will add the configuration required for the shared management infrastructure which is used to support the deployment of one or more Azure TRE instances.</p> </li> <li> <p>Provide the values for the following variables under management section in your <code>config.yaml</code> file:</p> Variable Description <code>location</code> The Azure location (region) for all resources. E.g., <code>westeurope</code> <code>mgmt_resource_group_name</code> The shared resource group for all management resources, including the storage account. <code>mgmt_storage_account_name</code> The name of the storage account to hold the Terraform state and other deployment artifacts. <code>acr_name</code> A globally unique name for the Azure Container Registry (ACR) that will be created to store deployment images. <code>arm_subscription_id</code> The Azure subscription ID for all resources. <p>!!! tip       To retrieve your Azure subscription ID, use the <code>az</code> command line interface available in the development container. In the terminal window in Visual Studio Code, type <code>az login</code> followed by <code>az account show</code> to see your default subscription. Please refer to <code>az account -help</code> for further details on how to change your active subscription.</p> <p>The rest of the variables can have their default values.</p> </li> <li> <p>Decide on a name for your <code>tre_id</code> ID for the Azure TRE instance. The value will be used in various Azure resources and Microsoft Entra ID application names. It needs to be globally unique and less than 12 characters in length. Use only lowercase alphanumerics. Choose wisely!</p> </li> <li>Once you have decided on which AD Tenant paradigm, then you should be able to set <code>aad_tenant_id</code> in the authentication section in your <code>config.yaml</code> file.</li> <li> <p>Your Microsoft Entra ID Tenant Admin can now use the terminal window in Visual Studio Code to execute the following script from within the development container to create all the Microsoft Entra ID Applications that are used for TRE. The details of the script are covered in the auth document.</p> <pre><code>make auth\n</code></pre> <p>Note</p> <p>Credentials created by the <code>make auth</code> command will be added under the authentication section in your <code>config.yaml</code> file</p> <p>Note</p> <p>In case you have several subscriptions and would like to change your default subscription use <code>az account set --subscription &lt;desired subscription ID&gt;</code></p> <p>Note</p> <p>The full functionality of the script requires directory admin privileges. You may need to contact your friendly Microsoft Entra ID admin to complete this step. The app registrations can be created manually in Azure Portal too. For more information, see Authentication and authorization.</p> </li> </ol> <p>All other variables can have their default values for now.</p>"},{"location":"tre-admins/setup-instructions/setup-auth-entities/#add-admin-user","title":"Add admin user","text":"<p>Make sure the TRE Administrators and TRE Users roles, defined by the API app registration, are assigned to your user and others as required. See Enabling users for instructions.</p>"},{"location":"tre-admins/setup-instructions/ui-install-base-workspace/","title":"Installing base workspace","text":""},{"location":"tre-admins/setup-instructions/ui-install-base-workspace/#publishing-and-registering-the-base-workspace-bundle","title":"Publishing and registering the base workspace bundle","text":"<p>Run the following in a terminal to build, publish and register the base workpace bundle:</p> <pre><code>make workspace_bundle BUNDLE=base\n</code></pre> <p>This will prepare the template for use with your TRE.</p>"},{"location":"tre-admins/setup-instructions/ui-install-base-workspace/#create-base-workspace","title":"Create Base Workspace","text":"<p>Workspace can be easily created via AzureTRE UI. Open a browser and navigate to: <code>https://&lt;TRE_ID&gt;.&lt;LOCATION&gt;.cloudapp.azure.com/</code> (replace TRE_ID and LOCATION with values from previous steps). It will require you to log in, make sure you login with a user who is a TREAdmin.</p> <ol> <li> <p>Select Workspaces -&gt; Create New:</p> <p></p> </li> <li> <p>Click on Create under Base Workspace:</p> <p></p> </li> <li> <p>Fill in the details for your workspace:</p> <ul> <li>General information such as name and description</li> <li>[Optional] Update values for Shared Storage Quota, App Service Plan (SKU) and Address space if needed</li> <li>Workspace Authentication Type - this determines whether you'd like TRE to create an app registration for the workspace automatically, or whether you with to provide an existing one that you've created manually. To read about how to create it manually read the Creating an Application Client for base workspace section below.</li> </ul> </li> <li> <p>After filling the details press submit.</p> <p></p> </li> <li> <p>Select go to resource to see its status:</p> <p></p> </li> <li> <p>Navigate to Operation and wait till changed to deployed:</p> <p></p> </li> </ol> <p>Workspace is now ready to use.</p>"},{"location":"tre-admins/setup-instructions/ui-install-base-workspace/#creating-an-application-client-for-base-workspace","title":"Creating an Application Client for base workspace","text":"<p>As explained in the auth guide, every workspace has a corresponding app registration which if you haven't run <code>make auth</code>; can be created using the helper script <code>./devops/scripts/aad/create_workspace_application.sh</code>. For example:</p> <pre><code>  ./devops/scripts/aad/create_workspace_application.sh \\\n    --name \"${TRE_ID} - workspace 1\" \\\n    --admin-consent \\\n    --ux-clientid \"${SWAGGER_UI_CLIENT_ID}\" \\\n    --automation-clientid \"${TEST_ACCOUNT_CLIENT_ID}\" \\\n    --application-admin-clientid \"${APPLICATION_ADMIN_CLIENT_ID}\"\n</code></pre> <p>Caution</p> <p>If you're using a separate tenant for Microsoft Entra ID app registrations to the one where you've deployed the TRE infrastructure resources, ensure you've signed into that tenant in the <code>az cli</code> before running the above command. See Using a separate Microsoft Entra ID tenant in Setup Auth configuration for more details.</p> <p>Running the script will report <code>WORKSPACE_API_CLIENT_ID</code> and <code>WORKSPACE_API_CLIENT_SECRET</code> for the generated app. Set these under authentication section in <code>config.yaml</code> so that automated testing will work. You also need to use <code>WORKSPACE_API_CLIENT_ID</code> and <code>WORKSPACE_API_CLIENT_SECRET</code> in the form.</p>"},{"location":"tre-admins/setup-instructions/ui-install-base-workspace/#next-steps","title":"Next steps","text":"<ul> <li>Installing a workspace service &amp; user resources</li> </ul>"},{"location":"tre-admins/setup-instructions/ui-install-ws-and-ur/","title":"Installing workspace service and user resource","text":""},{"location":"tre-admins/setup-instructions/ui-install-ws-and-ur/#publish-and-register-a-workspace-service-template","title":"Publish and register a workspace service template","text":"<p>We will use the Guacamole workspace service bundle for the purposes of this tutorial; a template that provides Virtual Desktop functionality allowing the deployment of VMs for users. These steps can be repeated for any workspace service template depending on the functionalities required.</p> <ol> <li>Run:<pre><code>make workspace_service_bundle BUNDLE=guacamole\n</code></pre> </li> </ol>"},{"location":"tre-admins/setup-instructions/ui-install-ws-and-ur/#publish-and-register-a-user-resource-template","title":"Publish and register a user resource template","text":"<p>The Guacamole workspace service also has user resources: the VMs that researchers will deploy. These steps can be repeated for any user resource template.</p> <ol> <li>Run:<pre><code>make user_resource_bundle BUNDLE=guacamole-azure-windowsvm WORKSPACE_SERVICE=guacamole\n</code></pre> </li> </ol>"},{"location":"tre-admins/setup-instructions/ui-install-ws-and-ur/#creating-a-workspace-service","title":"Creating a workspace service","text":"<p>Now that we have published and registered both workspace service and user resource bundles we can use the UI to create a workspace service in our workspace.</p> <ol> <li>In the UI go to the workspace you have created in the previous step and click on <code>Create New</code> under Workspace Services:<p> 2. Choose the Guacamole (Vurtual Desktop) template:    3. Fill in the details:    4. Go to operations tab and wait till the status is deployed:   </p> </li> </ol>"},{"location":"tre-admins/setup-instructions/ui-install-ws-and-ur/#creating-a-user-resource","title":"Creating a user resource","text":"<p>Having published and registered the user resource bundles and a Guacamole workspace service is deployed we can now create the VM user resource the researcher can connect and work on.</p> <p>To create a VM user resource follow the next steps:</p> <ol> <li>Inside the Guacamole workspace service created in a previous step, go to Resources and click on <code>Create New</code>:     </li> <li>Select the VM template and click on <code>Create</code>:     </li> <li>Fill in the details and click on <code>Submit</code>:     </li> <li>Go to the reource:     </li> <li>Wait until the status is deployed. Once deployed you can connect to the VM:     </li> </ol>"},{"location":"tre-admins/setup-instructions/workflows/","title":"GitHub Actions workflows (CI/CD)","text":"<p>To deploy the Azure TRE using GitHub workflows, create a fork of the repository.</p> <p>Deployment is done using the <code>/.github/workflows/deploy_tre.yml</code> workflow. This method is also used to deploy the dev/test environment for the original Azure TRE repository.</p>"},{"location":"tre-admins/setup-instructions/workflows/#setup-instructions","title":"Setup instructions","text":"<p>Before you can run the <code>deploy_tre.yml</code> workflow there are some one-time configuration steps that we need to do, similar to the Pre-deployment steps for manual deployment.</p> <p>Tip</p> <p>In some of the steps below, you are asked to configure repository secrets. Follow the GitHub guide on creating repository secrets if you are unfamiliar with this step.</p> <ol> <li>Create a service principal for the subscription so that the workflow can provision Azure resources.</li> <li>Decide on a TRE ID and the location for the Azure resources</li> <li>Create app registrations for API authentication</li> <li>Create app registrations and a user for the E2E tests</li> <li>Create a workspace app registration for setting up workspaces (for the E2E tests)</li> <li>Create a Teams WebHook for deployment notifications</li> <li>Configure repository secrets</li> <li>Deploy the TRE using the workflow</li> </ol>"},{"location":"tre-admins/setup-instructions/workflows/#create-a-service-principal-for-provisioning-resources","title":"Create a service principal for provisioning resources","text":"<ol> <li> <p>Login to Azure</p> <p>Log in to Azure using <code>az login</code> and select the Azure subscription you wish to deploy Azure TRE to:</p> <pre><code>az login\naz account list\naz account set --subscription &lt;subscription ID&gt;\n</code></pre> <p>See Sign in with Azure CLI for more details.</p> </li> <li> <p>Create a service principal</p> <p>A service principal needs to be created to authorize CI/CD workflows to provision resources for the TRE workspaces and workspace services.</p> <p>Create a main service principal with \"Owner\" role:</p> <pre><code>az ad sp create-for-rbac --name \"sp-aztre-cicd\" --role Owner --scopes /subscriptions/&lt;subscription_id&gt; --sdk-auth\n</code></pre> <p>Caution</p> <p>Save the JSON output locally - as you will need it later for setting secrets in the build</p> </li> <li> <p>Create a repository secret named <code>AZURE_CREDENTIALS</code> and use the JSON output from the previous step as its value. Note it should look similar to this: <pre><code>{\n  \"clientId\": \"\",\n  \"clientSecret\": \"\",\n  \"subscriptionId\": \"\",\n  \"tenantId\": \"\"\n}\n</code></pre></p> </li> </ol>"},{"location":"tre-admins/setup-instructions/workflows/#decide-on-a-tre-id-and-azure-resources-location","title":"Decide on a TRE ID and Azure resources location","text":"<p>Configure the TRE ID and LOCATION repository secrets</p> Secret name Description <code>TRE_ID</code> A globally unique identifier. <code>TRE_ID</code> can be found in the resource names of the Azure TRE instance; for example, a <code>TRE_ID</code> of <code>tre-dev-42</code> will result in a resource group name for Azure TRE instance of <code>rg-tre-dev-42</code>. This must be less than 12 characters. Allowed characters: lowercase alphanumerics. <code>LOCATION</code> The Azure location (region) for all resources. E.g. <code>westeurope</code>"},{"location":"tre-admins/setup-instructions/workflows/#create-app-registrations-for-api-authentication","title":"Create app registrations for API authentication","text":"<p>Follow the instructions to run the app registration script in the Authentication and Authorization document. Use the values for TRE ID and LOCATION from above.</p> <p>Configure the TRE API and Swagger UI repository secrets</p> Secret name Description <code>AAD_TENANT_ID</code> The tenant ID of the Microsoft Entra ID. <code>SWAGGER_UI_CLIENT_ID</code> The application (client) ID of the TRE Swagger UI app. <code>API_CLIENT_ID</code> The application (client) ID of the TRE API app. <code>API_CLIENT_SECRET</code> The application password (client secret) of the TRE API app."},{"location":"tre-admins/setup-instructions/workflows/#create-an-app-registration-and-a-user-for-the-e2e-tests","title":"Create an app registration and a user for the E2E tests","text":"<p>Follow the instructions to create an app registration and a test user for the E2E tests in the Authentication and Authorization document.</p> <p>Configure the E2E Test repository secrets</p> Secret name Description <code>TEST_APP_ID</code> The application (client) ID of the E2E Test app <code>TEST_USER_NAME</code> The username of the E2E Test User <code>TEST_USER_PASSWORD</code> The password of the E2E Test User"},{"location":"tre-admins/setup-instructions/workflows/#create-a-workspace-app-registration-for-setting-up-workspaces-for-the-e2e-tests","title":"Create a workspace app registration for setting up workspaces (for the E2E tests)","text":"<p>Follow the instructions to create a workspace app registration (used for the E2E tests) - and make the E2E test user a WorkspaceOwner for the app registration.</p> <p>Configure the TEST_WORKSPACE_APP_ID repository secret</p> Secret name Description <code>TEST_WORKSPACE_APP_ID</code> The application (client) ID of the Workspaces app. <code>TEST_WORKSPACE_APP_SECRET</code> The application (client) secret of the Workspaces app."},{"location":"tre-admins/setup-instructions/workflows/#create-a-teams-webhook-for-deployment-notifications","title":"Create a Teams Webhook for deployment notifications","text":"<p>The <code>deploy_tre.yml</code> workflow sends a notification to a Microsoft Teams channel when it finishes running.</p> <p>Note</p> <p>If you don't want to notify a channel, you can also remove the Notify dedicated teams channel steps in the workflow</p> <ol> <li> <p>Follow the Microsoft Docs to create a webhook for your channel</p> </li> <li> <p>Configure the MS_TEAMS_WEBHOOK_URI repository secret</p> Secret name Description <code>MS_TEAMS_WEBHOOK_URI</code> URI for the Teams channel webhook </li> </ol>"},{"location":"tre-admins/setup-instructions/workflows/#configure-repositoryenvironment-secrets","title":"Configure repository/environment secrets","text":"<p>Configure additional secrets used in the deployment workflow:</p> Secret name Description <code>TRE_ID</code> A globally unique identifier. <code>TRE_ID</code> can be found in the resource names of the Azure TRE instance; for example, a <code>TRE_ID</code> of <code>tre-dev-42</code> will result in a resource group name for Azure TRE instance of <code>rg-tre-dev-42</code>. This must be less than 12 characters. Allowed characters: lowercase alphanumerics. <code>MGMT_RESOURCE_GROUP_NAME</code> The name of the shared resource group for all Azure TRE core resources. <code>MGMT_STORAGE_ACCOUNT_NAME</code> The name of the storage account to hold the Terraform state and other deployment artifacts. E.g. <code>mystorageaccount</code>. <code>ACR_NAME</code> A globally unique name for the Azure Container Registry (ACR) that will be created to store deployment images. <code>CUSTOM_DOMAIN</code> Optional. Custom domain name to access the Azure TRE portal. See Custom domain name."},{"location":"tre-admins/setup-instructions/workflows/#configure-repositoryenvironment-variables","title":"Configure repository/environment variables","text":"<p>Configure variables used in the deployment workflow:</p> Variable name Description <code>LOCATION</code> The Azure location (region) for all resources. E.g. <code>westeurope</code> <code>TERRAFORM_STATE_CONTAINER_NAME</code> Optional. The name of the blob container to hold the Terraform state. Default value is <code>tfstate</code>. <code>CORE_ADDRESS_SPACE</code> Optional. The address space for the Azure TRE core virtual network. Default value is <code>10.0.0.0/22</code>. <code>TRE_ADDRESS_SPACE</code> Optional. The address space for the whole TRE environment virtual network where workspaces networks will be created (can include the core network as well). Default value is <code>10.0.0.0/16</code> <code>AZURE_ENVIRONMENT</code> Optional. The name of the Azure environment. Supported values are <code>AzureCloud</code> and <code>AzureUSGovernment</code>. Default value is <code>AzureCloud</code>. <code>CORE_APP_SERVICE_PLAN_SKU</code> Optional. The SKU used for AppService plan for core infrastructure. Default value is <code>P1v2</code>. <code>WORKSPACE_APP_SERVICE_PLAN_SKU</code> Optional. The SKU used for AppService plan used in E2E tests. Default value is <code>P1v2</code>. <code>RESOURCE_PROCESSOR_NUMBER_PROCESSES_PER_INSTANCE</code> Optional. The number of processes to instantiate when the Resource Processor starts. Equates to the number of parallel deployment operations possible in your TRE. Defaults to <code>5</code>. <code>ENABLE_SWAGGER</code> Optional. Determines whether the Swagger interface for the API will be available. Default value is <code>false</code>. <code>FIREWALL_SKU</code> Optional. The SKU of the Azure Firewall instance. Default value is <code>Standard</code>. Allowed values [<code>Basic</code>, <code>Standard</code>, <code>Premium</code>]. See Azure Firewall SKU feature comparison. <code>APP_GATEWAY_SKU</code> Optional. The SKU of the Application Gateway. Default value is <code>Standard_v2</code>. Allowed values [<code>Standard_v2</code>, <code>WAF_v2</code>] <code>ENABLE_CMK_ENCRYPTION</code> Optional. Default is <code>false</code>, if set to <code>true</code> customer-managed key encryption will be enabled for all supported resources."},{"location":"tre-admins/setup-instructions/workflows/#deploy-the-tre-using-the-workflow","title":"Deploy the TRE using the workflow","text":"<p>With all the repository secrets set, you can trigger a workflow run by pushing to develop/main of your fork, or by dispatching the workflow manually.</p>"},{"location":"tre-developers/","title":"TRE Developers","text":"<p>This section contains information relevant for developing against Azure TRE. See the topics in the index on the left.</p>"},{"location":"tre-developers/CLI/","title":"TRE CLI","text":"<p>WARNING - this CLI is currently experimental</p> <p>This guide will cover various components of AzureTRE CLI such as installation, login, general command structure and other components that enable operating the CLI.</p>"},{"location":"tre-developers/CLI/#installation","title":"Installation","text":"<p>It is recommended to use CLI within the dev container. It should be installed automatically. To install it manually, run <code>make install-cli</code>.</p>"},{"location":"tre-developers/CLI/#shell-completion","title":"Shell completion","text":"<p>The <code>tre</code> cli supports shell completion. To enable, run <code>source &lt;(_TRE_COMPLETE=bash_source tre)</code> (or add to your profile).</p> <p>Other shells are supported, see the click docs.</p>"},{"location":"tre-developers/CLI/#login","title":"Login","text":"<p>The CLI allows you to log in using either a device code flow or client credentials flow.</p>"},{"location":"tre-developers/CLI/#device-code-flow-interactive","title":"Device code flow (interactive)","text":"<p>To log in using device code flow, run:</p> <pre><code>tre login device-code --base-url https://mytre.westeurope.cloudapp.azure.com/ \n</code></pre> <p>This will prompt you to copy a device code and nagivate to https://microsoft.com/devicelogin to complete the login flow interactively.</p> <p>You can specify <code>--no-verify</code> to disable SSL cert verification.</p> <p>On versions of the API prior to '0.5.7', you will need to pass some additional parameters:</p> <pre><code>tre login device-code \\\n  --base-url https://mytre.westeurope.cloudapp.azure.com/ \\\n  --client-id &lt;API_CLIENT_ID&gt; \\\n  --aad-tenant-id &lt;AAD_TENANT_ID&gt; \\\n  --api-scope &lt;ROOT_API_SCOPE&gt;\n</code></pre> <p>Info</p> <p>the API scope is usually of the form  <code>api://&lt;API_CLIENT_ID&gt;/user_impersonation</code></p> <p>Info</p> <p>when using device code flow, you need to ensure that the app registrations for the root API and any workspaces you access have device code flow enabled. (Automating this is tracked in #2709 )</p>"},{"location":"tre-developers/CLI/#workspace-authentication","title":"Workspace authentication","text":"<p>Since the API scope for each workspace is different, the token returned when authenticating against the root API isn't valid against a workspace. When running interactively, the CLI will prompt you when it needs to reauthenticate for a workspace API.</p> <p>You can pre-emptively get an authentication token for a workspace using the <code>--workspace</code> option. This can be specified multiple times to authenticate against multiple workspaces at once. You can also using <code>--all-workspaces</code> to get a token for all workspaces in one command.</p>"},{"location":"tre-developers/CLI/#client-credentials-service","title":"Client credentials (service)","text":"<p>To log in using client credentials flow (for a service principal), run:</p> <pre><code>tre login client-credentials \\\n  --base-url https://mytre.westeurope.cloudapp.azure.com/ \\\n  --client-id &lt;SERVICE_PRINICPAL_CLIENT_ID&gt; \\\n  --client-secret &lt;SERVICE_PRINCIPAL_CLIENT_SECRET&gt;\n</code></pre> <p>You can specify <code>--no-verify</code> to disable SSL cert verification.</p> <p>On versions of the API prior to '0.5.7', you will need to pass some additional parameters:</p> <pre><code>tre login client-credentials \\\n  --base-url https://mytre.westeurope.cloudapp.azure.com/ \\\n  --client-id &lt;SERVICE_PRINICPAL_CLIENT_ID&gt; \\\n  --client-secret &lt;SERVICE_PRINCIPAL_CLIENT_SECRET&gt; \\\n  --aad-tenant-id &lt;AAD_TENANT_ID&gt; \\\n  --api-scope &lt;ROOT_API_SCOPE&gt;\n</code></pre> <p>Info</p> <p>the API scope is usually of the form  <code>api://&lt;API_CLIENT_ID&gt;/user_impersonation</code></p>"},{"location":"tre-developers/CLI/#general-command-structure","title":"General command structure","text":"<p>The general command structure for the CLI is:</p> <pre><code>tre plural_noun cmd\n# or \ntre singular_noun id cmd\n</code></pre> <p>For example:</p> <pre><code># list workspaces\ntre workspaces list\n\n## show an individual workspace\ntre workspace 567f17d6-1abb-450f-991a-19398f89b3c2 show\n</code></pre> <p>This pattern is nested for sub-resources, e.g. operations for a workspace:</p> <pre><code>## list operations for a workspace\ntre workspace 567f17d6-1abb-450f-991a-19398f89b3c2 operations list\n\n## show an individual operation for a workspace\ntre workspace 567f17d6-1abb-450f-991a-19398f89b3c2 operation 0f66839f-8727-43db-b2d6-6c7197712e36 show\n</code></pre>"},{"location":"tre-developers/CLI/#asynchronous-operations","title":"Asynchronous operations","text":"<p>Many operations in TRE are asynchronous, and the corresponding API endpoints return a <code>202 Accepted</code> response with a <code>Location</code> header pointing to an operation endpoint.</p> <p>The commands corresponding to these asynchronous operations will poll this resulting operation and wait until it has completed. If you don't want this behaviour, you can pass the <code>--no-wait</code> option.</p>"},{"location":"tre-developers/CLI/#command-output","title":"Command output","text":""},{"location":"tre-developers/CLI/#output-formats","title":"Output formats","text":"<p>Most commands support formatting output as <code>table</code> (default), <code>json</code>, <code>jsonc</code>, <code>raw</code>, or <code>none</code> via the <code>--output</code> option. This can also be controlled using the <code>TRECLI_OUTPUT</code> environment variable, i.e. set <code>TRECLI_OUTPUT</code> to <code>table</code> to default to the table output format.</p> Option Description <code>table</code> Works well for interactive use <code>json</code> Plain JSON output, ideal for parsing via <code>jq</code> or other tools <code>jsonc</code> Coloured, formatted JSON <code>raw</code> Results are output as-is. Useful with <code>--query</code> when capturing a single value <code>none</code> No output"},{"location":"tre-developers/CLI/#querying-output","title":"Querying output","text":"<p>Most commands support JMESPath queries for the output via the <code>--query</code> option.</p> <p>For example, to get a list of workspace IDs run <code>tre workspaces list --query workspaces[].id</code>.</p> <p>This can be combined with <code>--output table</code>, e.g. <code>tre workspaces list -o table --query \"workspaces[].{id:id, name: properties.display_name}\"</code>. Note that the query result must be an object with named properties (or an array of such objects)</p>"},{"location":"tre-developers/CLI/#capturing-results","title":"Capturing results","text":"<p>Some of the commands in the CLI output progress information (e.g. <code>tre workspace new ...</code>).</p> <p>When the CLI outputs progress information, it outputs it to stderr. The final result of the command is output to stdout.</p> <p>This gives a good experience when chaining commands together, e.g.:</p> <pre><code># Set the workspace to use\nWORKSPACE_ID=567f17d6-1abb-450f-991a-19398f89b3c2\n# Get the workspace etag\nETAG=$(tre workspace $WORKSPACE_ID show --query workspace._etag --output json)\n# Disable the workspace (this is an asynchronous operation)\nOPERATION=$(tre workspace $WORKSPACE_ID set-enabled --etag $ETAG --enable --output json)\n# ^ this last command will output progress information while waiting for the operation to complete.\n# And OPERATION contains the JSON describing the completed operation\n# allowing you to query the status property etc\necho $OPERATION\n</code></pre>"},{"location":"tre-developers/CLI/#passing-definitions","title":"Passing definitions","text":"<p>When creating new resources (e.g. workspaces), you need to pass in a definition. This can be passed in various ways: as an inline value, from a file, or from stdin.</p> <p>To pass a definition inline, use the <code>--definition</code> option and include the JSON content, e.g. <code>tre workspace new --definition '{\"templateName\":...}'</code></p> <p>To load a definition from a file, use the <code>--definition-file</code> option, e.g. <code>tre workspace new --definition-file my-worspace.json</code></p> <p>To pass a definition via stdin, use <code>--definition-file -</code> (note the <code>-</code> to signal reading from stdin).</p> <p>Reading from stdin allows you to take some interesting approaches to specifying the definition.</p> <p>For example, you can use HEREDOC syntax to describe the JSON payload over multiple lines:</p> <pre><code>cat &lt;&lt; EOF | tre workspaces new --definition-file -\n{\n  \"templateName\": \"my-workspace\",\n  \"properties\": {\n    \"display_name\": $DISPLAY_NAME,\n    ...\n  }\n}\nEOF\n</code></pre> <p>Or you can load the content from a file that contains embedded environment variables and use <code>envsubst</code> to substitute them:</p> <p><code>cat my-workspace.json | envsubst | tre workspace new --definition file -</code></p>"},{"location":"tre-developers/CLI/#overriding-the-api-url","title":"Overriding the API URL","text":"<p>When you run <code>tre login</code> you specify the base URL for the API, but when you are developing AzureTRE you may want to make calls against the locally running API.</p> <p>To support this, you can set the <code>TRECLI_BASE_URL</code> environment variable and that will override the API endpoint used by the CLI.</p>"},{"location":"tre-developers/CLI/#example-usage","title":"Example usage","text":""},{"location":"tre-developers/CLI/#creating-an-import-airlock-request","title":"Creating an import airlock request","text":"<pre><code># Set the ID of the workspace to create the import request for\nWORKSPACE_ID=__ADD_ID_HERE__\n\n# Create the airlock request - change the justification as appropriate\nrequest=$(tre workspace $WORKSPACE_ID airlock-requests new --type import --title \"Ant\" --justification \"It's import-ant\" --output json)\nrequest_id=$(echo $request | jq -r .airlockRequest.id)\n\n# Get the storage upload URL\nupload_url=$(tre workspace $WORKSPACE_ID airlock-request $request_id get-url --query containerUrl --output raw)\n\n# Use the az CLI to upload ant.txt from the current directory (change as required)\naz storage blob upload-batch --source . --pattern ant.txt --destination $upload_url\n\n# Submit the request for review\ntre workspace $WORKSPACE_ID airlock-request $request_id submit\n</code></pre>"},{"location":"tre-developers/api-permissions-map/","title":"TRE API Permissions Map","text":"<p>These tables specify each endpoint that exists today in TRE API and the permissions it supports.</p>"},{"location":"tre-developers/api-permissions-map/#workspace-api","title":"Workspace API","text":"Endpoints Researcher Workspace Owner Airlock Manager GET /workspaces/{workspace_id}/workspace-services V V V GET /workspaces/{workspace_id}/workspace-service-templates V V V GET /workspaces/{workspace_id}/workspace-service-templates/{service_template_name}/user-resource-templates V V V GET /workspaces/{workspace_id}/workspace-services/{service_id} V V POST /workspaces/{workspace_id}/workspace-services X V PATCH /workspaces/{workspace_id}/workspace-services/{service_id} X V DELETE /workspaces/{workspace_id}/workspace-services/{service_id} X V POST /workspaces/{workspace_id}/workspace-services/{service_id}/invoke-action X V GET /workspaces/{workspace_id}/workspace-services/{service_id}/operations X V V GET /workspaces/{workspace_id}/workspace-services/{service_id}/operations/{operation_id} X V V GET /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources V V V GET /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id} V V V POST /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources V V V PATCH /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id} V V V DELETE /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id} V V V POST /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id}/invoke-action V V V GET /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id}/operations V V V GET /workspaces/{workspace_id}/workspace-services/{service_id}/user-resources/{resource_id}/operations/{operation_id} V V V GET /workspaces/{workspace_id}/requests V V V GET /workspaces/{workspace_id}/requests/{airlock_request_id} V V V POST /workspaces/{workspace_id}/requests V V X POST /workspaces/{workspace_id}/requests/{airlock_request_id}/submit V V X POST /workspaces/{workspace_id}/requests/{airlock_request_id}/cancel V V X POST /workspaces/{workspace_id}/requests/{airlock_request_id}/review X X V POST /workspaces/{workspace_id}/requests/{airlock_request_id}/review-user-resource X X V GET /workspaces/{workspace_id}/requests/{airlock_request_id}/link V V V ## Core API Endpoints TRE Admin TRE User WS Owner ------------------------------------------------------------------------------------------------------------------- --------- -------- -------- GET /workspace-templates V V GET /workspace-templates/{workspace_template_name} V V POST /workspace-templates V X GET /workspace-service-templates V V GET /workspace-service-templates/{workspace_service_template_name} V V POST /workspace-service-templates V X GET /workspace-service-templates/{service_template_name}/user-resource-templates V V GET /workspace-service-templates/{service_template_name}/user-resource-templates/{user_resource_template_name} V V POST /workspace-service-templates/{service_template_name}/user-resource-templates V X GET /workspaces V V GET /workspaces/(workspace_id) V V POST /workspaces V X PATCH /workspaces/{workspace_id} V X X DELETE /workspaces/{workspace_id} V X X POST /workspaces/{workspace_id}/invoke-action V X X GET /workspaces/{workspace_id}/operations V X V GET /workspaces/{workspace_id}/operations/{operation_id} V X V GET /shared-service-templates V V GET /shared-service-templates/{shared_service_template_name} V V POST /shared-service-templates V X GET /shared-service V V GET /shared-service/{shared_service_id} V V POST /shared-service V X PATCH /shared-service/{shared_service_id} V X DELETE /shared-service/{shared_service_id} V X POST /shared-service/{shared_service_id}/invoke-action V X GET /shared-service/{shared_service_id}/operations V X GET /shared-service/{shared_service_id}/operations/{operation_id} V X POST /migrations V X GET /costs V X X GET /workspaces/{workspace_id}/costs V X V GET /health - - - GET /ping - - - GET /.metadata - - -"},{"location":"tre-developers/api/","title":"TRE API","text":"<p>The TRE API is a service that users can interact with to request changes to workspaces e.g., to create, update, delete workspaces and workspace services inside each workspace.</p> <p>This page is a guide for a developer looking to make a change to the API and debug it.</p>"},{"location":"tre-developers/api/#repository-folder-structure","title":"Repository folder structure","text":"<pre><code>api_app\n\u251c\u2500\u2500 api              - API implementation\n\u2502   \u251c\u2500\u2500 dependencies - Dependencies for routes definition\n\u2502   \u251c\u2500\u2500 errors       - Definitions of error handlers\n\u2502   \u2514\u2500\u2500 routes       - Web routes (API endpoints)\n\u2502\n\u251c\u2500\u2500 core             - Application configuration, startup events, logging\n\u2502\n\u251c\u2500\u2500 db               - Database related implementation\n\u2502   \u251c\u2500\u2500 migrations   - Manually written alembic migrations\n\u2502   \u2514\u2500\u2500 repositories - All CRUD features\n\u2502\n\u251c\u2500\u2500 models           - Pydantic models for this application\n\u2502   \u251c\u2500\u2500 domain       - Main models that are used almost everywhere\n\u2502   \u2514\u2500\u2500 schemas      - Schemas for using in web routes\n\u2502\n\u251c\u2500\u2500 resources        - Strings that are used e.g., in web responses\n\u2502\n\u251c\u2500\u2500 services         - Logic that is not only CRUD related (authentication, logging, tracing, etc)\n\u2502\n\u251c\u2500\u2500 tests_ma         - Unit tests\n\u2502\n\u2514\u2500\u2500 main.py          - FastAPI application creation and configuration\n</code></pre>"},{"location":"tre-developers/api/#unit-tests","title":"Unit tests","text":"<p>The unit tests are written with pytest and located in folder <code>/api_app/tests_ma/</code>.</p> <p>Run all unit tests with the following command in the root folder of the repository:</p> <pre><code>pytest --ignore=e2e_tests\n</code></pre> <p>Please refer to a different guide on running E2E tests locally.</p>"},{"location":"tre-developers/api/#local-debugging","title":"Local debugging","text":"<p>To set up local debugging, first run (if you haven't done so already)</p> <pre><code>az login\nmake setup-local-debugging\n</code></pre> <p>Next, go to \"Run and Debug\" panel in VSCode, and select TRE API.</p> <p></p> <p>You will see a log similar to this:</p> <p></p> <p>Now, you should be able to open Swagger UI for your local instance on http://localhost:8000/api/docs.</p>"},{"location":"tre-developers/api/#cloud-instance","title":"Cloud instance","text":"<p>On Azure Portal, find an App Service instance named <code>app-${TRE_ID}</code>.</p>"},{"location":"tre-developers/api/#api-logs-in-loganalytics","title":"API logs in LogAnalytics","text":"<p>To find logs in LogAnalytics, go to your resource group, then to LogAnalytics instance, which is named like <code>log-${TRE_ID}</code>.</p> <p>There, you can run a query like</p> <pre><code>AppTraces \n| where AppRoleName == \"api\"\n| order by TimeGenerated desc \n</code></pre>"},{"location":"tre-developers/api/#api-logs-using-deployment-center","title":"API logs using deployment center","text":"<p>Check that the version you are debugging/troubleshooting is the same one deployed on the App Service.</p> <p>You can check this in Deployment Center, or follow the logs as generated by the container in the logs tabs.</p> <p></p>"},{"location":"tre-developers/api/#deploying-a-cloud-instance","title":"Deploying a cloud instance","text":"<p>To deploy a new version of the API to your TRE deployment, do this:</p> <ol> <li> <p>Update the version in <code>api_app/_version.py</code></p> </li> <li> <p>Run</p> </li> </ol> <pre><code>make build-and-push-api\nmake deploy-core\n</code></pre>"},{"location":"tre-developers/api/#using-swagger-ui","title":"Using Swagger UI","text":"<p>Swagger UI lets you send requests to the API.</p> <p>To send a request, click on the row with the request, then <code>Try out</code>, then <code>Execute</code>. See screenshot:</p> <p></p>"},{"location":"tre-developers/api/#authorization","title":"Authorization","text":"<p>Swagger UI is accessible under <code>https://${TRE_ID}.${LOCATION}.cloudapp.azure.com/api/docs</code>.</p> <p>To start using it, click Authorize button, then click Authorize (leave the field <code>client_secret</code> empty). See screenshot:</p> <p></p> <p>If you see an error message saying something like:</p> <pre><code>The redirect URI 'https://tanyagts8.westeurope.cloudapp.azure.com/api/docs/oauth2-redirect' specified in the request does not match the redirect URIs configured for the application '558602a8-764a-453c-8efa-4dc3ddd61570'.\n</code></pre> <p>Then you'll need to update the redirect URI (see below).</p> <p>Otherwise, after you sign in on Azure Portal, the lock icon on Authorize button should look \"locked\". Then you can start executing queries.</p> <p>See also setup instructions.</p> <p>All workspace operations are executed using a different URL: <code>https://${TRE_ID}.${LOCATION}.cloudapp.azure.com/api/workspaces/${WORKSPACE_ID}/docs</code>. See also instructions on installing base workspace.</p>"},{"location":"tre-developers/api/#updating-the-redirect-uri","title":"Updating the redirect URI","text":"<p>If you get the following error:</p> <p></p> <p>You should run:</p> <pre><code>make auth\n</code></pre> <p>Alternatively, in Azure Portal you can add the redirect URL to the App Registration. Under Microsoft Entra ID, find App Registrations, and find the App Registration with the ID shown in the error message. There, go to Redirect URL and add the URL given to you by the error message (it will have a form of <code>https://${TRE_ID}.westeurope.cloudapp.azure.com/api/docs/oauth2-redirect</code>).</p>"},{"location":"tre-developers/api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tre-developers/api/#wrong-docker-image-version","title":"Wrong docker image version","text":"<p>If this happens, you will see a log similar to this:</p> <p><code>2022-05-10T05:34:48.844Z ERROR - DockerApiException: Docker API responded with status code=NotFound, response={\"message\":\"manifest for tborisdevtreacr.azurecr.io/microsoft/azuretre/api:0.2.24 not found: manifest unknown: manifest tagged by \\\"0.2.24\\\" is not found\"}</code></p> <p>To fix, run <code>make build-and-push-api</code> from your branch and restart the instance.</p>"},{"location":"tre-developers/api/#investigating-apihealth-response","title":"Investigating /api/health response","text":"<p>The endpoint <code>/api/health</code> tracks health of not only API, but other components of the system too, and can help to narrow down any problems with your deployment:</p> <pre><code>{\n  \"services\": [\n    {\n      \"service\": \"Cosmos DB\",\n      \"status\": \"OK\",\n      \"message\": \"\"\n    },\n    {\n      \"service\": \"Service Bus\",\n      \"status\": \"OK\",\n      \"message\": \"\"\n    },\n    {\n      \"service\": \"Resource Processor\",\n      \"status\": \"Not OK\",\n      \"message\": \"Resource Processor is not responding\"\n    }\n  ]\n}\n</code></pre> <p>In this case, next step is to look at logs of Resource Processor. See also Resource Processor docs.</p>"},{"location":"tre-developers/end-to-end-tests/","title":"End-to-end (E2E) tests","text":""},{"location":"tre-developers/end-to-end-tests/#prerequisites","title":"Prerequisites","text":"<ol> <li>Authentication and Authorization configuration set up as noted here</li> <li>An Azure Tre deployed environment.</li> </ol>"},{"location":"tre-developers/end-to-end-tests/#registering-bundles-to-run-end-to-end-tests","title":"Registering bundles to run End-to-end tests","text":"<p>End-to-end tests depend on certain bundles to be registered within the TRE API.</p> <p>When End-to-end tests run in CI, they are registered as a prerequisite to running tests.</p> <p>When running tests locally, use the <code>prepare-for-e2e</code> Makefile target:</p> <pre><code>make prepare-for-e2e\n</code></pre>"},{"location":"tre-developers/end-to-end-tests/#debugging-the-end-to-end-tests","title":"Debugging the End-to-End tests","text":"<p>Use the \"Run and Debug\" panel within Visual Studio Code, select \"E2E Extended\", \"E2E Smoke\" or \"E2E Performance\" in the drop down box and click play.</p> <ul> <li>This will copy <code>config.yaml</code> settings to <code>/workspaces/AzureTRE/e2e_tests/.env</code> for you which supplies your authentciation details</li> </ul> <ul> <li>This will also use <code>/workspaces/AzureTRE/core/private.env</code> file for other values.</li> </ul>"},{"location":"tre-developers/github-pr-bot-commands/","title":"GitHub PR Bot Commands","text":""},{"location":"tre-developers/github-pr-bot-commands/#pr-comment-bot-commands","title":"PR Comment bot commands","text":"<p>Notes - these commands are not immediate - you need to wait for the GitHub action that performs the task to start up. - builds triggered via these commands will use the workflow definitions from <code>main</code>. To test workflow changes before merging to <code>main</code>, the changes need to be pushed to a branch in the main repo and then the <code>deploy_tre_branch.yml</code> workflow can be run against that branch.</p> <p>These commands can only be run when commented by a user who is identified as a repo collaborator (see granting access to run commands)</p>"},{"location":"tre-developers/github-pr-bot-commands/#help","title":"<code>/help</code>","text":"<p>This command will cause the pr-comment-bot to respond with a comment listing the available commands.</p>"},{"location":"tre-developers/github-pr-bot-commands/#test-sha","title":"<code>/test [&lt;sha&gt;]</code>","text":"<p>This command runs the build, deploy, and smoke tests for a PR.</p> <p>For PRs from maintainers (i.e. users with write access to microsoft/AzureTRE), <code>/test</code> is sufficient.</p> <p>For other PRs, the checks below should be carried out. Once satisfied that the PR is safe to run tests against, you should use <code>/test &lt;sha&gt;</code> where <code>&lt;sha&gt;</code> is the SHA for the commit that you have verified. You can use the full or short form of the SHA, but it must be at least 7 characters (GitHub UI shows 7 characters).</p> <p>IMPORTANT</p> <p>This command works on PRs from forks, and makes the deployment secrets available. Before running tests on a PR, ensure that there are no changes in the PR that could have unintended consequences (e.g. leak secrets or perform undesirable operations in the testing subscription).</p> <p>Check for changes to anything that is run during the build/deploy/test cycle, including: - modifications to workflows (including adding new actions or changing versions of existing actions) - modifications to the Makefile - modifications to scripts - new python packages being installed</p>"},{"location":"tre-developers/github-pr-bot-commands/#test-extended-sha-test-extended-aad-sha-test-shared-services-sha","title":"<code>/test-extended [&lt;sha&gt;]</code> / <code>/test-extended-aad [&lt;sha&gt;]</code>/ <code>/test-shared-services [&lt;sha&gt;]</code>","text":"<p>This command runs the build, deploy, and smoke &amp; extended / shared services tests for a PR.</p> <p>For PRs from maintainers (i.e. users with write access to microsoft/AzureTRE), <code>/test-extended</code> is sufficient.</p> <p>If a change has been made which would affect any of the core shared services, make sure you run <code>/test-shared-services</code>.</p> <p>For other PRs, the checks below should be carried out. Once satisfied that the PR is safe to run tests against, you should use <code>/test-extended &lt;sha&gt;</code> where <code>&lt;sha&gt;</code> is the SHA for the commit that you have verified. You can use the full or short form of the SHA, but it must be at least 7 characters (GitHub UI shows 7 characters).</p> <p>IMPORTANT</p> <p>As with <code>/test</code>, this command works on PRs from forks, and makes the deployment secrets available. Before running tests on a PR, run the same checks on the PR code as for <code>/test</code>.</p>"},{"location":"tre-developers/github-pr-bot-commands/#test-destroy-env","title":"<code>/test-destroy-env</code>","text":"<p>When running <code>/test</code> multiple times on a PR, the same TRE ID and environment are used by default. The <code>/test-destroy-env</code> command destroys a previously created validation environment, allowing you to re-run <code>/test</code> with a clean starting point.</p> <p>The <code>/test-destroy-env</code> command also destroys the environment associated with the PR branch (created by running the <code>deploy_tre_branch</code> workflow).</p>"},{"location":"tre-developers/github-pr-bot-commands/#test-force-approve","title":"<code>/test-force-approve</code>","text":"<p>This command skips running tests for a build and marks the checks as completed. This is intended to be used in scenarios where running the tests for a PR doesn't add value (for example, changing a workflow file that is always pulled from the default branch).</p>"},{"location":"tre-developers/github-pr-bot-commands/#granting-access-to-run-commands","title":"Granting access to run commands","text":"<p>Currently, the GitHub API to determine whether a user is a collaborator doesn't seem to respect permissions that a user is granted via a group. As a result, users need to be directly granted <code>write</code> permission in the repo to be able to run the comment bot commands.</p>"},{"location":"tre-developers/letsencrypt/","title":"Letsencrypt","text":"<p>Certain components of the TRE require the aquisition of a certificate via Letsencrypt to ensure secure HTTPS connections.</p> <p>In order to aquire these certificates, there must be a public facing endpoint which can be reached by Letsencrypt.</p> <p>As TREs are secured environments with very few publicly facing points, additional resources are required to ensure the certificate can be provisioned for the correct domain.</p> <p>The additional resources are as followed:</p> <ol> <li>Public IP provisioned in the same location as the web app that the certificate is intended for; this will also have a domain label which matches the web app name.</li> <li>Storage Account with a static web app.</li> <li>Application gateway to route traffic from the Public IP to the static web app</li> </ol> <p>The following diagram illustrated the flow of data between the resources:</p> <pre><code>flowchart RL\n    subgraph .dev Container\n        direction TB\n        A(letsencrypt process runs)\n    end\n    subgraph External\n        direction TB\n        B[letsencrypt authority]\n    end\n    subgraph TRE\n        subgraph Core VNet\n            C[Public IP  &lt;br/&gt; Domain Label: &lt; web-app-name &gt; &lt;br/&gt; Endpoint: &lt; web-app-name &gt;.&lt; location &gt;.cloudapp.net]\n            subgraph Storage Account\n                D[SA Static Site]\n            end\n        end\n        subgraph VNet\n            E[Key Vault &lt;br/&gt; kv-&lt; tre_id &gt;]\n            subgraph VM\n                F[Web App]\n            end\n            G[Private DNS Zone &lt; web-app-name &gt;.&lt; location &gt;.cloudapp.net]\n        end\n    end\n\n    A --&gt; |1. Request to            | B\n    B --&gt; |2. Attempts to hit       | C\n    C --&gt; |3. App Gateway routes    | D\n    D --&gt; |4. Responds              | C\n    C --&gt; |5. Responds              | B\n    B --&gt; |6. Acquires certificate  | A\n    A --&gt; |7. Stores Certificate    | E\n    F --&gt; |8. Pulls Certificate     | E</code></pre>"},{"location":"tre-developers/release/","title":"How to release an AzureTRE version","text":"<p>A release is created when enough changes have been made and the main branch is stable enough.</p> <p>The process follows these steps:</p> <ol> <li>Create a <code>Prep for Release v0...</code> issue to track.</li> <li>Create a new branch for the release prep and open in Dev Container.</li> <li>Update <code>CHANGELOG.md</code> in a PR with the following:<ol> <li>Rename the top-most version noted as unreleased with the version number that makes sense. Note that you don't have to keep the one that is currently in the file as the version number chosen should reflect the changes made (major, minor, etc.).</li> <li>Create a new section for the next-unreleased version so that future changes will be placed there.</li> <li>Run <code>devops/scripts/list_versions.sh</code> and include the output in the change log for the version you're about the release.</li> </ol> </li> <li>Create PR and link to the <code>Prep...</code> issue.</li> <li>Merge the PR.</li> <li> <p>Create GitHub Release in <code>Pre Release</code> state.    </p> <ol> <li>Go to https://github.com/microsoft/AzureTRE/releases/new</li> <li>Click on <code>Choose a tag</code> and type a new one for you version. It should be in the form of <code>v0.9.2</code> - note the \"v\" in the beginning.</li> <li>The release title should be just the version number \"0.9.2\" in the example above.</li> <li>Copy the text from the CHANGELOG.md file and paste in the release description.</li> <li>Include a final line with a link to the full changelog similar to this:  <p>Full Changelog: https://github.com/microsoft/AzureTRE/compare/v0.9.1...v0.9.2</p> </li> </ol> </li> <li> <p>Update AzureTRE-Deployment. The procedure may vary depending on the level of changes introduced in the new version but should include the following steps:</p> <ol> <li>Update the tag used in devcontainer.json.</li> <li>Rebuild the container.</li> <li>Compare both <code>.devcontainer</code> and <code>.github</code> folders of the new release with the ones in the repo and make required updates so that only required difference exist.  The compare can be done with VSCode Compare Folders extension as you have both the old version (under to root folder) and the \"new\" one inside the AzureTRE symlink.</li> <li>With all changes made, rebuild the container to verify it's working and that AzureTRE folder has been populated correctly.</li> </ol> </li> <li>Once tests have been complete edit GitHub Release by disabling <code>Set as a pre-release</code> and enabling <code>Set as the latest release</code>.</li> </ol>"},{"location":"tre-developers/resource-processor/","title":"Resource Processor (VMSS)","text":"<p>Resource Processor is the Azure TRE component automating Porter bundle deployments. It hosts Porter and its dependencies.</p> <p>This page is a guide for a developer looking to make a change to the Resource Processor and debug it.</p>"},{"location":"tre-developers/resource-processor/#overview","title":"Overview","text":"<p>The logic in Resource Processor is written in Python. The Resource Processor implementation is located in <code>resource_processor</code> folder of the repository.</p> <p>Read how a workspace is provisioned using Porter</p>"},{"location":"tre-developers/resource-processor/#local-debugging","title":"Local debugging","text":"<p>To set up local debugging, first run, if you haven't done so already (make sure <code>ENABLE_LOCAL_DEBUGGING</code> is set to <code>true</code> in your <code>.env</code> file):</p> <pre><code>az login\nmake setup-local-debugging\n</code></pre> <p>This will allowlist your local IP against Azure resources and create a Service Principal for the Resource Processor.</p> <p>Next, disable the existing Resource Processor from running in your deployment. The easiest way to do this is to stop the VM scale set:</p> <p></p> <p>Now, go to \"Run and Debug\" panel in VSCode, and select Resource Processor.</p> <p></p> <p>Info</p> <p>If you get a credential error when trying to connect to Service Bus, make sure you've authenticated in the AZ CLI first as it uses your local credentials.</p> <p>Info</p> <p>If you get an error similar to <code>Environment variable 'ARM_CLIENT_ID' is not set correctly</code>, make sure you have ran <code>make setup-local-debugging</code></p> <p>You can use an API instance deployed in your environment to create deployment requests, and debug your locally running Resource Processor.</p> <p>For more information on how to use API, refer to API documentation.</p>"},{"location":"tre-developers/resource-processor/#cloud-instance","title":"Cloud instance","text":"<p>On Azure Portal, find an Virtual VM scale set with a name <code>vmss-rp-porter-${TRE_ID}</code>.</p>"},{"location":"tre-developers/resource-processor/#connect-to-the-resource-processor-terminal","title":"Connect to the Resource Processor terminal","text":"<p>The processor runs in a VNET, and you cannot connect to it directly. To SSH to this instance, use Bastion.</p> <ol> <li>Navigate to the VMSS instance named <code>vmss-rp-porter-${TRE_ID}</code> in the Azure Portal.</li> <li>Click on <code>Instances</code> in the left menu.</li> <li>Click on an instance name.</li> <li> <p>Click on <code>Connect -&gt; Bastion</code> in the top menu.</p> <p></p> </li> <li> <p>Set <code>Authentication type</code> to <code>Password from Azure Key Vault</code>.</p> </li> <li>Set Username to <code>adminuser</code>.</li> <li> <p>Set the Key Vault to  <code>kv-${TRE_ID}</code> and Azure Key Vault Secret to <code>resource-processor-vmss-password</code>.</p> <p>If you don't have permissions to see the secret, add yourself to the Access Policy of this keyvault with a permission to read secrets:</p> <p></p> </li> <li> <p>Click <code>Connect</code>.</p> </li> </ol>"},{"location":"tre-developers/resource-processor/#getting-container-logs","title":"Getting container logs","text":"<ol> <li>SSH into the Resource Processor VM as described above</li> <li> <p>Check the status of the container using <code>docker ps</code></p> <p>If you see nothing (and the container was pulled) then the processor has either not started yet or it has crashed.</p> </li> <li> <p>Get the logs from the container using <code>docker logs &lt;container_id&gt;</code> command.</p> </li> </ol>"},{"location":"tre-developers/resource-processor/#starting-container-manually","title":"Starting container manually","text":"<ol> <li>Find the runner_image:tag by running <code>docker ps</code></li> <li> <p>Execute the following command from the root (/) of the file system</p> <pre><code>sudo docker run -v /var/run/docker.sock:/var/run/docker.sock --env-file .env --name resource_processor_vmss_porter_debug [runner_image:tag]\n</code></pre> </li> </ol> <p>Info</p> <p>If you start a container manually you will probably want to install software, for example, an editor. However, the firewall blocks all ingress traffic, so you cannot run <code>sudo apt update</code>. You need to add an override rule in the firewall to allow the traffic.</p> <p>Caution</p> <p>Remember to remove this rule when debugging is done.</p>"},{"location":"tre-developers/resource-processor/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tre-developers/resource-processor/#no-container-logs-on-the-instance","title":"No container logs on the instance","text":"<ol> <li> <p>If you don't see container logs, you should check the status of cloud-init which is used to bootstrap the machine with docker and start the processor. Log files for cloud init are:</p> <ul> <li><code>/var/log/cloud-init.log</code></li> <li><code>/var/log/cloud-init-output.log</code></li> </ul> <p>If the Docker container is pulled as shown in logs then the resource processor should start. 1. Check the status of all Docker processes using <code>docker ps -a</code> which should show you if the container terminated prematurely.</p> </li> </ol>"},{"location":"tre-developers/resource-processor/#implementation-details","title":"Implementation details","text":""},{"location":"tre-developers/resource-processor/#porter","title":"Porter","text":"<p>Azure TRE needed a solution for implementing and deploying workspaces and workspace services with the following properties:</p> <ul> <li>Means for packaging and versioning workspaces and workspace services</li> <li>Providing unified structure for deployment definitions (scripts, pipelines) so that the process can be easily automated</li> <li>Solid developer experience - easy to use and learn</li> </ul> <p>Porter meets all these requirements well. Porter packages cloud application into a versioned, self-contained Docker container called a Porter bundle.</p> <p>CNAB spec defines actions that Porter implements: install, upgrade and uninstall. The developer has practically complete freedom on how to implement logic for these actions. The deployment pipeline definition is created in YAML. The YAML file is called Porter manifest and in additon to the actions, it contains the name, version, description of the bundle and defines the input parameters, possible credentials and output.</p> <p>Furthermore, Porter provides a set of mixins - analogous to the concrete actions in GitHub workflows and tasks in Azure DevOps pipelines - which simplify and reduce the development cost when implementing deployment logic. For example, Terraform mixin installs the required tools and provides a clean step in the pipeline to execute Terraform deployments. Exec mixin allows running any command or script; especially useful, if no suitable mixin for a specific technology is available. Implementing custom mixins is possible too.</p>"},{"location":"tre-developers/resource-processor/#porter-azure-plugin","title":"Porter Azure plugin","text":"<p>Resource Processor uses Porter Azure plugin to access secrets in Azure Key Vault.</p>"},{"location":"tre-developers/resource-processor/#porter-bundle-inputs","title":"Porter bundle inputs","text":"<p>When Porter runs bundle actions, it passes input parameters. Full set of inputs that Porter passes can be found in config.py.</p> <p>Info</p> <p>Note that Resource Processor does not pass any location-related attributes when running bundle actions. Instead, a <code>location</code> attribute is passed from the API. This is so that different TRE resources could be potentially deployed to different regions.</p>"},{"location":"tre-developers/ui/","title":"TRE Web User Interface","text":"<p>This project contains a React-based web UI which covers the core aspects of a TRE, for researchers and workspace owners.</p>"},{"location":"tre-developers/ui/#chosen-ui-stack-components","title":"Chosen UI Stack + Components","text":"<p>The UI is built upon several popular web frameworks: - React v18 (with Vite)   - Typescript   - React Router v6 for client side routing - Fluent UI Fluent UI Docs - MSAL v2: Microsoft Entra ID authentication msal-react docs</p>"},{"location":"tre-developers/ui/#folder-structure","title":"Folder structure","text":"<pre><code>ui\n\u251c\u2500\u2500 app                    - Root of the React application\n\u2502   \u251c\u2500\u2500 build              - Location of compiled files after build process\n\u2502   \u251c\u2500\u2500 public             - Location for static HTML to bootstrap the app\n\u2502   \u251c\u2500\u2500 src                - All .tsx components\n\u2502   \u251c\u2500\u2500 index.tsx          - Entry point for the app\n\u2502   \u251c\u2500\u2500 App.tsx            - Wrapper and routing for the app\n\u2502   \u2514\u2500\u2500 config.source.json - JSON file to be used as source file for autogenerated config\n</code></pre>"},{"location":"tre-developers/ui/#authn-authz","title":"AuthN + AuthZ","text":"<p>For further details on the auth setup, see Auth.</p> <p>As stated above, Microsoft Entra ID is used for Authentication and Authorization. There are 3 Microsoft Entra ID apps involved here: - TRE UX. This is the app that the user authenticates against. Once authenticated, the client will request an access token for the <code>TRE Api</code>. - TRE Api. In the access token response from this app we get the user's role membership for TRE-level roles (<code>TREAdmin</code> / <code>TREUser</code>). Based on these role memberships, aspects of the UI will be made available. If the user is in a <code>TREAdmin</code> role, they will see buttons to create workspaces for instance. When the user navigates into a Workspace, the client will request an access token for that <code>Workspace App</code>. - Workspace App(s). Each TRE workspace will have a workspace app registration. The Application Id URI for each workspace app is stored in the Workspace resource object in Cosmos, and the client uses this URI to gain an access token for that particular workspace.</p> <p>Workspace app registrations may be reused across multiple workspaces in development scenarios. From this access token we can find the Workspace-level roles the user is in (<code>WorkspaceOwner</code> / <code>WorkspaceResearcher</code>). These are in turn used to show/hide features of the UI.</p>"},{"location":"tre-developers/ui/#react-contexts","title":"React Contexts","text":"<p>The React Context API is a clean way to handle a limited amount of global state, and is used for a few scenarios in this project: - TRE Roles Context: A context provides details of the base TRE roles a user is in, which can be consumed anywhere throughout the app - Workspace Context: Tracks the currently selected Workspace, and the roles the user is in for that Workspace. This context is used for nested components to be able to authenticate against the correct Microsoft Entra ID App via <code>workspaceCtx.workspaceApplicationIdURI</code>. - Create Form Context: A context to control the Create / Update form behaviour. - Notifications Context: Tracks all the in-progress operations currently running. For each operation, the Notifications panel also uses this context to broadcast Component 'actions' which are subscribed to by downstream components. This way, a resource component does not have to track it's own changes, and can be 'told' by the Notifications Context whether it should refresh / lock etc.</p>"},{"location":"tre-developers/ui/#custom-hooks","title":"Custom Hooks","text":"<p>Hooks are used throughout the project, and a couple of custom hooks were written to abstract common logic: - <code>useAuthApiCall</code>: A way to encapsulate an authenticated <code>fetch</code> request and provide a simple interface for downstream components to use. - <code>useComponentManager</code>: This hook subscribes to changes broadcast from the Notifications panel, via the context. A component can simply add this hook to start subscribing to changes and react accordingly.</p>"},{"location":"tre-developers/ui/#deployment","title":"Deployment","text":"<p>The UI is deployed as part of the <code>tre-deploy</code> make target (unless you set <code>deploy_ui=false</code> under tre defaults section in your <code>config.yaml</code> file).</p> <p>To re-deploy just the UI (after an initial deploy), run <code>make build-and-deploy-ui</code> from the root of the dev container. This will: - Use the environment variables from your deployment to create a <code>config.json</code> file for the UI - Build the source code, via <code>yarn build</code> - Deploy the code to Azure blob storage, where it will be statically served behind the App Gateway that also fronts the API.</p>"},{"location":"tre-developers/ui/#run-the-ui","title":"Run the UI","text":"<ul> <li>Ensure <code>deploy_ui=false</code> is not set in your <code>./config.yaml</code> file</li> <li>In the root of the repo, run <code>make tre-deploy</code>. This will provision the necessary resources in Azure, build and deploy the UI to Azure blob storage, behind the App Gateway used for the API. The deployment process will also create the necessary <code>config.json</code>, using the <code>config.source.json</code> as a template.</li> <li>In Microsoft Entra ID, locate the TRE Client Apps app (possibly called Swagger App). In the Authentication section add reply URIs for:<ul> <li><code>http://localhost:3000</code> (if wanting to run locally)</li> <li>Your deployed App Url - <code>https://{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>.</li> </ul> </li> </ul> <p>At this point you should be able to navigate to the web app in Azure, log in, and see your workspaces.</p>"},{"location":"tre-developers/ui/#available-scripts","title":"Available Scripts","text":"<p>In the UI directory, you can run:</p>"},{"location":"tre-developers/ui/#yarn-start","title":"<code>yarn start</code>","text":"<p>Runs the app in the development mode. Open http://localhost:3000 to view it in the browser.</p> <p>The page will reload if you make edits. You will also see any lint errors in the console.</p>"},{"location":"tre-developers/ui/#yarn-test","title":"<code>yarn test</code>","text":"<p>Launches the test runner in the interactive watch mode.</p>"},{"location":"tre-developers/ui/#yarn-run-build","title":"<code>yarn run build</code>","text":"<p>Builds the app for production to the <code>build</code> folder. It correctly bundles React in production mode and optimizes the build for the best performance.</p> <p>The build is minified and the filenames include the hashes. Your app is ready to be deployed!</p>"},{"location":"tre-developers/ui/#yarn-run-serve","title":"<code>yarn run serve</code>","text":"<p>Serves the production build from the <code>build</code> folder.</p>"},{"location":"tre-developers/ui/#yarn-run-testcoverage","title":"<code>yarn run test:coverage</code>","text":"<p>Runs the tests and generates a coverage report.</p>"},{"location":"tre-developers/ui/#yarn-lint","title":"<code>yarn lint</code>","text":"<p>Runs the linter on the project.</p>"},{"location":"tre-developers/ui/#yarn-format","title":"<code>yarn format</code>","text":"<p>Runs the formatter on the project.</p>"},{"location":"tre-templates/","title":"Templates and Services","text":"<p>Info</p> <p>Coming soon</p> <p>We're working to improve our documentation, and fill in some gaps. Unfortunately, this particular page is one of the gaps we're looking to fill and isn't yet available.</p>"},{"location":"tre-templates/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"tre-templates/pipeline-templates/overview/","title":"Pipeline Templates","text":"<p>Occasionally there will be a need for the deployment / update of one resource to affect a change in another. This section outlines how that can be achieved with Pipeline Templates.</p>"},{"location":"tre-templates/pipeline-templates/overview/#overview","title":"Overview","text":"<p>A pipeline template is an optional <code>pipeline: {}</code> block that can be added to the top level of a resource schema document. It allows a template developer to define actions to run against other resources before and after the primary resource is deployed.</p>"},{"location":"tre-templates/pipeline-templates/overview/#example","title":"Example","text":"<p>Consider the following <code>template_schema.json</code>:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://github.com/microsoft/AzureTRE/templates/workspace_services/guacamole/user_resources/guacamole-dev-vm/template_schema.json\",\n  ...\n  \"properties\": {...},\n  \"pipeline\": {\n    \"install\": [\n      {\n        \"stepId\": \"6d2d7eb7-984e-4330-bd3c-c7ec98658402\",\n        \"stepTitle\": \"Update the firewall name\",\n        \"resourceTemplateName\": \"tre-shared-service-firewall\",\n        \"resourceType\": \"shared_service\",\n        \"resourceAction\": \"upgrade\",\n        \"properties\": [\n        {\n          \"name\": \"display_name\",\n          \"type\": \"string\",\n          \"value\": \"A new name here!\"\n        }]\n      },\n      {\n        \"stepId\": \"main\"\n      },\n      {\n        \"stepId\": \"2fe8a6a7-2c27-4c49-8773-127df8a48b4e\",\n        ...\n      }\n    ]\n  }\n}\n</code></pre> <p>When a user deploys this resource, the API will read the <code>install: []</code> array within the <code>pipeline: {}</code> block, and will: - Orchestrate the <code>upgrade</code> of the <code>tre-shared-service-firewall</code>, changing the <code>display_name</code> property to <code>A new name here!</code>. - Run the <code>main</code> (primary resource) install - Complete the next step</p> <p>A single <code>Operation</code> document will be used to keep track of which steps in the deployment chain have completed.</p>"},{"location":"tre-templates/pipeline-templates/overview/#current-limitations","title":"Current Limitations","text":"<p>This feature is undergoing active development, and is currently limited in the following ways: - Only statically addressable resources can be referred to - <code>shared_services</code>, as these are singletons and can be referenced by a template name. - Only the <code>upgrade</code> action for each secondary resource is supported. Support for <code>install</code> / <code>uninstall</code> of secondary resources is planned. - No current planned support for <code>customActions</code>.</p>"},{"location":"tre-templates/pipeline-templates/pipeline-schema/","title":"Pipeline Template Schema","text":"<p>This document will help you write a valid <code>pipeline: {}</code> block in your template.</p> <p>For a working example, see <code>./templates/shared-services/sonatype-nexus/template_schema.json</code>.</p>"},{"location":"tre-templates/pipeline-templates/pipeline-schema/#schema","title":"Schema","text":"<pre><code>\"pipeline\": {\n    \"install\": [ // &lt;-- [install | upgrade | uninstall]\n      {\n        \"stepId\": \"a unique string value here\",\n        \"stepTitle\": \"Friendly description of the step here - will be displayed in the UI\",\n        \"resourceTemplateName\": \"name of the resource template to update\", // only required for shared_service targets\n        \"resourceType\": \"shared_service\", // [ shared_service | user_resource | workspace_service | workspace ]\n        \"resourceAction\": \"upgrade\", // &lt;-- currently only upgrade supported\n        \"properties\": [\n        {\n          \"name\": \"display_name\",\n          \"type\": \"string\",\n          \"value\": \"A new name here!\"\n        }]\n      },\n      {\n        \"stepId\": \"main\" // &lt;-- deployment of the VM resource\n      },\n</code></pre>"},{"location":"tre-templates/pipeline-templates/pipeline-schema/#substituting-resource-property-values","title":"Substituting Resource Property Values","text":"<p>It's possible to refer to properties from the primary resource (the resource that triggered this pipeline) in the template steps. The values will be substituted in at runtime.</p> <p>The syntax is <code>{{ resource.propertyName }}</code>. For example: <code>\"{{ resource.properties.display_name }}\"</code>.</p> <p>Example pipeline in <code>template_schema.json</code>: The below example references 2 properties from the primary resource to be used in updating the firewall shared service.</p> <pre><code>\"pipeline\": {\n    \"upgrade\": [\n      {\n        \"stepId\": \"1234567-87654-2345-6543\",\n        \"stepTitle\": \"Update a firewall rule\",\n        \"resourceTemplateName\": \"tre-shared-service-firewall\",\n        \"resourceType\": \"shared_service\", \n        \"resourceAction\": \"upgrade\",\n        \"arraySubstitutionAction\": \"replace\", // &lt;-- [append | remove | replace]\n        \"arrayMatchField\": \"name\", // &lt;-- name of the field in the array object to match on, for remove / replace\n        \"properties\": [\n        {\n          \"name\": \"rule_collections\",\n          \"type\": \"array\", // &lt;-- More on array types below\n          \"value\": { // &lt;-- value can be string or object\n              \"name\": \"my-firewall-rule-collection\",\n              \"action\": \"Allow\",\n              \"rules\": [\n                {\n                  \"name\": \"my-rules\",\n                  \"target_fqdns\": \"{{ resource.properties.fqdns_list }}\",\n                  \"source_addresses\": \"{{ resource.properties.address_prefixes }}\"\n                }\n          }\n        }]\n      },\n</code></pre>"},{"location":"tre-templates/pipeline-templates/pipeline-schema/#working-with-properties-containing-arrays","title":"Working with Properties Containing Arrays","text":"<p>It's possible that a resource property would actually be an array. As an example, the firewall shared service has the <code>rule_collections</code> property. This single property contains an array of objects. Since the values inside this array may have been sourced from different resources, it's important to leave other values in tact when modifying the property. To do so, the <code>arraySubstitutionAction</code> field supports the following values: - <code>append</code> - just append this object into the array - <code>replace</code> - find this object in the array (using the <code>arrayMatchField</code> value), and replace it with this value - <code>remove</code> - remove this property from the array (useful for <code>uninstall</code> actions)</p>"},{"location":"tre-templates/pipeline-templates/pipeline-schema/#notes","title":"Notes","text":"<ul> <li>Each step is executed in serial, in the order defined in the template</li> <li>Theoretically any number of steps could be created</li> <li>A step with <code>step_id</code> of <code>main</code> represents where in the chain the primary resource will get deployed. It is possible to omit this step altogether, and not touch the primary resource at all.</li> </ul>"},{"location":"tre-templates/shared-services/airlock-notifier/","title":"Airlock Notifications Shared Service","text":"<p>This shared service connects to the Airlock's notification event grid and send emails to the researchers/ws owners upon Airlock requests changes.</p>"},{"location":"tre-templates/shared-services/airlock-notifier/#development-and-modification","title":"Development and modification","text":"<p>This service was built with extensibility and modification in mind, since each organization might have different messaging platform and preferences.</p> <p>From that reason, and for low-code development, Airlock notification service (or Airlock Notifier) is defined in an Azure Logic App workflow.</p> <p>Editing the workflow can be done through the Azure Portal, or with the Azure Logic Apps (Standard) Visual Studio Code extension. In this repository, you will find that as the default, the email is sent using the Logic App SMTP connector. Since the connector is 'Managed', your environment or firewall must allow access for the outbound IP addresses used by these connectors in your datacenter region. In the future, the SMTP connection should transition into a 'Built-in connector', thus running in the same cluster as the Azure Logic Apps host runtime, and using virtual network (VNet) integration capabilities to access resources over a private network.</p> <p>As an alternative to the SMTP connector, you can modify the Logic app to use other email and messaging platforms as connectors, like Office 365, Outlook.com, MailChimp, Mandrill.</p>"},{"location":"tre-templates/shared-services/cyclecloud/","title":"Azure CycleCloud Shared Service","text":"<p>Azure CycleCloud is an enterprise-friendly tool for orchestrating and managing High Performance Computing (HPC) environments on Azure. This shared service deploys a single CycleCloud server, which can be used to by a TRE Administrator to create and manage multiple HPC clusters.</p> <p></p> <p>Used  \"as is\", this shared service is only appropriate for proof of concept work and small projects, however can be used as a starting point for more advanced scenarios.</p> <p>Using the CycleCloud cluster properties the TRE Administrator can choose which virtual network the cluster will be deployed into, and hence the workspace the cluster can be accessed from.</p> <p>At present there is no self service cluster creation for research teams, and as such costs are not attributed to individual workspace however this could be added in the future, and is tracked in this issue https://github.com/microsoft/AzureTRE/issues/2230.</p>"},{"location":"tre-templates/shared-services/cyclecloud/#deployment-and-configuration","title":"Deployment and Configuration","text":"<p>The CycleCloud shared service template needs registering with the TRE as per &lt;../../tre-admins/registering-templates/&gt; The templates can be found at <code>templates/shared_services/cyclecloud</code>.</p> <p>Prior to deploying the CycleCloud server, the license terms for any Azure VM marketplace images used by CycleCloud must be accepted. This can be done by running the following command while logged into the Azure CLI:</p> <pre><code>az vm image terms accept --urn azurecyclecloud:azure-cyclecloud:cyclecloud8:latest\naz vm image terms accept --urn almalinux:almalinux-hpc:8_5-hpc:latest\n</code></pre> <p>Deploy the CycleCloud server using UI or API.</p> <p>To connect to the CycleCloud server, the TRE Administrator must connect to the CycleCloud server from the administration jumpbox. Use Azure Bastion to connect to the jumpbox a with the username <code>admin</code> and the select the password located in your core KeyVault. Connect to the CycleCloud server at the URL: <code>https://cyclecloud-{TRE_ID}.{LOCATION}.cloudapp.azure.com/</code>.</p> <ul> <li>Provide a name for the cyclecloud server instance.</li> </ul> <p>-Review the terms and conditions and hit next.</p> <ul> <li>Provide your user details, including SSH key</li> </ul> <ul> <li>Hit Done, and wait for the add subscription dialog. Select the region your TRE is deployed into, leave the resource group as the default <code>&lt;Create New Per Cluster&gt;</code> and select the storage account beginning <code>stgcc</code>. This should look similar to:</li> </ul> <p></p> <ul> <li>Hit Save, and then \"Back to Clusters\"</li> </ul>"},{"location":"tre-templates/shared-services/cyclecloud/#create-a-cluster","title":"Create a Cluster","text":"<ul> <li>Before you start creating the cluster retrieve the last 4 digits of the workspace ID that you want to deploy the cluster into.</li> </ul> <ul> <li>Create a user in CycleCloud as per https://docs.microsoft.com/en-us/azure/cyclecloud/concepts/user-management?view=cyclecloud-8#adding-new-users-to-cyclecloud . The SSH key for the user will need to be created within the workspace and public key exporting. We suggest using the 4 digits retrieved in step 1 as part of the user account.</li> </ul> <ul> <li>Select your cluster type, we have tested Slurm and Grid Engine using the methods documented here.</li> </ul> <ul> <li>Give the cluster a name - again we suggest using the last 4 digits of the workspace ID as part of the name.Click Next.</li> </ul> <ul> <li>Select your required settings. In the Subnet ID box, choose the <code>ServicesSubnet</code> in the resource group and virtual network containing the 4 digit workspace ID. Click Next.</li> </ul> <ul> <li>Configure any storage settings and click Next.</li> </ul> <ul> <li>Under advanced settings, under advanced networking - uncheck Return Proxy, and Public Head node. Click Next.</li> </ul> <ul> <li>Under cloud init, paste the below script, with the appropriate values for TRE ID and Region into each of the nodes to ensure the package mirror is used.</li> </ul> <pre><code>#!/bin/sh\nTRE_ID=\"mrtredemo2\"\nREGION=\"westeurope\"\n\nls /etc/yum.repos.d/*.repo | xargs sed -i 's/mirrorlist/# mirrorlist/g'\nls /etc/yum.repos.d/*.repo | xargs sed -i \"s,# baseurl=https://repo.almalinux.org/,baseurl=https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/almalinux/,g\"\n\nyum -y install epel-release\nls /etc/yum.repos.d/*.repo | xargs sed -i 's/metalink/# metalink/g'\nls /etc/yum.repos.d/*.repo | xargs sed -i \"s,#baseurl=https://download.example/pub/epel/,baseurl=https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/fedoraproject/pub/epel/,g\"\n\nyum -y install python3 python3-pip\n\nsudo tee /etc/pip.conf &lt;&lt;EOF\n[global]\nindex = https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/pypi/pypi\nindex-url = https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/pypi/simple\ntrusted-host = https://nexus-$TRE_ID.$REGION.cloudapp.azure.com\nEOF\n\nsudo cat &gt; /etc/yum.repos.d/cyclecloud.repo &lt;&lt;EOF\n[cyclecloud]\nname=cyclecloud\nbaseurl=https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/microsoft-yumrepos/cyclecloud\ngpgcheck=1\ngpgkey=https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/microsoft-keys/microsoft.asc\nEOF\n\nrpm --import https://nexus-$TRE_ID.$REGION.cloudapp.azure.com/repository/almalinux/almalinux/RPM-GPG-KEY-AlmaLinux\n</code></pre> <ul> <li>Click Save.</li> </ul> <ul> <li>Under the new cluster, click Access and add the user created earlier and configure node access.</li> </ul> <ul> <li>Start the cluster, ensure the cluster starts successfully and provide the users connection details as detailed here: https://docs.microsoft.com/en-us/azure/cyclecloud/how-to/connect-to-node?view=cyclecloud-8</li> </ul>"},{"location":"tre-templates/shared-services/gitea/","title":"Gitea Shared Service","text":"<p>As outbound access to public git repositories such as GitHub is often blocked a git mirror may be required. Gitea can be deployed as a shared service to offer this functionality.</p> <p>Documentation on Gitea can be found here: https://docs.gitea.io/.</p>"},{"location":"tre-templates/shared-services/gitea/#deploy","title":"Deploy","text":"<p>To deploy this shared service you should use the UI (or the API) to issue a request. If you don't see the option available for this specific template make sure it has been built, published and registered by the TRE Admin.</p>"},{"location":"tre-templates/shared-services/gitea/#getting-started","title":"Getting Started","text":"<p>Connect to the Gitea admin console <code>https://yourtreuri/gitea/</code> with the <code>giteaadmin</code> user. You can find the password in keyvault as <code>gitea password</code>.</p>"},{"location":"tre-templates/shared-services/gitea/#configuring-repositories","title":"Configuring repositories","text":"<p>By default, this Gitea instance does not have any repositories configured. You can add repositories to Gitea either by using the command line or by using the Gitea web interface.</p>"},{"location":"tre-templates/shared-services/gitea/#command-line","title":"Command Line","text":"<p>Make sure you run the following commands using git bash and set your current directory as C:/AzureTRE.</p> <ol> <li>On the jumbox, run: <code>./templates/workspace_services/gitea/gitea_migrate_repo.sh -t &lt;tre_id&gt; -g &lt;URL_of_github_repo_to_migrate&gt;</code></li> <li>If you have issues with token or token doesn't work, you can reset the token by setting it's value to null in Key Vault: <code>az keyvault secret set --name gitea-&lt;tre-id&gt;-admin-token --vault-name kv-&lt;tre-id&gt; --value null</code></li> </ol>"},{"location":"tre-templates/shared-services/gitea/#gitea-web-interface","title":"Gitea Web Interface","text":"<ol> <li>on the jumbox, open Edge and go to: <code>https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/</code></li> <li>Authenticate yourself using username <code>giteaadmin</code> and the secret <code>&lt;gitea-TRE_ID-administrator-password&gt;</code> stored in the keyvault,</li> <li>Add the repository of your choice</li> </ol>"},{"location":"tre-templates/shared-services/gitea/#verify-can-access-the-mirrored-repository","title":"Verify can access the mirrored repository","text":"<p>From a virtual machine within a workspace: - Command line: <code>git clone https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/giteaadmin/&lt;NameOfrepository&gt;</code> - Gitea Web Interface: <code>https://gitea-&lt;TRE_ID&gt;.azurewebsites.net/</code></p>"},{"location":"tre-templates/shared-services/gitea/#network-requirements","title":"Network requirements","text":"<p>Gitea needs to be able to access the following resource outside the Azure TRE VNET via explicitly allowed Service Tags or URLs.</p> Service Tag / Destination Justification AzureActiveDirectory Authorize the signed in user against Microsoft Entra ID. AzureContainerRegistry Pull the Gitea container image, as it is located in Azure Container Registry. (www.)github.com Allows Gitea to mirror any repo on GitHub"},{"location":"tre-templates/shared-services/gitea/#upgrading-to-version-100","title":"Upgrading to version 1.0.0","text":"<p>Migrating existing Gitea services to the major version 1.0.0 is not currently supported. This is due to the breaking change in the Terraform to migrate from the deprecated mysql_server to the new mysql_flexible_server.</p>"},{"location":"tre-templates/shared-services/nexus/","title":"Nexus Shared Service","text":"<p>Sonatype Nexus (RepoManager) allows users in workspaces to access external software packages securely.</p> <p>Documentation on Nexus can be found here: https://help.sonatype.com/repomanager3/.</p>"},{"location":"tre-templates/shared-services/nexus/#deploy","title":"Deploy","text":"<p>Caution</p> <p>Before deploying the Nexus service, you will need workspaces of version <code>0.3.2</code> or above due to a dependency on a DNS zone link for the workspace(s) to connect to the Nexus VM.</p> <p>Before deploying the Nexus shared service, you need to make sure that it will have access to a certificate to configure serving secure proxies. By default, the Nexus service will serve proxies from <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/</code>, and thus it requires a certificate that validates ownership of this domain to use for SSL.</p> <p>You can use the Certs Shared Service to set one up by following these steps:</p> <ol> <li> <p>Run the below command in your terminal to build, publish and register the certs bundle:</p> <pre><code>make shared_service_bundle BUNDLE=certs\n</code></pre> </li> <li> <p>Navigate to the TRE UI, click on Shared Services in the navigation menu and click Create new.</p> </li> <li> <p>Select the Certs template, then fill in the required details. Domain prefix should be set to <code>nexus</code> and Cert name should be <code>nexus-ssl</code>.</p> </li> </ol> <p>Caution</p> <p>If you have Key Vault Purge Protection enabled and are re-deploying your environment using the same <code>cert_name</code>, you may encounter this: <code>Status=409 Code=\\\"Conflict\\\" Message=\\\"Certificate nexus-ssl is currently in a deleted but recoverable state</code>. You need to either manually recover the certificate or purge it before redeploying.</p> <p>Once deployed, the certs service will use Let's Encrypt to generate a certificate for the specified domain prefix followed by <code>-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>, so in our case, having entered <code>nexus</code>, this will be <code>nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>, which will be the public domain for our Nexus service.</p> <p>You can verify whether this has been successful by navigating to your core Key Vault (<code>kv-{TRE_ID}</code>) and looking for a certificate called <code>nexus-ssl</code> (or whatever you called it).</p> <p>After verifying the certificate has been generated, you can deploy Nexus:</p> <ol> <li> <p>Run the below command in your terminal to build, publish and register the Nexus shared service bundle:</p> <pre><code>make shared_service_bundle BUNDLE=sonatype-nexus-vm\n</code></pre> </li> <li> <p>Navigate back to the TRE UI, and click Create new again within the Shared Services page.</p> </li> <li> <p>Select the Nexus template, then fill in the required details. The SSL certificate name should default to <code>nexus-ssl</code>, so there's no need to change it unless you gave it a different name in the previous step.</p> </li> </ol> <p>This will deploy the infrastructure required for Nexus, then start the service and configure it with the repository configurations located in the <code>./templates/shared_services/sonatype-nexus-vm/scripts/nexus_repos_config</code> folder. It will also set up HTTPS using the certificate you generated in the previous section, so proxies can be served at <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code>.</p>"},{"location":"tre-templates/shared-services/nexus/#setup-and-usage","title":"Setup and usage","text":"<ol> <li>A TRE Administrator can access Nexus though the admin jumpbox provisioned as part of the TRE deployment. The username is <code>adminuser</code> and the password is located in the Key Vault under <code>vm-&lt;tre-id&gt;-jumpbox-password</code></li> <li>A researcher can access Nexus from within the workspace by using the internal Nexus URL of <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com</code></li> <li>To fetch Python packages from the PyPI proxy, a researcher can use <code>pip install</code> while specifying the proxy server:<pre><code>pip install packagename --index-url https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/apt-pypi/simple\n</code></pre> </li> </ol> <p>Info</p> <p>In the built-in Linux and Windows Guacamole VM bundles, PyPI and several other package managers are already configured to use the Nexus proxy by default, so manually specifying in the install commands isn't necessary.</p>"},{"location":"tre-templates/shared-services/nexus/#network-requirements","title":"Network requirements","text":"<p>Nexus Shared Service requires access to resources outside of the Azure TRE VNET. These are set as part of the firewall provisioning pipeline via explicit allow on Service Tags or URLs.</p> Service Tag / Destination Justification AzureActiveDirectory Authorize the signed in user against Microsoft Entra ID. AzureContainerRegistry Pull the Nexus container image, as it is located in Azure Container Registry. pypi.org, *.pypi.org Enables Nexus to \"proxy\" python packages to use inside of workspaces. repo.anaconda.com Enables Nexus to \"proxy\" conda packages to use inside of workspaces. conda.anaconda.org Enables Nexus to \"proxy\" additional conda packages to use inside of workspaces such as conda-forge. *.docker.com Enables Nexus to \"proxy\" docker repos to use inside of workspaces. *.docker.io Enables Nexus to \"proxy\" docker repos to use inside of workspaces. archive.ubuntu.com Enables Nexus to \"proxy\" apt packages to use inside of workspaces. security.ubuntu.com Enables Nexus to \"proxy\" apt packages to use inside of workspaces."},{"location":"tre-templates/shared-services/nexus/#current-repos","title":"Current Repos","text":"Name Type Source URI Nexus URI Usage PyPI PyPI [https://pypi.org/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/pypi/</code> Allow use of pip commands. Conda conda [https://repo.anaconda.com/pkgs] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/conda-repo/</code> Configure conda to have access to default conda packages. Conda Mirror conda [https://conda.anaconda.org] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/conda-mirror/</code> Configure conda to have access to conda mirror packages. Docker apt [https://download.docker.com/linux/ubuntu/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/docker/</code> Install Docker via apt on Linux systems. Docker GPG raw [https://download.docker.com/linux/ubuntu/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/docker-public-key/</code> Provide public key to sign apt source for above Docker apt. Docker Hub docker [https://registry-1.docker.io] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/docker-hub/</code> Provide docker access to public images repo. Ubuntu Packages apt [http://archive.ubuntu.com/ubuntu/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/ubuntu/</code> Provide access to Ubuntu apt packages on Ubuntu systems. Ubuntu Security Packages apt [http://security.ubuntu.com/ubuntu/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/ubuntu-security/</code> Provide access to Ubuntu Security apt packages on Ubuntu systems. Almalinux yum [https://repo.almalinux.org] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/almalinux</code> Install Almalinux packages R-Proxy r [https://cran.r-project.org/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/r-proxy</code> Provide access to CRAN packages for R R-Studio Download raw [https://download1.rstudio.org] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/r-studio-download</code> Provide access to download R Studio Fedora Project yum [https://download-ib01.fedoraproject.org] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/fedoraproject</code> Install Fedora Project Linux packages Microsoft Apt apt [https://packages.microsoft.com] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/microsoft-apt</code> Provide access to Microsoft Apt packages Microsoft Keys raw [https://packages.microsoft.com/keys/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/microsoft-keys</code> Provide access to Microsoft keys Microsoft Yum yum [https://packages.microsoft.com/yumrepos] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/microsoft-yum</code> Provide access to Microsoft Yum packages Microsoft Download raw [https://download.microsoft.com/download] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/microsoft-download</code> Provide access to Microsoft Downloads VS Code Extensions raw [https://marketplace.visualstudio.com/_apis/public/gallery/publishers/] <code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/vscode-extensions/</code> Provide access to VS Code extensions"},{"location":"tre-templates/shared-services/nexus/#migrate-from-an-existing-v1-nexus-service-hosted-on-app-service","title":"Migrate from an existing V1 Nexus service (hosted on App Service)","text":"<p>If you still have an existing Nexus installation based on App Service (from the original V1 bundle), you can migrate to the VM-based Nexus service by following these steps:</p> <ol> <li> <p>Install the new Nexus service alongside your old installation using the steps from earlier in this document.</p> </li> <li> <p>Identify any existing Guacamole user resources that are using the old proxy URL (<code>https://nexus-{TRE_ID}.azurewebsites.net/</code>). These will be any VMs with bundle versions &lt; <code>0.3.2</code> that haven't been manually updated.</p> </li> <li> <p>These will need to be either re-deployed with the new template versions <code>0.3.2</code> or later and specifying an additional template parameter <code>\"nexus_version\"</code> with the value of <code>\"V2\"</code>, or manually have their proxy URLs updated by remoting into the VMs and updating the various configuration files of required package managers with the new URL (<code>https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/</code>).</p> <ol> <li>For example, pip will need the <code>index</code>, <code>index-url</code> and <code>trusted-host</code> values in the global <code>pip.conf</code> file to be modified to use the new URL.</li> </ol> </li> <li> <p>Once you've confirmed there are no dependencies on the old Nexus shared service, you can delete it using the API or UI.</p> </li> </ol>"},{"location":"tre-templates/shared-services/nexus/#renewing-certificates-for-nexus","title":"Renewing certificates for Nexus","text":"<p>The Nexus service checks Key Vault regularly for the latest certificate matching the name you passed on deploy (<code>nexus-ssl</code> by default).</p> <p>When approaching expiry, you can either provide an updated certificate into the TRE core KeyVault (with the name you specified when installing Nexus) if you brought your own, or if you used the certs shared service to generate one, just call the <code>renew</code> custom action on that service. This will generate a new certificate and persist it to the Key Vault, replacing the expired one.</p>"},{"location":"tre-templates/shared-services/nexus/#updating-to-v300","title":"Updating to v3.0.0","text":"<p>The newest version of Nexus is a significant update for the service. As a result, a new installation of Nexus will be necessary.</p> <p>We are currently in the process of developing an upgrade path for upcoming releases.</p>"},{"location":"tre-templates/shared-services/nexus/#using-docker-hub","title":"Using Docker Hub","text":"<p>When using Docker with a VM, the image URL should be constructed as follows: {NEXUS_URL}:{port}/docker-image</p> <pre><code>sudo docker pull {NEXUS_URL}:8083/hello-world\n</code></pre> <p>the default port out of the box is 8083</p> <p>Nexus will also need \"Anonymous Access\" set to \"Enable\". This can be done by logging into the Nexus Portal with the Admin user and following the prompts.</p>"},{"location":"tre-templates/shared-services/nexus/#using-the-vs-code-extensions","title":"Using the VS Code Extensions","text":"<p>To fetch and install VS Code extensions, use the following commands:</p> <pre><code>curl -o {publisher}-{extension}-{version}.vsix https://nexus-{TRE_ID}.{LOCATION}.cloudapp.azure.com/repository/vscode-extensions/{publisher}/vsextensions/{extension}/{version}/vspackage\n\ncode --install-extension {publisher}-{extension}-{version}.vsix\n</code></pre> <p>The extensions which are  available to users can be restricted by configuring content selectors using the package <code>path</code> via the SonatypeNexus RM web interface.</p> <p>If extensions want to be intalled in bulk, a script such as the following can be used:</p> <pre><code>#!/bin/bash\n\n# Function to display usage\nusage() {\n    echo \"Usage: $0 -t TRE_ID -l LOCATION [--install]\"\n    exit 1\n}\n\n# Parse command line arguments\nINSTALL=false\nwhile [[ \"$#\" -gt 0 ]]; do\n    case $1 in\n        -t|--tre-id) TRE_ID=\"$2\"; shift ;;\n        -l|--location) LOCATION=\"$2\"; shift ;;\n        --install) INSTALL=true ;;\n        *) usage ;;\n    esac\n    shift\ndone\n\n# Check if TRE_ID and LOCATION are provided\nif [ -z \"$TRE_ID\" ] || [ -z \"$LOCATION\" ]; then\n    usage\nfi\n\n# Define the list of extensions\nextensions=(\n    \"ms-python.debugpy@2024.14.0\"\n    \"ms-python.python@2024.22.0\"\n    \"ms-python.vscode-pylance@2024.12.1\"\n    \"ms-toolsai.datawrangler@1.14.0\"\n    \"ms-toolsai.jupyter@2024.10.0\"\n    \"ms-toolsai.jupyter-keymap@1.1.2\"\n    \"ms-toolsai.jupyter-renderers@1.0.21\"\n    \"ms-toolsai.vscode-jupyter-cell-tags@0.1.9\"\n    \"ms-toolsai.vscode-jupyter-slideshow@0.1.6\"\n)\n\n# Define the base URL\nbase_url=\"https://nexus-${TRE_ID}.${LOCATION}.cloudapp.azure.com/repository/vscode-extensions\"\n\n# Loop through each extension and download it\nfor ext in \"${extensions[@]}\"; do\n    IFS='@' read -r publisher_extension version &lt;&lt;&lt; \"$ext\"\n    IFS='.' read -r publisher extension &lt;&lt;&lt; \"$publisher_extension\"\n    vsix_file=\"${publisher}-${extension}-${version}.vsix\"\n    curl -o \"$vsix_file\" \"${base_url}/${publisher}/vsextensions/${extension}/${version}/vspackage\"\n\n    # Install the extension if --install flag is set\n    if [ \"$INSTALL\" = true ]; then\n        code --install-extension \"$vsix_file\"\n    fi\ndone\n</code></pre>"},{"location":"tre-templates/user-resources/custom/","title":"Guacamole User Resources","text":"<ul> <li>linuxvm - a Linux-based virtual machine</li> <li>windowsvm - A Windows-based virtual machine</li> </ul>"},{"location":"tre-templates/user-resources/custom/#customising-the-user-resources","title":"Customising the user resources","text":"<p>The <code>guacamole-azure-linuxvm</code> and <code>guacamole-azure-windowsvm</code> folders follow a consistent layout. To update one of these templates (or to create a new template based on these folders) to use different image details or VM sizes, there are a few files that need to be updated:</p> File Description <code>porter.yaml</code> This file describes the template and the name should be updated when creating a template based on the folder. This file also contains a <code>custom</code> data section that describes the VM properties. Additionally, the version needs to be updated to deploy an updated version <code>template_schema.json</code> This file controls the validation applied to the template, for example specifying the valid options for fields such as size and image"},{"location":"tre-templates/user-resources/custom/#configuration","title":"Configuration","text":"<p>In <code>porter.yaml</code>, the <code>custom</code> section contains a couple of sub-sections (shown below)</p> <pre><code>custom:\n  vm_sizes:\n    \"2 CPU | 8GB RAM\": Standard_D2s_v5\n    \"4 CPU | 16GB RAM\": Standard_D4s_v5\n    \"8 CPU | 32GB RAM\": Standard_D8s_v5\n    \"16 CPU | 64GB RAM\": Standard_D16s_v5\n  image_options:\n    \"Ubuntu 22.04 LTS\":\n      source_image_reference:\n        publisher: canonical\n        offer: 0001-com-ubuntu-server-jammy\n        sku: 22_04-lts-gen2\n        version: latest\n        apt_sku: 22.04\n      install_ui: true\n      conda_config: false\n    # \"Custom Image From Gallery\":\n    #   source_image_name: your-image\n    #   install_ui: true\n    #   conda_config: true\n</code></pre> <p>The <code>vm_sizes</code> section is a map of a custom SKU description to the SKU identifier.</p> <p>The <code>image_options</code> section defined the possible image choices for the template (note that the name of the image used here needs to be included in the corresponding enum in <code>template_schema.json</code>).</p> <p>Within the image definition in <code>image_options</code> there are a few properties that can be specified:</p> Name Description <code>source_image_name</code> Specify VM image to use by name (see notes below for identifying the image gallery containing the image) <code>source_image_reference</code> Specify VM image to use by <code>publisher</code>, <code>offer</code>, <code>sku</code> &amp; <code>version</code> (e.g. for Azure Marketplace images) <code>install_ui</code> (Linux only) Set <code>true</code> to install desktop environment <code>conda_config</code> Set true to configure conda <p>When specifying images using <code>source_image_name</code>, the image must be stored in an image gallery. To enable re-using built user resource templates across environments where the image may vary, the image gallery is configured via the <code>RP_BUNDLE_VALUES</code> environment variable when deploying the TRE. The <code>RP_BUNDLE_VALUES</code> variable is a JSON object, and the <code>image_gallery_id</code> property within it identifies the image gallery that contains the images specified by <code>source_image_name</code>:</p> <pre><code>RP_BUNDLE_VALUES='{\"image_gallery_id\": \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/&lt;your-rg&gt;/providers/Microsoft.Compute/galleries/&lt;your-gallery-name&gt;\"}\n</code></pre>"},{"location":"tre-templates/user-resources/export-reviewvm/","title":"Guacamole User Resource Service bundle (Windows)","text":"<p>This is a User Resource Service template. It defines a VM to be used by TRE Airlock Managers with Guacamole server. It blocks all inbound traffic to the internet and allows only RDP connections from within the vnet.</p> <p>It also blocks all outbound traffic except for traffic to Airlock Export In-Review storage account within the workspace.For more information about Airlock, see overview page.</p> <p>Data that needs to be reviewed will be downloaded onto the VM during VM creation, and available on Desktop.</p> <p>It can be only deployed by an Airlock Manager.</p>"},{"location":"tre-templates/user-resources/export-reviewvm/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> <li>A guacamole workspace service bundle installed</li> </ul>"},{"location":"tre-templates/user-resources/guacamole-linux-vm/","title":"Guacamole User Resource Service bundle (Linux)","text":"<p>This is a User Resource Service template. It defines a Linux-based VM to be used by TRE researchers and to be connected to using a Guacamole server. It blocks all inbound and outbound traffic to the internet and allows only RDP connections from within the vnet.</p>"},{"location":"tre-templates/user-resources/guacamole-linux-vm/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> <li>A guacamole workspace service bundle installed</li> <li>A Nexus shared service has been deployed</li> </ul>"},{"location":"tre-templates/user-resources/guacamole-linux-vm/#notes","title":"Notes","text":"<ul> <li>Nexus is a prerequisite of installing the Linux VMs given the additional commands in the bootstrap scripts.</li> <li>In production we recommend using VM images to avoid transient issues downloading and installing packages. The included user resource templates for VMs with bootstrap scripts should only be used for trial/demonstration purposes. More info can be found here.</li> <li>Snap (app store for linux via snapcraft.io) hasn't been configured to work via the nexus proxy</li> </ul>"},{"location":"tre-templates/user-resources/guacamole-linux-vm/#modifying-the-dpi-of-the-linux-vm-display","title":"Modifying the DPI of the Linux VM display","text":"<p>Depending on the display resolution and your personal preference, you may want to adjust the DPI (Dots Per Inch) setting of your Linux VM to make text and UI elements appear larger or smaller, and hence clearer. This can be done by modifying the Xft.dpi value in <code>.Xresources</code> file.</p> <p>After running this command, you may need to run <code>reboot</code> to restart the VM so that the changes to take effect.</p>"},{"location":"tre-templates/user-resources/guacamole-linux-vm/#using-custom-images","title":"Using Custom Images","text":"<p>For custom image usage, visit this page.</p>"},{"location":"tre-templates/user-resources/guacamole-windows-vm/","title":"Guacamole User Resource Service bundle (Windows)","text":"<p>This is a User Resource Service template. It defines a Windows 10/Server 2019 VM to be used by TRE researchers and to be connected to using a Guacamole server. It blocks all inbound and outbound traffic to the internet and allows only RDP connections from within the vnet.</p>"},{"location":"tre-templates/user-resources/guacamole-windows-vm/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> <li>A guacamole workspace service bundle installed</li> </ul>"},{"location":"tre-templates/user-resources/import-reviewvm/","title":"Guacamole User Resource Service bundle (Windows)","text":"<p>This is a User Resource Service template. It defines a VM to be used by TRE Airlock Managers with Guacamole server. It blocks all inbound traffic to the internet and allows only RDP connections from within the vnet.</p> <p>When deployed in an Airlock Import Review workspace, it has access to the Airlock Import In-Progress storage account outside of the workspace. For more information about Airlock, see overview page.</p> <p>Data that needs to be reviewed will be downloaded onto the VM during VM creation, and available on Desktop.</p> <p>It can be only deployed by an Airlock Manager.</p>"},{"location":"tre-templates/user-resources/import-reviewvm/#prerequisites","title":"Prerequisites","text":"<ul> <li>An Airlock Import workspace bundle installed</li> <li>A guacamole workspace service bundle installed in that workspace</li> </ul>"},{"location":"tre-templates/workspace-services/azure-ml/","title":"Azure Machine Learning Service bundle","text":"<p>See: https://azure.microsoft.com/services/machine-learning/</p> <p>This service installs the following resources into an existing virtual network within the workspace:</p> <p></p> <p>When deploying the service the Azure ML workspace can be exposed publicly or access restricted to the virtual network. Depending on the choice appropriate network security rules are added. This also means that in the public configuration compute instances can be deployed with public IPs, and in the private configuration they must be deployed with no public IP.</p> <p>Any users with the role of <code>Workspace Researcher</code> will be assigned the <code>AzureML Data Scientist</code> role within the AML workspace.</p> <p>To ensure AML compute instances are deployed with the appropriate configuration we suggest they are deployed using an Compute Instance User Resource.</p>"},{"location":"tre-templates/workspace-services/azure-ml/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> </ul>"},{"location":"tre-templates/workspace-services/azuresql/","title":"Azure SQL Workspace Service","text":"<p>See: Azure SQL Database</p>"},{"location":"tre-templates/workspace-services/azuresql/#prerequisites","title":"Prerequisites","text":"<ul> <li>The base workspace deployed, or a workspace derived from the base workspace</li> </ul> <ul> <li> <p>The Azure SQL workspace service container image published to your TRE:</p> <p><code>make workspace_service_bundle BUNDLE=azuresql</code></p> </li> </ul> <ul> <li>Guacamole, with a VM containing SQL Server Management Studio or Azure Data Studio in order to connect - the Azure Data Science VM template contains both of these</li> </ul>"},{"location":"tre-templates/workspace-services/azuresql/#authentication","title":"Authentication","text":"<ul> <li>Server name:  Shown on the details page of the service in the Azure TRE portal under Azure SQL FQDN</li> <li>Authentication method: SQL Server Authentication</li> <li>Administrator credentials:<ul> <li>Username:  azuresqladmin</li> <li>Password:  (available in the workspace keyvault)</li> </ul> </li> </ul>"},{"location":"tre-templates/workspace-services/azuresql/#supported-skus","title":"Supported SKUs","text":"<p>The following Azure SQL SKUs have been added to the template:</p> Service Tier Level DTUs Standard S1 20 DTUs Standard S2 50 DTUs Standard S3 100 DTUs Standard S4 200 DTUs Standard S6 400 DTUs <p>For costs please Azure SQL Database pricing and select DTU as the purchase model.</p>"},{"location":"tre-templates/workspace-services/azuresql/#adding-new-skus","title":"Adding new SKUs","text":"<p>To add new SKU options within the template, please determine the SKU names using:</p> <pre><code>az sql db list-editions --location &lt;AZURE_REGION&gt; --output table\n</code></pre> <p>Then add the SKUs in the following places:</p> <ol> <li>In the <code>templates/workspace_services/azuresql/template_schema.yaml</code> file under <code>properties.sql_sku.enum</code>.</li> <li>In the <code>templates/workspace_services/azuresql/terraform/locals.tf</code> file under <code>azuresql_sku</code>.</li> <li>Above in this document.</li> </ol> <p>Once added, increment the version number in the <code>templates/workspace_services/azuresql/porter.yaml</code> file, and republish the template with the following command:</p> <p><code>make workspace_service_bundle BUNDLE=azuresql</code></p>"},{"location":"tre-templates/workspace-services/databricks/","title":"Azure Databricks workspace service bundle","text":"<p>See: https://azure.microsoft.com/en-us/products/databricks/</p> <p>This service along with Azure Databricks Private Authentication Shared Service installs the following resources into an existing virtual network within the workspace:</p> <p></p> <p>This service uses a JSON file to store the various network endpoints required by Databricks to function.</p> <p>If you hit networking related issues when deploying or using Databricks, please ensure this file https://github.com/microsoft/AzureTRE/blob/main/templates/workspace_services/databricks/terraform/databricks-udr.json contains the approprate settings for the region you are using.</p> <p>The required settings for each region can be extracted from this document: https://learn.microsoft.com/azure/databricks/resources/supported-regions.</p>"},{"location":"tre-templates/workspace-services/databricks/#properties","title":"Properties","text":"<ul> <li><code>is_exposed_externally</code> - If <code>True</code>, the Azure Databricks workspace is accessible from outside of the workspace virtual network. If <code>False</code> use a Guacamole VM and copy the <code>connection_uri</code> to access Databricks workspace.</li> </ul>"},{"location":"tre-templates/workspace-services/databricks/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> <li>An Azure Databricks Private Authentication Shared Service deployed - required for authenticating to an Azure Databricks workspace.</li> </ul>"},{"location":"tre-templates/workspace-services/databricks/#references","title":"References","text":"<ul> <li>Databricks workspace service and authentication shared service deployed according to simplified deployment, for more information see: Enable Azure Private Link as a simplified deployment</li> </ul>"},{"location":"tre-templates/workspace-services/gitea/","title":"Gitea Workspace Service","text":"<p>See: https://gitea.io/</p>"},{"location":"tre-templates/workspace-services/gitea/#firewall-rules","title":"Firewall Rules","text":"<p>The Gitea worskpace service opens outbound access to:</p> <ul> <li>AzureActiveDirectory</li> <li>Microsoft Entra ID CDN - <code>https://aadcdn.msftauth.net</code></li> </ul>"},{"location":"tre-templates/workspace-services/gitea/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace deployed</li> </ul> <ul> <li> <p>The Gitea workspace service container image needs building and pushing:</p> <p><code>make workspace_service_bundle BUNDLE=gitea</code></p> </li> </ul>"},{"location":"tre-templates/workspace-services/gitea/#authenticating-to-gitea-and-setting-up-a-local-username-and-password","title":"Authenticating to Gitea and setting up a local username and password","text":"<ol> <li>Navigate to the Gitea workspace service using the connection URI from the details tab.</li> <li>and from the menu click the <code>Sign in</code> button.</li> <li>Click sign in with OpenID button and sign in with the same credentials used to access the workspace.</li> <li>Once succesfully signed in choose a username.</li> <li>Navigate to the user settings and under the account tab set a password for your account( <code>https://&lt;gitea_url&gt;/user/settings/account</code> ). This username and passowrd should be used to authenticate against Gitea when carrying out git operations.</li> </ol>"},{"location":"tre-templates/workspace-services/gitea/#upgrading-to-version-100","title":"Upgrading to version 1.0.0","text":"<p>Migrating existing Gitea services to the major version 1.0.0 is not currently supported. This is due to the breaking change in the Terraform to migrate from the deprecated mysql_server to the new mysql_flexible_server.</p>"},{"location":"tre-templates/workspace-services/guacamole/","title":"Guacamole Service bundle","text":"<p>See: https://guacamole.apache.org/</p>"},{"location":"tre-templates/workspace-services/guacamole/#firewall-rules","title":"Firewall Rules","text":"<p>Please be aware that the following Firewall rules are opened for the workspace when this service is deployed:</p> <p>Service Tags:</p> <ul> <li>AzureActiveDirectory</li> </ul>"},{"location":"tre-templates/workspace-services/guacamole/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace bundle installed</li> </ul>"},{"location":"tre-templates/workspace-services/guacamole/#guacamole-workspace-service-configuration","title":"Guacamole Workspace Service Configuration","text":"<p>When deploying a Guacamole service into a workspace the following properties need to be configured.</p>"},{"location":"tre-templates/workspace-services/guacamole/#optional-properties","title":"Optional Properties","text":"Property Options Description <code>guac_disable_copy</code> <code>true</code>/<code>false</code> (Default: <code>true</code>) Disable Copy functionality <code>guac_disable_paste</code> <code>true</code>/<code>false</code> (Default: <code>false</code>) Disable Paste functionality\" <code>guac_enable_drive</code> <code>true</code>/<code>false</code> (Default: <code>true</code>) Enable mounted drive <code>guac_disable_download</code> <code>true</code>/<code>false</code> (Default: <code>true</code>) Disable files download <code>guac_disable_upload</code> <code>true</code>/<code>false</code> (Default: <code>true</code>) Disable files upload <code>is_exposed_externally</code> <code>true</code>/<code>false</code> (Default: <code>true</code>) Is the Guacamole service exposed outside of the vnet"},{"location":"tre-templates/workspace-services/health_services/","title":"Azure Health Data Services Workspace Service","text":"<p>See Azure Health Data Services Documentation.</p>"},{"location":"tre-templates/workspace-services/health_services/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace deployed</li> </ul>"},{"location":"tre-templates/workspace-services/health_services/#azure-healthcare-workspace","title":"Azure Healthcare Workspace","text":"<p>Each Azure Health Data Services workspace service creates a Healthcare Workspace. In addition, when creating this workspace service you can choose to deploy FHIR and DICOM instances within the newly created healthcare workspace.</p> <p></p>"},{"location":"tre-templates/workspace-services/health_services/#authentication","title":"Authentication","text":"<p>Learn more about authentication and application roles in this doc. Make sure to assign your users/apps with the required role and follow the guidelines to retrieve a token.</p> <p>Notice: If you are using a separate tenant for authentication follow this documentation to assign users/apps to your FHIR instance.</p>"},{"location":"tre-templates/workspace-services/mysql/","title":"MySQL Workspace Service","text":"<p>See: MySQL Azure</p>"},{"location":"tre-templates/workspace-services/mysql/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace deployed</li> </ul> <ul> <li> <p>The MySQL workspace service container image needs building and pushing:</p> <p><code>make workspace_service_bundle BUNDLE=mysql</code></p> </li> </ul>"},{"location":"tre-templates/workspace-services/mysql/#authenticating-to-mysql","title":"Authenticating to MySQL","text":"<ol> <li>Navigate to the MySQL workspace service using the <code>Mysql fqdn</code> from the details tab.</li> <li>Using the Password found in Key Vault and the Username <code>mysqladmin</code></li> <li>Connect to the MySQL server on a VM with the following command shown below    <code>mysql -h [fqdn] -u [username] -p [password]</code></li> </ol>"},{"location":"tre-templates/workspace-services/mysql/#upgrading-to-version-100","title":"Upgrading to version 1.0.0","text":"<p>Migrating existing MySQL services to the major version 1.0.0 is not currently supported. This is due to the breaking change in the Terraform to migrate from the deprecated mysql_server to the new mysql_flexible_server.</p>"},{"location":"tre-templates/workspace-services/ohdsi/","title":"OHDSI Workspace Service","text":"<p>Warning</p> <ul> <li>This workspace service does not work \"out of the box\". It requires additional networking configuration to work properly. See the networking configuration section for more details.</li> <li>Currently the only CDM data source supported by the workspace service is Azure Synapse.</li> </ul> <p>See the official OHDSI website and The Book of OHDSI.  </p> <p>This service installs the following resources into an existing virtual network within the workspace: </p>"},{"location":"tre-templates/workspace-services/ohdsi/#networking-configuration","title":"Networking configuration","text":"<p>Deploying the OHDSI workspace is not enough for it to function properly, in order for it to work properly, the following networking configuration should be in place:</p>"},{"location":"tre-templates/workspace-services/ohdsi/#1-the-resource-processor-should-be-able-to-access-the-cdm-data-source","title":"1. The resource processor should be able to access the CDM data source","text":"<p>Multiple OHDSI workspace services cannot share the same RESULTS and TEMP schemas because each OHDSI instance is changing the schemas, which could potentially cause conflicts. To avoid this, every workspace service must work on its own schemas. To do this, we use golden copying. This means that the \"main\" schemas remain untouched, and every workspace service has its own copy of the RESULTS and TEMP schemas, in the CDM data source, which it can modify.</p> <p>Since the resource processor is in charge of duplicating the schemas, the CDM data source has to be accessible from the resource processor's VNet in order to be able to create them.</p>"},{"location":"tre-templates/workspace-services/ohdsi/#2-the-workspace-should-be-able-to-access-the-cdm-data-source","title":"2. The workspace should be able to access the CDM data source","text":"<p>In order to access the CDM from ATLAS, the CDM data source should be accessible from the workspace's VNet. Since the CDM data source is outside of TRE, this is not part of the template, however, there are many ways in which this can be done, one example would be to to deploy a private endpoint for the CDM data source in the workspace's VNet as part of a custom workspace template.</p>"},{"location":"tre-templates/workspace-services/ohdsi/#setting-up-a-cdm-data-source","title":"Setting up a CDM data source","text":"<p>Currently the only CDM data source supported by the workspace service is Azure Synapse.  </p> <p>If you already have an OMOP CDM data source, then all you have to do is to configure the network as described in the networking configuration section.  </p> <p>If you're data is in a different format, you can read here how to set up the ETL process to convert your medical data to OMOP format.  </p>"},{"location":"tre-templates/workspace-services/ohdsi/#using-a-sample-cdm-data-source","title":"Using a sample CDM data source","text":"<p>If you don't have any data yet, or if you just want a quick start, you can deploy an Azure Synapse CDM data source with sample data using the OHDSI on Azure repository. When deploying set <code>OMOP CDM Database Type</code> to <code>Synapse Dedicated Pool</code> as per the deployment guide.</p> <p>Note that you will need to provision a private endpoint into the Azure TRE workspace that connects to the SQL Dedicated Pool as described in the networking configuration section.  </p>"},{"location":"tre-templates/workspace-services/openai/","title":"OpenAI Workspace Service","text":"<p>See: Azure OpenAI Service</p>"},{"location":"tre-templates/workspace-services/openai/#prerequisites","title":"Prerequisites","text":"<ul> <li>A base workspace deployed</li> </ul> <ul> <li> <p>The OpenAI workspace service container image needs building and pushing:</p> <p><code>make workspace_service_bundle BUNDLE=openai</code></p> </li> </ul>"},{"location":"tre-templates/workspace-services/openai/#authenticating","title":"Authenticating","text":"<ol> <li>The open AI domain and deployment id can be found from the details tab.</li> <li>When communicating with the API, an \"api_key\" is required. This can be found in the Key Vault.</li> </ol>"},{"location":"tre-templates/workspace-services/openai/#properties","title":"Properties","text":"<ul> <li><code>is_exposed_externally</code> - If <code>True</code>, the OpenAI workspace is accessible from outside of the workspace virtual network.</li> <li><code>openai_model</code> - The model to use for the OpenAI deployment <code>&lt;model name&gt; | &lt;model version&gt;</code>. The default is <code>gpt-35-turbo | 0301</code>.</li> <li>Important note: Models are subject to different quota and region availability and the deployment may fail if you don't have the correct quota. Please review this link on current limits and how to request increases: Open AI Quotas</li> </ul>"},{"location":"tre-templates/workspaces/airlock-import-review/","title":"Airlock Import Review workspace","text":"<p>Airlock Import Review workspace is used as part of Review workflow for Airlock. It allows to review Airlock Data Import requests from, by providing a workspace to spin up VMs in that then can access the in-progress storage account.</p> <p>The workspace is built upon the base workspace template. It adds a private endpoint to connect to Imlort In-Progress storage account, and disables shared storage for VMs.</p>"},{"location":"tre-templates/workspaces/base/","title":"Azure TRE base workspace","text":"<p>The base workspace template is the foundation that all other workspaces and workspace services are built upon. Alternative workspace architectures could be used. However, the templates provided in this repository rely on the specific architecture of this base workspace.</p> <p>The base workspace template contains the following resources:</p> <ul> <li>Virtual Network</li> <li>Storage Account</li> <li>Key Vault</li> <li>VNet Peer to Core VNet</li> <li>Network Security Group</li> <li>App Service Plan</li> </ul>"},{"location":"tre-templates/workspaces/base/#workspace-configuration","title":"Workspace Configuration","text":"<p>When deploying a workspace the following properties need to be configured.</p>"},{"location":"tre-templates/workspaces/base/#required-properties","title":"Required Properties","text":"Property Options Description <code>client_id</code> Valid client ID of the Workspace App Registration. The OpenID client ID which should be submitted to the OpenID service when necessary. This value is typically provided to you by the OpenID service when OpenID credentials are generated for your application. <code>client_secret</code> Valid client secret."},{"location":"tre-templates/workspaces/base/#azure-trusted-services","title":"Azure Trusted Services","text":"<p>Azure Trusted Services are allowed to connect to both the key vault and storage account provsioned within the workspace. If this is undesirable additonal resources without this setting configured can be deployed.</p> <p>Further details around which Azure services are allowed to connect can be found below:</p> <ul> <li>Key Vault: https://docs.microsoft.com/en-us/azure/key-vault/general/overview-vnet-service-endpoints#trusted-services</li> <li>Azure Storage: https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security?msclkid=ee4e79e4b97911eca46dae54da464d11&amp;tabs=azure-portal#trusted-access-for-resources-registered-in-your-subscription</li> </ul>"},{"location":"tre-templates/workspaces/unrestricted/","title":"Unrestricted workspace","text":"<p>The unrestricted workspace template is a workspace template that allows for unrestricted access to the Internet from inside the workspace virtual network. This is useful for working on open data sets where data exfiltration is not a concern.</p> <p>This workspace template builds upon the base workspace template by adding additional firewall rules and disabling the airlock.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/","title":"Authoring templates","text":"<p>Azure TRE workspaces, workspace services, shared services, and user resources are Porter bundles. Porter bundles are based on Cloud Native Application Bundles (CNAB).</p> <p>Authors are free to choose the technology stack for provisioning resources (e.g., ARM templates, Terraform etc.), but the Azure TRE framework sets certain requirements for the bundle manifests, which specify the credentials, input and output parameters, deployment actions among other things.</p> <p>This document describes the requirements, and the process to author a template.</p> <p>Tip</p> <p>Use the base workspace bundle as reference or as the basis for the new bundle.</p> <p>To create a bundle from scratch follow the Porter Quickstart Guide (<code>porter create</code> CLI command will generate a new bundle in the current directory).</p> <p>Read more about Porter in Resource Processor doc.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed</li> <li>Porter installed</li> <li>Azure TRE instance deployed to test against</li> </ul>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#workspace-bundle-manifest","title":"Workspace bundle manifest","text":"<p>The manifest of a workspace bundle is the <code>porter.yaml</code> file (see Author Bundles in Porter documentation). This section describes the mandatory credentials, input and output parameters of a TRE workspace bundle.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#credentials","title":"Credentials","text":"<p>A workspace bundle requires the following credentials to provision resources in Azure:</p> <ul> <li>Azure tenant ID</li> <li>Azure subscription ID</li> <li>The client ID of a service principal with privileges to provision resources</li> <li>The client secret (password) of a service principal</li> </ul> <p>The credentials are provided as environment variables by the deployment runner. The bundle author must use the following environment variable names:</p> <pre><code>ARM_TENANT_ID\nARM_SUBSCRIPTION_ID\nARM_CLIENT_ID\nARM_CLIENT_SECRET\n</code></pre> <p>The names of the Porter credentials (<code>name</code> field in <code>porter.yaml</code>) can be freely chosen by the author.</p> <p>Example:</p> <pre><code>credentials:\n  - name: azure_tenant_id\n    env: ARM_TENANT_ID\n  - name: azure_subscription_id\n    env: ARM_SUBSCRIPTION_ID\n  - name: azure_client_id\n    env: ARM_CLIENT_ID\n  - name: azure_client_secret\n    env: ARM_CLIENT_SECRET\n</code></pre>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#parameters","title":"Parameters","text":"<p>This section describes the mandatory (input) parameters of a workspace bundle manifest.</p> Parameter Type Description Example value <code>tre_id</code> string Unique ID of for the TRE instance. <code>tre-dev-42</code> <code>workspace_id</code> string Unique 4-character long, alphanumeric workspace ID. <code>0a9e</code> <code>azure_location</code> string Azure location (region) to deploy the workspace resource to. <code>westeurope</code> <code>address_space</code> string VNet address space for the workspace services. <code>10.2.1.0/24</code> <p><code>tre_id</code> can be found in the resource names of the Azure TRE instance; for example the resource group name of the Azure TRE instance based on the example in the above table would be \"<code>rg-tre-dev-42</code>\".</p> <p>Similarly to <code>tre_id</code>, <code>workspace_id</code> is used in the resource names of the workspace. The resource group name of the workspace must be of form \"<code>rg-&lt;tre_id&gt;-ws-&lt;workspace_id&gt;</code>\", for example: \"<code>rg-tre-dev-42-ws-0a9e</code>\".</p> <p>All the values for the required parameters will be provided by the deployment runner.</p> <p>Any custom parameters are picked up by Azure TRE API and will be queried from the user deploying the workspace bundle. Custom parameters should also be defined in the <code>template_schema.json</code> file at the root of the bundle. This file follows the JSON schema standard and can be used by a user interface to generate a UI for the user to input the parameters.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#output","title":"Output","text":"<p>Todo</p> <p>After a workspace with virtual machines is implemented this section can be written based on that. (Outputs in Porter documentation to be linked here too.)</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#actions","title":"Actions","text":"<p>The required actions are the main two of CNAB spec:</p> <ul> <li><code>install</code> - Deploys/repairs the workspace Azure resources, and must be idempotent</li> <li><code>uninstall</code> - Tears down (deletes) the Azure resources of the workspace and its services</li> </ul>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#workspace-service-bundle-manifests","title":"Workspace service bundle manifests","text":"<p>Workspace service bundles are generated in the same way as workspace bundles.</p> <p>The mandatory parameters for workspace services are:</p> Parameter Type Description Example value <code>tre_id</code> string Unique ID of for the TRE instance. <code>tre-dev-42</code> <code>workspace_id</code> string Unique 4-character long, alphanumeric workspace ID. <code>0a9e</code>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#workpace-services-requiring-additional-address-sapces","title":"Workpace services requiring additional address sapces","text":"<p>Some workspace services may require additional address spaces to be provisioned. This may be as they need advanced network security groups, route tables or delegated subnets.</p> <p>To request an additional address space, the workspace service bundle must define an <code>address_space</code> parameter in the <code>porter.yaml</code> file. The value of this parameter will be provided by API to the resource processor.</p> <p>The size of the <code>address_space</code> will default to <code>/24</code>, however other sizes can be requested by including an <code>address_space_size</code> as part of the workspace service template.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#user-resource-bundle-manifests","title":"User resource bundle manifests","text":"<p>User Resource bundles are generated in the same way as workspace bundles and workspace services bundles. The main difference is that a workspace service type needs to be supplied when registering a user resource template, as it only applies to a given workspace service.</p> <p>The mandatory parameters for User Resources are:</p> Parameter Type Description Example value <code>tre_id</code> string Unique ID of for the TRE instance. <code>tre-dev-42</code> <code>workspace_id</code> string Unique 4-character long, alphanumeric workspace ID. <code>0a9e</code>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#azure-resources-tagging","title":"Azure Resources Tagging","text":"<p>TRE Cost Reporting is based on Azure tagging to be able to generate cost report for core services, shared services, workspace, workspace services and user resources. Templates authors need to make sure that underling Azure resources are tagged with the relevent tags, for more information see cost reporting:</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#versioning","title":"Versioning","text":"<p>Workspace versions are the bundle versions specified in the metadata. The bundle versions should match the image tags in the container registry (see Publishing workspace bundle).</p> <p>Bundle versions should follow Semantic Versioning, given a version number MAJOR.MINOR.PATCH, increment the:</p> <ol> <li> <p>MAJOR version when you make a breaking change, potential data loss, changes that don't easily/automatically upgrade, or significant changes which require someone to review what has changed and take some appropriate action, or functionality of the component has significantly changed and users might need training.</p> </li> <li> <p>MINOR version when you add minor functionality which can be automatically upgraded.</p> </li> <li> <p>PATCH version when you make backward-compatible bug or typo fixes.</p> </li> </ol> <p>For resource version upgrades see Upgrading Resources Version.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#publishing-workspace-bundle","title":"Publishing workspace bundle","text":"<p>See Registering workspace templates.</p>"},{"location":"tre-workspace-authors/authoring-workspace-templates/#manual-deployment","title":"Manual Deployment","text":"<p>Caution</p> <p>Resources should be deployed using the API (i.e. through the Swagger UI as described in the setup instructions). Only deploy manually for development/testing purposes.</p> <ol> <li> <p>Create a copy of the Porter bundle's environment settings from <code>/templates/&lt;scope&gt;/.env.sample</code> with the name <code>.env</code> and update the variables with the appropriate values.</p> </li> <li> <p>Build and deploy the Porter bundle</p> <pre><code>make bundle-build DIR=./templates/&lt;scope&gt;/&lt;bundle_name&gt;\nmake bundle-publish DIR=./templates/&lt;scope&gt;/&lt;bundle_name&gt; \nmake bundle-register DIR=./templates/&lt;scope&gt;/&lt;bundle_name&gt; BUNDLE_TYPE=&lt;scope&gt;\n</code></pre> </li> </ol>"},{"location":"tre-workspace-authors/firewall-rules/","title":"Adding Firewall Rules as part of a workspace or service deployment","text":"<p>A TRE service may require certain firewall rules to be opened in the TRE firewall. Examples include:</p> <ul> <li>Access to an external authorisation endpoint</li> <li>Access to an external data store</li> <li>Access to an external API</li> </ul> <p>Please be aware when opening firewall rules there is the potential for data to be leaked from the workspace to the external location.</p>"},{"location":"tre-workspace-authors/firewall-rules/#firewall-rules-in-template-schema","title":"Firewall Rules in Template Schema","text":"<p>Azure TRE uses the <code>template_schema.json</code> file of the service in question (e.g. <code>templates/workspace_services/azureml/template_schema.json</code>) to define firewall rules. These rules are configured in the <code>pipeline</code> section at the end of the schema file.</p>"},{"location":"tre-workspace-authors/firewall-rules/#pipeline-structure","title":"Pipeline Structure","text":"<p>Firewall rules are defined in steps within the pipeline sections for <code>install</code>, <code>upgrade</code>, and <code>uninstall</code> operations. Each operation contains steps that modify the firewall configuration during that operation. Please note that at the moment only the <code>upgrade</code> step is implemented, <code>install</code> and <code>uninstall</code> will be implemented in the future.</p> <p>Please see Pipeline Templates Overview for more information on the pipeline structure.</p> <p>Example pipeline step:</p> <pre><code>{\n  \"stepId\": \"260421b3-7308-491f-b531-e007cdc0ff46\",\n  \"stepTitle\": \"Add network firewall rules\",\n  \"resourceTemplateName\": \"tre-shared-service-firewall\",\n  \"resourceType\": \"shared-service\",\n  \"resourceAction\": \"upgrade\",\n  \"properties\":  \"properties\": [\n          {\n            \"name\": \"network_rule_collections\",\n            \"type\": \"array\",\n            \"arraySubstitutionAction\": \"replace\",\n            \"arrayMatchField\": \"name\",\n            \"value\": {\n              \"name\": \"nrc_svc_{{ resource.id }}_azureml\",\n              \"action\": \"Allow\",\n              \"rules\": [\n                {\n                  \"name\": \"AzureMachineLearning\",\n                  \"description\": \"Azure Machine Learning rules\",\n                  \"source_addresses\": \"{{ resource.properties.aml_subnet_address_prefixes }}\",\n                  \"destination_addresses\": [\n                    \"AzureMachineLearning\"\n                  ],\n                  \"destination_ports\": [\n                    \"443\",\n                    \"8787\",\n                    \"18881\"\n                  ],\n                  \"protocols\": [\n                    \"TCP\"\n                  ]\n                },\n               // More property values defined here as needed.\n              ]\n            }\n          },\n\n        ]\n}\n</code></pre>"},{"location":"tre-workspace-authors/firewall-rules/#rule-collection-types","title":"Rule Collection Types","text":"<p>There are two main types of rule collections in Azure TRE:</p> Collection Type Description <code>network_rule_collections</code> Controls traffic based on source, destination, protocol, and port <code>rule_collections</code> Application-level rules controlling traffic to specific FQDNs"},{"location":"tre-workspace-authors/firewall-rules/#network-rule-collections","title":"Network Rule Collections","text":"<p>Network rule collections control traffic at the network level and are configured with the following properties:</p> Property Description <code>name</code> Unique identifier for the rule collection <code>action</code> Action to take (Allow/Deny) <code>rules</code> Array of individual network rules <p>Each network rule has the following structure:</p> Property Description Example <code>name</code> Rule name \"AzureMachineLearning\" <code>description</code> Human-readable description \"Azure Machine Learning rules\" <code>source_addresses</code> Origin of traffic \"{{ resource.properties.aml_subnet_address_prefixes }}\" <code>destination_addresses</code> Target of traffic [\"AzureMachineLearning\"] <code>destination_ports</code> Allowed ports [\"443\", \"8787\"] <code>protocols</code> Allowed protocols [\"TCP\"]"},{"location":"tre-workspace-authors/firewall-rules/#application-rule-collections","title":"Application Rule Collections","text":"<p>Application rule collections control traffic at the application level and are configured with the following properties:</p> Property Description <code>name</code> Unique identifier for the rule collection <code>action</code> Action to take (Allow/Deny) <code>rules</code> Array of individual application rules <p>Each application rule has the following structure:</p> Property Description Example <code>name</code> Rule name \"AzureML_client\" <code>description</code> Human-readable description \"AzureML rules\" <code>source_addresses</code> Origin of traffic \"{{ resource.properties.workspace_address_spaces }}\" <code>target_fqdns</code> Target FQDNs [\"aadcdn.msauth.net\"] <code>protocols</code> Protocol configuration [{\"port\": \"443\", \"type\": \"Https\"}]"},{"location":"tre-workspace-authors/firewall-rules/#rule-collection-operations","title":"Rule Collection Operations","text":"<p>When modifying rule collections, you can specify how the rules should be applied:</p> Operation Description <code>replace</code> Replace existing rules that match the specified criteria, typically used in <code>install</code> and <code>upgrade</code> steps <code>remove</code> Remove rules that match the specified criteria, typically used in <code>uninstall</code> steps <p>This is controlled by the <code>arraySubstitutionAction</code> property:</p> <pre><code>{\n  \"name\": \"network_rule_collections\",\n  \"type\": \"array\",\n  \"arraySubstitutionAction\": \"replace\",\n  \"arrayMatchField\": \"name\",\n  \"value\": {\n              \"name\": \"nrc_svc_{{ resource.id }}_azureml\",\n              \"action\": \"Allow\",\n              \"rules\": [\n                {\n                  \"name\": \"AzureMachineLearning\",\n                  \"description\": \"Azure Machine Learning rules\",\n                  \"source_addresses\": \"{{ resource.properties.aml_subnet_address_prefixes }}\",\n                  \"destination_addresses\": [\n                    \"AzureMachineLearning\"\n                  ],\n                  \"destination_ports\": [\n                    \"443\",\n                    \"8787\",\n                    \"18881\"\n                  ],\n                  \"protocols\": [\n                    \"TCP\"\n                  ]\n                },\n               // More property values defined here as needed.\n              ]\n            }\n}\n</code></pre>"},{"location":"tre-workspace-authors/firewall-rules/#template-variables","title":"Template Variables","text":"<p>Firewall rules often use template variables to dynamically set values:</p> Variable Pattern Description Example <code>{{ resource.id }}</code> The resource ID Used in rule collection names <code>{{ resource.properties.x }}</code> Resource-specific properties Address spaces, FQDNs"},{"location":"tre-workspace-authors/firewall-rules/#example-rule-collection","title":"Example Rule Collection","text":"<p>Below is an example of a network rule collection for Azure Machine Learning:</p> <pre><code>{\n  \"name\": \"nrc_svc_{{ resource.id }}_azureml\",\n  \"action\": \"Allow\",\n  \"rules\": [\n    {\n      \"name\": \"AzureMachineLearning\",\n      \"description\": \"Azure Machine Learning rules\",\n      \"source_addresses\": \"{{ resource.properties.aml_subnet_address_prefixes }}\",\n      \"destination_addresses\": [\"AzureMachineLearning\"],\n      \"destination_ports\": [\"443\", \"8787\", \"18881\"],\n      \"protocols\": [\"TCP\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"tre-workspace-authors/firewall-rules/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive names and descriptions for rule collections and individual rules.</li> <li>Minimize the scope of firewall rules to only what is necessary.</li> <li>Document any custom rules in your service documentation.</li> <li>Test thoroughly after making changes to firewall rules.</li> <li>Review rules periodically to ensure they are still required.</li> </ol>"},{"location":"troubleshooting-faq/","title":"Operations Debugging and Troubleshooting guide","text":"<p>This guide explains how to go about finding the root cause of why a workspace resource might not have been deployed.</p> <p>The topics included in this section should be followed in order as that is how the message also flows in the system.</p>"},{"location":"troubleshooting-faq/airlock-troubleshooting/","title":"Airlock Troubleshooting","text":""},{"location":"troubleshooting-faq/airlock-troubleshooting/#users-cannot-create-review-vms","title":"Users cannot create Review VMs","text":"<p>If a user sees an error when creating Review VMs, this most likely means that the configuration isn't correct. Double-check that all GUIDs don't have any symbols missing, and the names of templates are correct.</p> <p></p>"},{"location":"troubleshooting-faq/airlock-troubleshooting/#files-do-not-appear-in-review-data-folder-on-the-vm","title":"Files do not appear in Review Data folder on the VM","text":"<p>If the Review Data folder is empty, it's likely because the review VM can't connect to the storage account. Import requests must be reviewed using a VM inside the workspace, and export requests must be reviewed using a VM outside the workspace.</p> <p>For imports ensure that the <code>airlock-import-review</code> workspace template is being used and configured in the airlock configuration for the workspace.</p>"},{"location":"troubleshooting-faq/airlock-troubleshooting/#airlock-request-does-not-move-through-the-workflow-as-expected","title":"Airlock request does not move through the workflow as expected","text":"<p>If the Airlock request does not move through the workflow as expected, it's likely an issue with the Azure Function that processes airlock requests. This function is deployed as part of the TRE, and can be found in the Azure Portal under the name <code>func-airlock-processor-&lt;tre_id&gt;</code>.</p> <p>To troubleshoot, view the function invocations starting with the StatusChangedQueue Trigger, then the other functions as shown in the image below:</p> <p></p> <p>Look for errors in the function invocations in the same time frame that the airlock request was created. Even if the function executed successfully, there may still be errors within the function invocation details. Invocations that take longer can also be a sign of an issue. For example:</p> <p></p> <p>If this error should have been handled please create an issue on the GitHub repository for the Azure TRE.</p>"},{"location":"troubleshooting-faq/api-logs-deployment-center/","title":"API logs using deployment center","text":"<p>Check that the version you are debugging/troubleshooting is the same one deployed on the App Service.</p> <p>You can check this in Azure's Deployment Center, or follow the logs as generated by the container in the logs tabs.</p> <p></p>"},{"location":"troubleshooting-faq/app-insights-logs/","title":"Checking the logs in App Insights","text":"<p>Every component of TRE should send their trace logs to App Insights logging backend, and you should be able to see the process flow by using a suitable query.</p> <p>Note</p> <p>AppTraces can take time to appear so be patient.</p> <p>To find logs in Application Insights, go to your resource group, then to Application Insights instance, which is named like <code>appi-${TRE_ID}</code>. Click on Logs in the left menu. Under Queries, select either <code>TRE Resource Processor Logs</code> or <code>TRE API Logs</code>.</p> <p></p> <p>A manual query can also be created such as:</p> <pre><code>traces \n| where cloud_RoleName == \"resource_processor\"\n| order by timestamp desc \n</code></pre>"},{"location":"troubleshooting-faq/app-insights-logs/#check-the-logs-for-a-specific-deployment","title":"Check the logs for a specific deployment","text":"<p>You can run the following example query to get the logs for a specific deployment.</p> <pre><code>let tracking_id=\"&lt;workspace_id&gt;\";\nAppTraces\n| where Message has tracking_id or OperationId == tracking_id | sort by TimeGenerated desc\n</code></pre> <p></p> <p>For a successful deployment you should see a message similiar to:</p> <pre><code>Received deployment status update message with correlation ID 70b09db1-30c4-475c-b1a1-8f9599a5a2f4: {'id': '70b09db1-30c4-475c-b1a1-8f9599a5a2f4', 'status': 'deployed', 'message': 'cse-msr-dev-b7f6: Workspace was deployed successfully...'}\n</code></pre> <p>It should also be evident from the message flow where the current processing is stuck or failed. Failed deployment status should also be available in the <code>GET /api/workspaces/{workspace_id}</code> and this is just another way to confirm it.</p>"},{"location":"troubleshooting-faq/cloud-init/","title":"Troubleshooting cloud-init","text":"<p>Cloud-init is used to configure a number of virtual machines within the Azure TRE project at first boot. This methood is used as we are unable to distribute pre built images with third part dependancies. In a production environment you may choose to create your own VM images to avoid the need for cloud-init scripts to run.</p> <p>Examples of virtual machines using cloud-init are: - Resource Processor - Sonatype Nexus VM - Apache Guacamole Linux VM</p>"},{"location":"troubleshooting-faq/cloud-init/#retrieving-the-cloud-init-logs","title":"Retrieving the cloud-init logs","text":"<p>Log onto the virtual machine using Bastion or serial console and run the following command to view the cloud-init logs:</p> <pre><code>sudo cat /var/log/cloud-init-output.log\n</code></pre>"},{"location":"troubleshooting-faq/cloud-init/#re-running-cloud-init-scripts","title":"Re-running cloud-init scripts","text":"<p>If you wish to re-run the cloud-init scripts you can run the following commands from the virtual machine terminal session:</p> <pre><code>sudo cloud-init clean --logs\nsudo cloud-init init --local\nsudo cloud-init init\nsudo cloud-init modules --mode=config\nsudo cloud-init modules --mode=final\n</code></pre>"},{"location":"troubleshooting-faq/debug-logs/","title":"Setting the logging level to DEBUG on the Resource Processor and API","text":"<p>For security, the API and Resource PRocessor are configured to not show detailed error messages and stack trace when an error occurs.</p> <p>You can enable debugging on the API and Resource Processor by setting <code>logging_level=debug</code> under developer_settings section in your<code>config.yaml</code> file.</p> <p>Once set, you need to run <code>make deploy-core</code> to update the settings on the API and Resource Processor. You should start to see logs with severity level <code>0</code> appear in the Application Insights logs.</p>"},{"location":"troubleshooting-faq/manually-editing-resources/","title":"Manually editing resources in Cosmos DB","text":"<p>On occasion, resources in the TRE (i.e. a user resource, workspace service or workspace) can get into a corrupted state, usually when an operation performed by the API and Resource Processor has failed and has not been gracefully handled. This can leave the resource state stored in Cosmos out of sync with the state of the resource in Azure.</p> <p>For scenarios where you need to manually modify the state of the TRE resource, you can use the following guide.</p> <p>Caution</p> <p>This should only be performed when absolutely necessary. Modifying properties in a resource to unexpected/inaccurate values can cause various failures when the API/RP performs a subsequent operation on it.</p>"},{"location":"troubleshooting-faq/manually-editing-resources/#find-the-resource-id","title":"Find the Resource Id","text":"<p>We want to make sure we find the correct resource record in Cosmos before modifying it; we can do this by locating the Resource Id of the resource we wish to modify so we can correlate it later on. If you don't already know the Resource Id, follow one of the sub-sections below; otherwise, skip to Access Cosmos DB.</p>"},{"location":"troubleshooting-faq/manually-editing-resources/#using-the-tre-ui","title":"Using the TRE UI","text":"<ol> <li> <p>Navigate to the UI in your browser (typically <code>{YOUR_TRE_ID}.{REGION}.cloudapp.azure.com</code>)</p> </li> <li> <p>Find the resource card of the resource you wish to modify, then click the <code>i</code> button and copy the Resource Id</p> </li> </ol> <p></p>"},{"location":"troubleshooting-faq/manually-editing-resources/#using-the-tre-api","title":"Using the TRE API","text":"<ol> <li> <p>Head to the Swagger UI (typically <code>{YOUR_TRE_ID}.{REGION}.cloudapp.azure.com/api/docs</code>)</p> <ul> <li>If you're looking for a resource within a workspace (i.e. a workspace service or user resource), you will instead need to open <code>/api/workspaces/{WORKSPACE_ID}/docs</code></li> </ul> </li> <li> <p>Click Authorize and authenticate</p> </li> <li> <p>Find the GET method for the resource type you're looking for, hit Try it out, fill in any required parameters, then click Execute.</p> </li> <li> <p>Locate the item you're interested in within the response array and copy the value from the <code>id</code> field</p> <p></p> </li> </ol>"},{"location":"troubleshooting-faq/manually-editing-resources/#access-cosmos-db","title":"Access Cosmos DB","text":"<ol> <li> <p>Find your Azure TRE main resource group (typically <code>rg-{YOUR_TRE_ID}</code>) in the Azure Portal and select the Cosmos DB instance (<code>cosmos-{YOUR_TRE_ID}</code>)</p> <p></p> </li> <li> <p>In the side-menu, select the Networking tab and click Add my current IP then Save to whitelist your IP in the Cosmos DB firewall.</p> <p></p> </li> <li> <p>This will start an operation that will take a few minutes to complete. You can check the status of this in the Notifications panel of the portal.</p> </li> </ol>"},{"location":"troubleshooting-faq/manually-editing-resources/#edit-resource","title":"Edit resource","text":"<ol> <li> <p>Once the operation to whitelist your IP has completed, navigate to the Data Explorer pane, and you should see a list of collections. Select the appropriate one that you intend to modify (most likely Resources, which contains all of the deployed resources within your TRE), then select Items.</p> </li> <li> <p>Click Edit Filter and enter <code>WHERE c.id = \"{YOUR_RESOURCE_ID}\"</code>, then press Apply Filter.</p> </li> <li> <p>Select the only document in the list. You can now edit the JSON object within the Data Explorer editor, then hit Update when you're done. This will immediately update the resource in Cosmos DB.</p> <p></p> </li> </ol> <p>Caution</p> <p>Don't forget to remove your IP from the Cosmos firewall whitelist when you're done!</p>"},{"location":"troubleshooting-faq/troubleshooting-rp/","title":"Checking the Virtual Machine Scale Set (VMSS) instance running resource processor","text":"<p>If you see messages hanging in the service bus queue then the resource processor is not up and running.</p> <p>Verify that the VMSS instance is up and healthy.</p> <p></p> <p>The processor runs in a VNET, and you cannot connect to it directly.</p> <ol> <li> <p>Connect to the instance using Bastion. Bastion is already deployed, and you can use the username <code>adminuser</code>. The password is stored in the keyvault under the secret <code>resource-processor-vmss-password</code></p> <p>Info</p> <p>You cannot see secrets unless you are added to a suitable access policy for the Key Vault.</p> <p></p> <p></p> </li> <li> <p>After logging in you should check the status of cloud-init which is used to bootstrap the machine with docker and start the processor. Log files for cloud init are:</p> <ul> <li><code>/var/log/cloud-init.log</code></li> <li><code>/var/log/cloud-init-output.log</code></li> </ul> <p>If the Docker container is pulled as shown in logs then the resource processor should start.</p> </li> <li> <p>Check the status of the container using <code>docker ps</code></p> <p>If you see nothing (and the container was pulled) then the processor has either not started yet or it has crashed.</p> </li> <li> <p>Check the status of all Docker processes using <code>docker ps -a</code> which should show you if the container terminated prematurely.</p> </li> <li>Get the logs from the container using <code>docker logs &lt;container_id&gt;</code> command.</li> </ol> <p>To start a processor container manually:</p> <ol> <li>Find the runner_image:tag by running <code>docker ps</code></li> <li> <p>Execute the following command from the root (/) of the file system</p> <pre><code>docker run -v /var/run/docker.sock:/var/run/docker.sock --env-file .env --name resource_processor_vmss_porter_debug [runner_image:tag]\n</code></pre> </li> </ol>"},{"location":"troubleshooting-faq/troubleshooting-rp/#logs","title":"Logs","text":"<p>All logs from the resource processor are transferred to the App Insights instance, so it is not usually necessary to follow the progress by logging into the instance.</p> <p>Logging into the instance and starting a container manually however, is helpful in live debugging. When doing so, you can use the following aliases to monitor progress:</p> <ul> <li>rpstatus - a split screen with <code>docker ps</code> to show what containers are running (a bundle action run in its own container), the Resource Processor logs, and a free section for you to type any other command you wish (see below).</li> <li>dlf - runs <code>docker logs --since 1m --follow</code>, you should use with the name/id of the container you want to view, e.g. <code>dlf my_container</code></li> <li>dlf1 - same as <code>dlf</code> but will auto select the last container in the <code>docker ps</code> list (usually the last one started).</li> </ul>"},{"location":"troubleshooting-faq/troubleshooting-rp/#updating-the-running-container","title":"Updating the running container","text":"<p>If you start a container manually you will probably want to install software, for example, an editor. However, the firewall blocks all ingress traffic, so you cannot run <code>sudo apt update</code>. You need to add an override rule in the firewall to allow the traffic.</p> <p>Caution</p> <p>Remember to remove this rule when debugging is done.</p>"},{"location":"troubleshooting-faq/troubleshooting-sb/","title":"Checking the Service Bus","text":"<p>If the message payload is accepted by the API, and a workspace_id is generated, you should be able to track the progress of the deployment using <code>GET /api/workspaces/{workspace_id}</code></p> <p>Initially the status is always reported as:</p> <pre><code>{\n  \"deployment\": {\n    \"status\": \"awaiting_deployment\",\n    \"message\": \"This resource has not yet been deployed\"\n  }\n}\n</code></pre> <p>This should eventually change as the message flows through the system.</p> <p>If the message remains at this stage, you should first verify that the message arrived in the service bus.</p> <p>In the Azure portal:</p> <ol> <li>Select the Service Bus from deployed resources and click Entities &gt; Queues &gt; workspacequeue.</li> <li>Select the Service Bus Explorer and the Peek tab to check for hanging messages.</li> </ol> <p></p>"},{"location":"using-tre/","title":"Using the Azure TRE","text":"<p>This section contains information relevant on how to use AzureTRE.</p>"},{"location":"using-tre/terms-definitions/","title":"Terms and Definitions","text":"<p>Trusted Research Environments (TRE) enforce a secure boundary around distinct workspaces to enable information governance controls to be enforced.</p> <p></p> <p>A Trusted Research Environment (typically one per organization, or one per department in large organizations) consist of:</p> <ul> <li>One Composition Service (API, deployment engine etc. used to manage and deploy workspaces, workspace services and user resources)</li> <li>One set of Shared Services used by all workspaces</li> <li>A number of Workspaces, where each workspace is its own security boundary, and in turn contains Workspace Services and User Resources</li> </ul>"},{"location":"using-tre/terms-definitions/#the-composition-service","title":"The Composition Service","text":"<p>The Composition Service offers an abstraction over the lower-level Azure resources to allow for TRE users to provision resources in terms of workspaces and workspace services.</p> <p>The Composition Service reconciles the desired state with the actual state by invoking Azure resource deployments.</p> <p>The composition service is fronted by an API that helps the TRE Admin, TRE Workspace Owners and TRE Researchers create and manage the workspaces and workspace services.</p>"},{"location":"using-tre/terms-definitions/#shared-services","title":"Shared Services","text":"<p>A service provides one or more capabilities to you as a user of the TRE or to the TRE itself.  Depending on the type of the service it is scoped to the environment and shared across all workspaces (Shared Service) or scoped to a specific workspace (Workspace Service).</p> <p>The types of services required for a research project varies greatly why extensibility is a key aspect of the Azure TRE solution. New services can be developed by you and your organization to fit your needs.</p> <p>Shared Services are services and resource shared by all workspaces. These services are created once, when the TRE is deployed and managed by the TRE Administrator.</p> <p>Examples of shared services are:</p> <ul> <li>Firewall</li> <li>Package Mirror</li> <li>Git Mirror</li> </ul>"},{"location":"using-tre/terms-definitions/#workspace","title":"Workspace","text":"<p>A workspace is a set of resources on a network, with inbound traffic restricted to authorised users, and outbound access restricted to defined network locations.</p> <p>The workspace is a security boundary and there should be zero transfer of data out from the workspace unless explicitly configured. Data transfer is not restricted within a workspace.</p> <p>The workspace itself contains only the bare essentials to provide this functionality, such as virtual network(s), storage etc.</p> <p>Workspaces can be enhanced with one or more building blocks called workspace services like Azure ML, Guacamole etc. to allow functionality such as development of machine learning models, data engineering, data analysis and software development.</p> <p>Multiple workspaces can be created within a single Trusted Research Environment to enable the required separation for your projects.</p> <p>Each workspace has workspace users: a workspace owner (normally only one), and one or more workspace researchers that can access the data and workspace services in the workspace. The workspace owner is also considered a workspace researcher.</p> <p>Important</p> <p>The TRE has a soft limit of 32 projects, it can be increased to 70 by updating the storage account limit in your subscription to 500. See issue #3920 for more info.</p>"},{"location":"using-tre/terms-definitions/#workspace-service","title":"Workspace Service","text":"<p>A workspace service is a service, created as a building block, with pre-configured set of resources that can be applied to a workspace.</p> <p>Examples of Workspace Services are:</p> <ul> <li>Guacamole (Virtual Desktops)</li> <li>Azure Machine Learning</li> </ul> <p>Unlike shared services, a workspace service is only accessible to the workspace users.</p> <p>Some workspace services, such as Guacamole, allow users to add on user-specific resources (user resources)</p> <p>All workspace services can be deployed to all workspaces.</p>"},{"location":"using-tre/terms-definitions/#user-resource","title":"User Resource","text":"<p>A user resource is a resource that is only available to a particular researcher. For example a virtual machine exposed by Guacamole.</p> <p>User resources can be deployed to workspaces with a compatible workspace service. E.g. Guacamole VMs can only be deployed to workspaces where the Guacamole workspace service is deployed.</p>"},{"location":"using-tre/terms-definitions/#templates","title":"Templates","text":"<p>In order to deploy resources (workspaces, workspace services, user resources), the resources have to be defined in templates.</p> <p>A template contains everything needed to create an instance of the resource. Ex. a base workspace template, or a Guacamole workspace service template.</p> <p>The templates describe the porter bundles used, and the input parameters needed to deploy them.</p> <p>To use a template, and deploy a resource, the template needs to be registered in the TRE. This is done using the TRE API.</p> <p>Tip</p> <p>Once a template is registered it can be used multiple times to deploy multiple workspaces, workspace services etc.</p> <p>If you want to author your own workspace, workspace service, or user resource template, consult the template authoring guide</p>"},{"location":"using-tre/local-development/local-development/","title":"Local Development","text":"<p>This guide will cover how to setup local development environment to add custom templates to AzureTRE and deploy AzureTRE from the local machine.</p>"},{"location":"using-tre/local-development/local-development/#local-development-setup","title":"Local Development Setup","text":""},{"location":"using-tre/local-development/local-development/#prerequisites","title":"Prerequisites","text":"<p>To deploy an Azure TRE instance, the following assets and tools are required:</p> <ul> <li>Azure subscription</li> <li>Microsoft Entra ID tenant in which you can create application registrations</li> <li>Git client such as Git or GitHub Desktop</li> <li>Docker Desktop</li> </ul>"},{"location":"using-tre/local-development/local-development/#development-container","title":"Development container","text":"<p>The AzureTRE Deployment solution contains a development container with all the required tooling to develop and deploy the AzureTRE and your custom templates to it. To deploy and extend an AzureTRE instance using the provided development container you will also need:</p> <ul> <li>Visual Studio Code</li> <li>Remote containers extension for Visual Studio Code</li> </ul> <p>The files in AzureTRE Deployment repo for the dev container are located in <code>/.devcontainer/</code> folder.</p> <p>Having the prerequisites and the development container, to start local development follow the next steps:</p> <ol> <li>Clone the project you have created from the AzureTRE Deployment template <code>git clone &lt;your_project&gt;</code></li> <li>Open it in Visual Studio Code</li> <li>VSCode will recognize the devcontainer is set up in and will ask to reopen in Devcontainer:     </li> </ol> <p>After the devcontainer is built, you will see the AzureTRE folder which you can use as a reference for your templates. In addition the sample.env files will be added.</p>"},{"location":"using-tre/local-development/local-development/#local-deployment","title":"Local Deployment","text":"<p>To run AzureTRE  deploy locally:</p> <ol> <li>Open your project in VScode devcontainer.</li> <li>Fill in all the required configuration. Follow this guide to set it up.</li> <li>run <code>make all</code></li> </ol> <p>Tip</p> <p>The Makefile in the AzureTRE deployment repository sources the make commands from AzureTRE that it references. This allows you to add your commands and also use the same make commands used in the AzureTRE.</p> <p>Having all the env vars in place:</p>"},{"location":"using-tre/local-development/local-development/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue, or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"using-tre/templates/","title":"Creating Custom templates","text":"<p>This document will show how to create custom templates and integrate them into your CI/CD pipelines.</p>"},{"location":"using-tre/templates/#templates-types","title":"Templates types","text":"<p>There are 3 types of templates:</p> <ol> <li>Workspace</li> <li>Workspace Service</li> <li>User Resource</li> </ol> <p>Read more about them here</p>"},{"location":"using-tre/templates/#how-to-add-custom-templates","title":"How to add custom templates","text":"<p>AzureTRE deployment repository has directories set up for workspace, workspace service and user resource template definitions.</p> <p>See the template authoring guide to learn more about how to author templates.</p> <p>To add your custom templates follow the next steps:</p> <ol> <li>Add your template under the relevant folder (For example: if you are adding a new workspace template then place it under <code>/templates/workspaces</code> folder).  </li> <li>Use existing templates in AzureTRE as a reference.  </li> <li>Add porter configuration - AzureTRE uses Porter as a solution for implementing and deploying workspaces and workspace, learn more about how it is used in AzureTRE here.  </li> <li>Add terraform scripts to set up your deployment plan.<ul> <li>Define resource template in the API - follow this readme to register your template.</li> <li>Use the AzureTRE UI to deploy your resources</li> <li>Add your custom templates to CI/CD workflows - in Deploy Azure TRE Reusable workflow make sure to add your bundles under register_bundles and publish_bundles steps.</li> </ul> </li> </ol>"},{"location":"using-tre/templates/#publish-and-register-custom-templates-in-the-cicd","title":"Publish and Register Custom templates in the CI/CD","text":"<p>See the pipelines documentation to learn more about publishing and registering your custom templates as part of the CI/CD/</p>"},{"location":"using-tre/templates/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>If you have any comments or suggestions about our documentation then you can visit our GitHub project and either raise a new issue or comment on one of the existing ones.</p> <p>You can find our existing documentation issues on GitHub by clicking on the link below:</p> <p>Existing Documentation Issues</p> <p>Or, you can raise a new issue by clicking on this link:</p> <p>Report an Issue or Make a Suggestion</p> <p>Thank you for your patience and support!</p>"},{"location":"using-tre/tre-for-research/","title":"Using the Azure TRE for Research","text":"<p>This section contains information relevant on how to conduct research in a TRE workspace.</p>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/","title":"Importing and exporting data with Airlock","text":"<p>This guide will take you through the process of importing data into a TRE workspace, and exporting data from a workspace to the outside world, using the Airlock feature.</p> <p>The Airlock feature is intended for ad-hoc use when you need to bring in and export out files that you need for your research. It ensures that when you import or export this data all the appropriate approvals and procedures configured by your organisation take place.</p> <p>You can read more about the Airlock feature in the Airlock documentation.</p>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#importing-data-to-a-workspace","title":"Importing data to a workspace","text":"<p>To bring in external data to a secure TRE workspace so you can use it for your research, follow the steps outlined below.</p>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#step-1-create-a-draft-import-request","title":"Step 1: Create a draft import request","text":"<ol> <li> <p>Open your TRE UI and navigate to the workspace you wish to import data into</p> </li> <li> <p>Navigate to the Airlock tab (in the left-hand menu)</p> </li> <li> <p>Click Create new and select Import</p> </li> <li> <p>Fill in a suitable Title for your request (make this short but descriptive to help you and others identify it in a list of many other requests)</p> </li> <li> <p>Provide a Business Justification for bringing the data into the workspace (this will be used to help your organisation's data stewards decide whether to approve or reject the request)</p> </li> <li> <p>Click Create when ready. This will create your draft request and allow you to proceed with adding the data you'd like to import</p> </li> </ol> <p></p>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#step-2-add-data-to-your-import-request","title":"Step 2: Add data to your import request","text":"<ol> <li> <p>The request you've just created should pop up automatically; however, you can return to it at any time within the Airlock page by finding it in the list of requests. (Use the My requests quick filter to find it more easily)</p> </li> <li> <p>Click Generate in the Files section to generate a Storage SAS URL to use for uploading your data.</p> </li> </ol> <p></p> <ol> <li> <p>Copy the URL and use it to upload your data to the Azure Storage account. You can use several tools for this that accept SAS URLs, such as the Azure Storage Explorer, or the Azure CLI, depending on your preference.</p> <ul> <li>To use Storage Explorer, follow this guide to connect to container.</li> </ul> <ul> <li>With the Azure CLI, you can run <code>az storage blob upload -f /path/to/file --blob-url SAS_URL</code>. More info</li> </ul> </li> </ol> <p>Warning</p> <p>Airlock only supports a single file per request. If you need to import multiple files, please zip them before uploading to the request's storage container.</p> <ol> <li>Once you've uploaded your data, head back to the TRE UI and click Submit on your draft request. This will submit your request for approval.</li> </ol>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#step-3-get-your-approved-data","title":"Step 3: Get your approved data","text":"<p>The request will be in an In Review state until it is either approved or rejected by your Airlock Manager(s) manually or by an automated workflow (depending on your organisation's specific configuration).</p> <p>Note</p> <p>Your organisation may have the Airlock Notifier service configured which will send email notifications when your request has been approved/rejected, or you may have another mechanism in place. Please check with your TRE administrator to see which mechanism are you using to send notifications.</p> <p>If the request is rejected, your data will be deleted and your request will move into a Rejected state. You will be able to see feedback in the Reviews section on why your request was rejected so you can create a new request that addresses any concerns.</p> <p>If your request is approved, you can follow the below steps to get your data from within your workspace:</p> <ol> <li>Head back to your Airlock request in the TRE UI. You should find that it is now in an Approved state and ready for you to get your data. You can also see the notes from the reviewer in the Reviews section.</li> </ol> <p></p> <ol> <li> <p>Click Generate in the Files section to generate another Storage SAS URL which you'll use for downloading your data.</p> </li> <li> <p>Paste this link into your Workspace VM (or whichever workspace resource you're wanting to access the data from). Like before, use your preferred tool to access the data using the SAS URL, but this time to download the data.</p> <ul> <li>With the Azure CLI, you can use <code>az storage blob download --file /path/to/write/to --blob-url SAS_URL</code>. More info</li> </ul> </li> </ol> <p>Tip</p> <p>If you are using a Workspace VM that uses one of the standard TRE Data Science VM images, you will likely have both Storage Explorer and the Azure CLI pre-installed.</p>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#exporting-data-from-a-workspace","title":"Exporting data from a workspace","text":"<p>Exporting data from a secure TRE workspace to the outside world involves similar steps to Import, but with a couple of key differences. Follow these steps:</p> <ol> <li> <p>Open your TRE UI and navigate to the workspace you wish to export data from</p> </li> <li> <p>Navigate to the Airlock tab (in the left-hand menu) and click Create new, then select Export</p> </li> <li> <p>Fill in a suitable Title and Business Justification for the request then hit Create</p> </li> </ol> <p></p> <ol> <li>Once the draft request pop-out opens, click Generate in the Files section to generate a Storage SAS URL to use for uploading your data.</li> </ol> <p></p> <ol> <li> <p>Since this is an export, this means the data is exported from the workspace outside. Therefore, to upload the requested export file, you will now need to head into your Workspace VM/resource containing the data you wish to export. Use your preferred storage tool to upload the data to the request container and paste in the SAS URL you've just generated. See Step 2 in the Importing data section for more details on using these tools.</p> </li> <li> <p>Once you've uploaded your data, head back to the TRE UI in your host and click Submit on your draft request. This will submit your request for approval.</p> </li> </ol> <p></p> <ol> <li> <p>Like in Step 3 of Importing data, your request will be in an In Review state until it's either approved or rejected by your organisation's approval workflow.</p> </li> <li> <p>Once it's approved, head back to your request in the UI and click Generate a second time to get a download link.</p> </li> </ol> <p></p> <ol> <li>In your host (outside of the workspace), you can use this link with your tool of choice to download the data from the request container.</li> </ol>"},{"location":"using-tre/tre-for-research/importing-exporting-data-airlock/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>Contribute to Documentation</p>"},{"location":"using-tre/tre-for-research/review-airlock-request/","title":"Reviewing Airlock Requests","text":"<p>This document is intended for a user assuming the Airlock Manager role in the workspace. It explains how to review Airlock Requests, both for data import and data export.</p>"},{"location":"using-tre/tre-for-research/review-airlock-request/#accessing-airlock-requests","title":"Accessing Airlock Requests","text":"<p>Airlock Requests page can be found under Airlock menu for the relevant workspace. The view allows to select requests \"Awaiting my review\" to quickly get to requests that need to be reviewed for this workspace. Other filters are also available by clicking on the column name.</p> <p>Only requests that are in <code>in_review</code> state can be reviewed.</p> <p></p>"},{"location":"using-tre/tre-for-research/review-airlock-request/#reviewing-a-request","title":"Reviewing a request","text":"<p>The following steps are the same for import and export request types.</p> <p>Request page is available by double-clicking on one of the requests. This gives an overview of the request, including information on who created the request, the title and business justification of the request, when it was created, in what workspace, and type of the request (import or export).</p> <p></p> <p>Reviewing menu is available by clicking on Review button at the bottom.</p> <p></p> <p>This screen offers an option to create a VM from which the imported or exported data can be reviewed. To create a VM, click on \"Create\" button. The display will show that the VM is \"Awaiting Deployment\", and then \"Deploying\".</p> <p></p> <p>After several minutes, the display will show that the VM is \"Running\", and a \"View Data\" button will become available. When it's clicked, a Guacamole session is opened in a new tab.</p> <p></p> <p>On the VM, the data to review will be readily available on Desktop, in ReviewData folder.</p> <p></p> <p></p> <p>Back on the request display on the UI, there is a button \"Proceed to review\" which will show a dialogue for providing an explanation for the request decision. It must be filled in before the request can be either approved or rejected.</p> <p></p> <p>After the decision is submitted, TRE will automatically start deletion of the VM that was created to review this request.</p>"},{"location":"using-tre/tre-for-research/using-vms/","title":"Set up of a Virtual Machine","text":"<p>This document will talk you through how to deploy a Virtual Machine via the Guacamole Workspace Service and access imported data.</p>"},{"location":"using-tre/tre-for-research/using-vms/#creating-your-vm","title":"Creating your VM","text":"<ol> <li> <p>Open the UI link <code>https://&lt;TRE_ID&gt;.&lt;LOCATION&gt;.cloudapp.azure.com/</code></p> <ol> <li>You will need the Microsoft Authenticator app on your phone. The above will take you through the set up process.</li> </ol> </li> <li> <p>Within the UI, under the Workspaces tab you should be able to see any Workspaces assigned to you.</p> </li> <li> <p>Click on the title of the Workspace to go into it. Within there should be the Guacamole Workspace Service, click the title to go into the Workspace Service.</p> <ol> <li>Clicking Connect will take you to the Guacamole Home Page where it will list out all of your deployed VMs.</li> </ol> </li> <li> <p>Within the Workspace Service tab, you\u2019ll need to choose Create new to create a user resource. This will be your VM.</p> </li> <li> <p>Choose the template you\u2019d like to base your VM on, at the moment the choice will be between a Windows or Linux VM.</p> <ol> <li>Fill in all of the details to your requirements.</li> </ol> </li> <li> <p>Once the resource is deployed, you should be able to choose Connect and view your VM in a browser.</p> </li> </ol> <p></p> <p>You may see a pop-up asking for guacamole to have permission to use your clipboard, please allow that.</p>"},{"location":"using-tre/tre-for-research/using-vms/#accessing-data","title":"Accessing Data","text":"<p>You may have data pre-provisioned into your workspace, or you may import data via the airlock.</p>"},{"location":"using-tre/tre-for-research/using-vms/#starting-and-stopping-your-vm","title":"Starting and Stopping your VM","text":"<p>When you are no longer using a VM, it is good practice to stop it so that the VM is deallocated and no unnecessary costs will be applied. To do this, navigate to the UI and find your VM.</p> <ol> <li>Click on the three small dots in the top right of the user resource card and choose Actions and then Stop.</li> <li>It will take a few minutes to take effect and the card should then display 'VM deallocated'.</li> </ol> <p>The same steps can be followed to Start your VM.</p> <p></p> <p></p>"},{"location":"using-tre/tre-for-research/using-vms/#deleting-your-vm","title":"Deleting your VM","text":"<p>If you no longer wish to use the VM you have created there is an option to delete it. First you'll need to disable the VM, similar to above when stopping it:</p> <ol> <li>Click on the three small dots in the top right and choose Disable.</li> <li>Once it is disabled (this can take a few minutes), click on the three dots again and you should then have the option to delete it.</li> </ol> <p></p> <p></p>"},{"location":"using-tre/tre-for-research/using-vms/#vm-actions","title":"VM Actions","text":"<p>Whilst the VM is currently updating due to an invoked action it will display a message similar to the one below. This will occur any time a service or user resource is deployed, disabled, deleted etc.</p> <p></p> <p>You can also view any current operations by clicking on the bell in the top right hand corner of the screen.</p>"},{"location":"using-tre/tre-for-research/using-vms/#how-to-contribute-to-our-documentation","title":"How to Contribute to our Documentation","text":"<p>Contribute to Documentation</p>"}]}